<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<# 
	int maxBases = 7;
	int maxParameters = 15;
#>
using System;
using System.Collections.Generic;
using System.ComponentModel;
using NMF.Models;

namespace NMF.Expressions
{
<# for (int bases = 1; bases <= maxBases; bases++) {
   for (int parameters = 1; parameters <= maxParameters; parameters++) { #>
    internal class ObservablePromotionModelFunc<#= bases #>Bases<#= parameters #>Parameters<<# for (int b = 1; b <= bases; b++) { #>TBase<#= b #>, <# } #><# for (int p = 1; p <= parameters; p++) { #>TPar<#= p #>, <# } #>TResult> : ObservableModelFuncProxyCall<#= bases #>Bases<#= parameters #>Parameters<<# for (int b = 1; b <= bases; b++) { #>TBase<#= b #>, <# } #><# for (int p = 1; p <= parameters; p++) { #>TPar<#= p #>, <# } #>TResult>
    {
        public ObservablePromotionMethodCall<<# for (int p = 1; p <= parameters; p++) { #>TPar<#= p #>, <# } #>TResult> PromotionFunc { get; private set; }

        public ObservablePromotionModelFunc<#= bases #>Bases<#= parameters #>Parameters(<# for (int b = 1; b <= bases; b++) { #>INotifyExpression<TBase<#= b #>> base<#= b #>, <# } #><# for (int p = 1; p <= parameters; p++) { #>Func<<# for (int b = 1; b <= bases; b++) { #>TBase<#= b #>, <# } #>TPar<#= p #>> selector<#= p #>, ICollection<string> par<#= p #>Properties, bool par<#= p #>Containments, <# } #>Func<<# for (int p = 1; p <= parameters; p++) { #>TPar<#= p #>, <# } #>TResult> func)
            : base(base1<# for (int b = 2; b <= bases; b++) { #>, base<#= b #><# } #><# for (int p = 1; p <= parameters; p++) { #>, selector<#= p #><# } #>)
        {
            PromotionFunc = new ObservablePromotionMethodCall<<# for (int p = 1; p <= parameters; p++) { #>TPar<#= p #>, <# } #>TResult>(func<# for (int p = 1; p <= parameters; p++) { #>, Parameter<#= p #>, par<#= p #>Properties, par<#= p #>Containments<# } #>);
        }

        public override INotifyExpression<TResult> Func
        {
            get
            {
                return PromotionFunc;
            }
        }

        public override INotifyExpression<TResult> ApplyParameters(IDictionary<string, object> parameters)
        {
            return new ObservablePromotionModelFunc<#= bases #>Bases<#= parameters #>Parameters<<# for (int b = 1; b <= bases; b++) { #>TBase<#= b #>, <# } #><# for (int p = 1; p <= parameters; p++) { #>TPar<#= p #>, <# } #>TResult>(<# for (int b = 1; b <= bases; b++) { #>Parameter1.Base<#= b #>, <# } #>

<# for (int p = 1; p <= parameters; p++) { #>
                Parameter<#= p #>.MemberGetter, PromotionFunc.Arg<#= p #>Properties, PromotionFunc.Arg<#= p #>Composition,
<# } #>
                PromotionFunc.Function);
        }
    }
<# }} #>

	internal static class ObservablePromotionModelFuncTypes
	{
		public static readonly Type[,] Types = {
<# for (int b = 1; b <= maxBases; b++) { #>
			{ typeof(ObservablePromotionModelFunc<#= b #>Bases1Parameters<<#= new string(',', b) #>,>)<# for (int p = 2; p <= maxParameters; p++) { #>, typeof(ObservablePromotionModelFunc<#= b #>Bases<#= p #>Parameters<<#= new string(',', b+p) #>>)<# } #> }<# if (b != maxBases) { #>,<# } #>

<# } #>
		};
	}
}
