//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;

namespace NMF.Models.Meta
{
    
    
    /// <summary>
    /// The representation of the ModelElement class
    /// </summary>
    [XmlNamespaceAttribute("http://nmf.codeplex.com/nmeta/")]
    [XmlNamespacePrefixAttribute("nmeta")]
    [ModelRepresentationClassAttribute("http://nmf.codeplex.com/nmeta/#//ModelElement/")]
    public abstract class ModelElement : ModelElement, IModelElement, IModelElement
    {
        
        /// <summary>
        /// The backing field for the AbsoluteUri property
        /// </summary>
        private Uri _absoluteUri;
        
        /// <summary>
        /// The backing field for the RelativeUri property
        /// </summary>
        private Uri _relativeUri;
        
        /// <summary>
        /// The backing field for the Extensions property
        /// </summary>
        private ModelElementExtensionsCollection _extensions;
        
        /// <summary>
        /// The backing field for the Parent property
        /// </summary>
        private IModelElement _parent;
        
        /// <summary>
        /// The backing field for the Type property
        /// </summary>
        private IReferenceType _type;
        
        public ModelElement()
        {
            this._extensions = new ModelElementExtensionsCollection(this);
            this._extensions.CollectionChanged += this.ExtensionsCollectionChanged;
        }
        
        /// <summary>
        /// The AbsoluteUri property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Uri AbsoluteUri
        {
            get
            {
                return this._absoluteUri;
            }
            set
            {
                if ((value != this._absoluteUri))
                {
                    this._absoluteUri = value;
                    this.OnAbsoluteUriChanged(EventArgs.Empty);
                    this.OnPropertyChanged("AbsoluteUri");
                }
            }
        }
        
        /// <summary>
        /// The RelativeUri property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Uri RelativeUri
        {
            get
            {
                return this._relativeUri;
            }
            set
            {
                if ((value != this._relativeUri))
                {
                    this._relativeUri = value;
                    this.OnRelativeUriChanged(EventArgs.Empty);
                    this.OnPropertyChanged("RelativeUri");
                }
            }
        }
        
        /// <summary>
        /// The Extensions property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        public virtual ICollectionExpression<IModelElementExtension> Extensions
        {
            get
            {
                return this._extensions;
            }
        }
        
        /// <summary>
        /// The Parent property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IModelElement Parent
        {
            get
            {
                return this._parent;
            }
            set
            {
                if ((this._parent != value))
                {
                    IModelElement old = this._parent;
                    this._parent = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetParent;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetParent;
                    }
                    this.OnPropertyChanged("Parent");
                    this.OnParentChanged(new ValueChangedEventArgs(old, value));
                }
            }
        }
        
        /// <summary>
        /// The Type property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IReferenceType Type
        {
            get
            {
                return this._type;
            }
            set
            {
                if ((this._type != value))
                {
                    IReferenceType old = this._type;
                    this._type = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetType;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetType;
                    }
                    this.OnPropertyChanged("Type");
                    this.OnTypeChanged(new ValueChangedEventArgs(old, value));
                }
            }
        }
        
        /// <summary>
        /// Gets the child model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> Children
        {
            get
            {
                return base.Children.Concat(new ModelElementChildrenCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new ModelElementReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets fired when the AbsoluteUri property changed its value
        /// </summary>
        public event EventHandler AbsoluteUriChanged;
        
        /// <summary>
        /// Gets fired when the RelativeUri property changed its value
        /// </summary>
        public event EventHandler RelativeUriChanged;
        
        /// <summary>
        /// Gets fired when the Parent property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ParentChanged;
        
        /// <summary>
        /// Gets fired when the Type property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> TypeChanged;
        
        /// <summary>
        /// Raises the AbsoluteUriChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAbsoluteUriChanged(EventArgs eventArgs)
        {
            EventHandler handler = this.AbsoluteUriChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the RelativeUriChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRelativeUriChanged(EventArgs eventArgs)
        {
            EventHandler handler = this.RelativeUriChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Forwards change notifications for the Extensions property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ExtensionsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Extensions", e);
        }
        
        /// <summary>
        /// Raises the ParentChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnParentChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ParentChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Parent property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetParent(object sender, EventArgs eventArgs)
        {
            this.Parent = null;
        }
        
        /// <summary>
        /// Raises the TypeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTypeChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.TypeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Type property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetType(object sender, EventArgs eventArgs)
        {
            this.Type = null;
        }
        
        /// <summary>
        /// Gets the Class element that describes the structure of the current model element
        /// </summary>
        public override NMF.Models.Meta.IClass GetClass()
        {
            return NMF.Models.Repository.MetaRepository.Instance.ResolveClass("http://nmf.codeplex.com/nmeta/#//ModelElement/");
        }
        
        /// <summary>
        /// The collection class to to represent the children of the ModelElement class
        /// </summary>
        public class ModelElementChildrenCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private ModelElement _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public ModelElementChildrenCollection(ModelElement parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.Extensions.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.Extensions.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.Extensions.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IModelElementExtension extensionsCasted = item.As<IModelElementExtension>();
                if ((extensionsCasted != null))
                {
                    this._parent.Extensions.Add(extensionsCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Extensions.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.Extensions.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> extensionsEnumerator = this._parent.Extensions.GetEnumerator();
                try
                {
                    for (
                    ; extensionsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = extensionsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    extensionsEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IModelElementExtension modelElementExtensionItem = item.As<IModelElementExtension>();
                if (((modelElementExtensionItem != null) 
                            && this._parent.Extensions.Remove(modelElementExtensionItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Extensions).GetEnumerator();
            }
        }
        
        /// <summary>
        /// The collection class to to represent the children of the ModelElement class
        /// </summary>
        public class ModelElementReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private ModelElement _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public ModelElementReferencedElementsCollection(ModelElement parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.Extensions.Count);
                    if ((this._parent.Parent != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Type != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.Extensions.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.ParentChanged += this.PropagateValueChanges;
                this._parent.TypeChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.Extensions.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.ParentChanged -= this.PropagateValueChanges;
                this._parent.TypeChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IModelElementExtension extensionsCasted = item.As<IModelElementExtension>();
                if ((extensionsCasted != null))
                {
                    this._parent.Extensions.Add(extensionsCasted);
                }
                if ((this._parent.Parent == null))
                {
                    IModelElement parentCasted = item.As<IModelElement>();
                    if ((parentCasted != null))
                    {
                        this._parent.Parent = parentCasted;
                        return;
                    }
                }
                if ((this._parent.Type == null))
                {
                    IReferenceType typeCasted = item.As<IReferenceType>();
                    if ((typeCasted != null))
                    {
                        this._parent.Type = typeCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Extensions.Clear();
                this._parent.Parent = null;
                this._parent.Type = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.Extensions.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.Parent))
                {
                    return true;
                }
                if ((item == this._parent.Type))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> extensionsEnumerator = this._parent.Extensions.GetEnumerator();
                try
                {
                    for (
                    ; extensionsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = extensionsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    extensionsEnumerator.Dispose();
                }
                if ((this._parent.Parent != null))
                {
                    array[arrayIndex] = this._parent.Parent;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Type != null))
                {
                    array[arrayIndex] = this._parent.Type;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IModelElementExtension modelElementExtensionItem = item.As<IModelElementExtension>();
                if (((modelElementExtensionItem != null) 
                            && this._parent.Extensions.Remove(modelElementExtensionItem)))
                {
                    return true;
                }
                if ((this._parent.Parent == item))
                {
                    this._parent.Parent = null;
                    return true;
                }
                if ((this._parent.Type == item))
                {
                    this._parent.Type = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Extensions).Concat(this._parent.Parent).Concat(this._parent.Type).GetEnumerator();
            }
        }
    }
}

