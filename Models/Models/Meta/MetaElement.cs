//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;

namespace NMF.Models.Meta
{
    
    
    /// <summary>
    /// The representation of the MetaElement class
    /// </summary>
    [XmlIdentifierAttribute("Name")]
    [XmlNamespaceAttribute("http://nmf.codeplex.com/nmeta/")]
    [XmlNamespacePrefixAttribute("nmeta")]
    [ModelRepresentationClassAttribute("http://nmf.codeplex.com/nmeta/#//MetaElement/")]
    [DebuggerDisplayAttribute("MetaElement {Name}")]
    public abstract class MetaElement : ModelElement, IMetaElement, IModelElement
    {
        
        /// <summary>
        /// The backing field for the Name property
        /// </summary>
        private string _name;
        
        /// <summary>
        /// The backing field for the Summary property
        /// </summary>
        private string _summary;
        
        /// <summary>
        /// The backing field for the Remarks property
        /// </summary>
        private string _remarks;
        
        /// <summary>
        /// The Name property
        /// </summary>
        [IdAttribute()]
        [XmlAttributeAttribute(true)]
        public virtual string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((value != this._name))
                {
                    this._name = value;
                    this.OnNameChanged(EventArgs.Empty);
                    this.OnPropertyChanged("Name");
                }
            }
        }
        
        /// <summary>
        /// The Summary property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual string Summary
        {
            get
            {
                return this._summary;
            }
            set
            {
                if ((value != this._summary))
                {
                    this._summary = value;
                    this.OnSummaryChanged(EventArgs.Empty);
                    this.OnPropertyChanged("Summary");
                }
            }
        }
        
        /// <summary>
        /// The Remarks property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual string Remarks
        {
            get
            {
                return this._remarks;
            }
            set
            {
                if ((value != this._remarks))
                {
                    this._remarks = value;
                    this.OnRemarksChanged(EventArgs.Empty);
                    this.OnPropertyChanged("Remarks");
                }
            }
        }
        
        /// <summary>
        /// Gets a value indicating whether the current model element can be identified by an attribute value
        /// </summary>
        public override bool IsIdentified
        {
            get
            {
                return true;
            }
        }
        
        /// <summary>
        /// Gets fired when the Name property changed its value
        /// </summary>
        public event EventHandler NameChanged;
        
        /// <summary>
        /// Gets fired when the Summary property changed its value
        /// </summary>
        public event EventHandler SummaryChanged;
        
        /// <summary>
        /// Gets fired when the Remarks property changed its value
        /// </summary>
        public event EventHandler RemarksChanged;
        
        /// <summary>
        /// Raises the NameChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnNameChanged(EventArgs eventArgs)
        {
            EventHandler handler = this.NameChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the SummaryChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSummaryChanged(EventArgs eventArgs)
        {
            EventHandler handler = this.SummaryChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the RemarksChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRemarksChanged(EventArgs eventArgs)
        {
            EventHandler handler = this.RemarksChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Gets the Class element that describes the structure of the current model element
        /// </summary>
        public override NMF.Models.Meta.IClass GetClass()
        {
            return NMF.Models.Repository.MetaRepository.Instance.ResolveClass("http://nmf.codeplex.com/nmeta/#//MetaElement/");
        }
        
        /// <summary>
        /// Gets the identifier string for this model element
        /// </summary>
        /// <returns>The identifier string</returns>
        public override string ToIdentifierString()
        {
            return this.Name.ToString();
        }
    }
}

