//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;

namespace NMF.Models.Meta
{
    
    
    /// <summary>
    /// The representation of the TypedElement class
    /// </summary>
    [XmlNamespaceAttribute("http://nmf.codeplex.com/nmeta/")]
    [XmlNamespacePrefixAttribute("nmeta")]
    [ModelRepresentationClassAttribute("http://nmf.codeplex.com/nmeta/#//TypedElement/")]
    [DebuggerDisplayAttribute("TypedElement {Name}")]
    public abstract class TypedElement : MetaElement, ITypedElement, IModelElement
    {
        
        /// <summary>
        /// The backing field for the IsOrdered property
        /// </summary>
        private bool _isOrdered;
        
        /// <summary>
        /// The backing field for the IsUnique property
        /// </summary>
        private bool _isUnique;
        
        /// <summary>
        /// The backing field for the LowerBound property
        /// </summary>
        private int _lowerBound = 0;
        
        /// <summary>
        /// The backing field for the UpperBound property
        /// </summary>
        private int _upperBound = 1;
        
        /// <summary>
        /// The backing field for the Type property
        /// </summary>
        private IType _type;
        
        /// <summary>
        /// The IsOrdered property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual bool IsOrdered
        {
            get
            {
                return this._isOrdered;
            }
            set
            {
                if ((value != this._isOrdered))
                {
                    this._isOrdered = value;
                    this.OnIsOrderedChanged(EventArgs.Empty);
                    this.OnPropertyChanged("IsOrdered");
                }
            }
        }
        
        /// <summary>
        /// The IsUnique property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual bool IsUnique
        {
            get
            {
                return this._isUnique;
            }
            set
            {
                if ((value != this._isUnique))
                {
                    this._isUnique = value;
                    this.OnIsUniqueChanged(EventArgs.Empty);
                    this.OnPropertyChanged("IsUnique");
                }
            }
        }
        
        /// <summary>
        /// The LowerBound property
        /// </summary>
        [DefaultValueAttribute(0)]
        [XmlAttributeAttribute(true)]
        public virtual int LowerBound
        {
            get
            {
                return this._lowerBound;
            }
            set
            {
                if ((value != this._lowerBound))
                {
                    this._lowerBound = value;
                    this.OnLowerBoundChanged(EventArgs.Empty);
                    this.OnPropertyChanged("LowerBound");
                }
            }
        }
        
        /// <summary>
        /// The UpperBound property
        /// </summary>
        [DefaultValueAttribute(1)]
        [XmlAttributeAttribute(true)]
        public virtual int UpperBound
        {
            get
            {
                return this._upperBound;
            }
            set
            {
                if ((value != this._upperBound))
                {
                    this._upperBound = value;
                    this.OnUpperBoundChanged(EventArgs.Empty);
                    this.OnPropertyChanged("UpperBound");
                }
            }
        }
        
        /// <summary>
        /// The Type property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IType Type
        {
            get
            {
                return this._type;
            }
            set
            {
                if ((this._type != value))
                {
                    IType old = this._type;
                    this._type = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetType;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetType;
                    }
                    this.OnPropertyChanged("Type");
                    this.OnTypeChanged(new ValueChangedEventArgs(old, value));
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new TypedElementReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets fired when the IsOrdered property changed its value
        /// </summary>
        public event EventHandler IsOrderedChanged;
        
        /// <summary>
        /// Gets fired when the IsUnique property changed its value
        /// </summary>
        public event EventHandler IsUniqueChanged;
        
        /// <summary>
        /// Gets fired when the LowerBound property changed its value
        /// </summary>
        public event EventHandler LowerBoundChanged;
        
        /// <summary>
        /// Gets fired when the UpperBound property changed its value
        /// </summary>
        public event EventHandler UpperBoundChanged;
        
        /// <summary>
        /// Gets fired when the Type property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> TypeChanged;
        
        /// <summary>
        /// Raises the IsOrderedChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnIsOrderedChanged(EventArgs eventArgs)
        {
            EventHandler handler = this.IsOrderedChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the IsUniqueChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnIsUniqueChanged(EventArgs eventArgs)
        {
            EventHandler handler = this.IsUniqueChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the LowerBoundChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLowerBoundChanged(EventArgs eventArgs)
        {
            EventHandler handler = this.LowerBoundChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the UpperBoundChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnUpperBoundChanged(EventArgs eventArgs)
        {
            EventHandler handler = this.UpperBoundChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the TypeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTypeChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.TypeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Type property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetType(object sender, EventArgs eventArgs)
        {
            this.Type = null;
        }
        
        /// <summary>
        /// Gets the Class element that describes the structure of the current model element
        /// </summary>
        public override NMF.Models.Meta.IClass GetClass()
        {
            return NMF.Models.Repository.MetaRepository.Instance.ResolveClass("http://nmf.codeplex.com/nmeta/#//TypedElement/");
        }
        
        /// <summary>
        /// The collection class to to represent the children of the TypedElement class
        /// </summary>
        public class TypedElementReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private TypedElement _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public TypedElementReferencedElementsCollection(TypedElement parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.Type != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.TypeChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.TypeChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.Type == null))
                {
                    IType typeCasted = item.As<IType>();
                    if ((typeCasted != null))
                    {
                        this._parent.Type = typeCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Type = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.Type))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.Type != null))
                {
                    array[arrayIndex] = this._parent.Type;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.Type == item))
                {
                    this._parent.Type = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Type).GetEnumerator();
            }
        }
    }
}

