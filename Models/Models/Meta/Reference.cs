//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;

namespace NMF.Models.Meta
{
    
    
    /// <summary>
    /// The representation of the Reference class
    /// </summary>
    [XmlNamespaceAttribute("http://nmf.codeplex.com/nmeta/")]
    [XmlNamespacePrefixAttribute("nmeta")]
    [ModelRepresentationClassAttribute("http://nmf.codeplex.com/nmeta/#//Reference/")]
    [DebuggerDisplayAttribute("Reference {Name}")]
    public class Reference : MetaElement, IReference, IModelElement
    {
        
        /// <summary>
        /// The backing field for the IsContainment property
        /// </summary>
        private bool _isContainment;
        
        /// <summary>
        /// The backing field for the Opposite property
        /// </summary>
        private IReference _opposite;
        
        /// <summary>
        /// The backing field for the ReferenceType property
        /// </summary>
        private IReferenceType _referenceType;
        
        /// <summary>
        /// The backing field for the Refines property
        /// </summary>
        private IReference _refines;
        
        /// <summary>
        /// The backing field for the IsOrdered property
        /// </summary>
        private bool _isOrdered;
        
        /// <summary>
        /// The backing field for the IsUnique property
        /// </summary>
        private bool _isUnique;
        
        /// <summary>
        /// The backing field for the LowerBound property
        /// </summary>
        private int _lowerBound = 0;
        
        /// <summary>
        /// The backing field for the UpperBound property
        /// </summary>
        private int _upperBound = 1;
        
        event EventHandler<ValueChangedEventArgs> ITypedElement.TypeChanged
        {
            add
            {
                this.ReferenceTypeChanged += value;
            }
            remove
            {
                this.ReferenceTypeChanged -= value;
            }
        }
        
        /// <summary>
        /// The IsContainment property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual bool IsContainment
        {
            get
            {
                return this._isContainment;
            }
            set
            {
                if ((value != this._isContainment))
                {
                    this._isContainment = value;
                    this.OnIsContainmentChanged(EventArgs.Empty);
                    this.OnPropertyChanged("IsContainment");
                }
            }
        }
        
        /// <summary>
        /// The DeclaringType property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Hidden)]
        [XmlAttributeAttribute(true)]
        public virtual IReferenceType DeclaringType
        {
            get
            {
                return ModelHelper.CastAs<IReferenceType>(this.Parent);
            }
            set
            {
                this.Parent = value;
            }
        }
        
        /// <summary>
        /// The Opposite property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IReference Opposite
        {
            get
            {
                return this._opposite;
            }
            set
            {
                if ((this._opposite != value))
                {
                    IReference old = this._opposite;
                    this._opposite = value;
                    if ((old != null))
                    {
                        old.Opposite = null;
                        old.Deleted -= this.OnResetOpposite;
                    }
                    if ((value != null))
                    {
                        value.Opposite = this;
                        value.Deleted += this.OnResetOpposite;
                    }
                    this.OnPropertyChanged("Opposite");
                    this.OnOppositeChanged(new ValueChangedEventArgs(old, value));
                }
            }
        }
        
        /// <summary>
        /// The ReferenceType property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IReferenceType ReferenceType
        {
            get
            {
                return this._referenceType;
            }
            set
            {
                if ((this._referenceType != value))
                {
                    IReferenceType old = this._referenceType;
                    this._referenceType = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetReferenceType;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetReferenceType;
                    }
                    this.OnPropertyChanged("ReferenceType");
                    this.OnReferenceTypeChanged(new ValueChangedEventArgs(old, value));
                }
            }
        }
        
        /// <summary>
        /// The Refines property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IReference Refines
        {
            get
            {
                return this._refines;
            }
            set
            {
                if ((this._refines != value))
                {
                    IReference old = this._refines;
                    this._refines = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetRefines;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetRefines;
                    }
                    this.OnPropertyChanged("Refines");
                    this.OnRefinesChanged(new ValueChangedEventArgs(old, value));
                }
            }
        }
        
        IType ITypedElement.Type
        {
            get
            {
                IReference _this = this;
                if ((_this.ReferenceType != null))
                {
                    return _this.ReferenceType;
                }
                return null;
            }
            set
            {
                IReference _this = this;
                if ((value != null))
                {
                    IReferenceType @__ReferenceType = value.As<IReferenceType>();
                    if ((@__ReferenceType != null))
                    {
                        _this.ReferenceType = @__ReferenceType;
                        return;
                    }
                }
                else
                {
                    _this.ReferenceType = null;
                    return;
                }
                throw new System.ArgumentException("There was no suitable refining reference found for this object");
            }
        }
        
        /// <summary>
        /// The IsOrdered property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual bool IsOrdered
        {
            get
            {
                return this._isOrdered;
            }
            set
            {
                if ((value != this._isOrdered))
                {
                    this._isOrdered = value;
                    this.OnIsOrderedChanged(EventArgs.Empty);
                    this.OnPropertyChanged("IsOrdered");
                }
            }
        }
        
        /// <summary>
        /// The IsUnique property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual bool IsUnique
        {
            get
            {
                return this._isUnique;
            }
            set
            {
                if ((value != this._isUnique))
                {
                    this._isUnique = value;
                    this.OnIsUniqueChanged(EventArgs.Empty);
                    this.OnPropertyChanged("IsUnique");
                }
            }
        }
        
        /// <summary>
        /// The LowerBound property
        /// </summary>
        [DefaultValueAttribute(0)]
        [XmlAttributeAttribute(true)]
        public virtual int LowerBound
        {
            get
            {
                return this._lowerBound;
            }
            set
            {
                if ((value != this._lowerBound))
                {
                    this._lowerBound = value;
                    this.OnLowerBoundChanged(EventArgs.Empty);
                    this.OnPropertyChanged("LowerBound");
                }
            }
        }
        
        /// <summary>
        /// The UpperBound property
        /// </summary>
        [DefaultValueAttribute(1)]
        [XmlAttributeAttribute(true)]
        public virtual int UpperBound
        {
            get
            {
                return this._upperBound;
            }
            set
            {
                if ((value != this._upperBound))
                {
                    this._upperBound = value;
                    this.OnUpperBoundChanged(EventArgs.Empty);
                    this.OnPropertyChanged("UpperBound");
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new ReferenceReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets fired when the IsContainment property changed its value
        /// </summary>
        public event EventHandler IsContainmentChanged;
        
        /// <summary>
        /// Gets fired when the DeclaringType property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> DeclaringTypeChanged;
        
        /// <summary>
        /// Gets fired when the Opposite property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> OppositeChanged;
        
        /// <summary>
        /// Gets fired when the ReferenceType property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ReferenceTypeChanged;
        
        /// <summary>
        /// Gets fired when the Refines property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> RefinesChanged;
        
        /// <summary>
        /// Gets fired when the IsOrdered property changed its value
        /// </summary>
        public event EventHandler IsOrderedChanged;
        
        /// <summary>
        /// Gets fired when the IsUnique property changed its value
        /// </summary>
        public event EventHandler IsUniqueChanged;
        
        /// <summary>
        /// Gets fired when the LowerBound property changed its value
        /// </summary>
        public event EventHandler LowerBoundChanged;
        
        /// <summary>
        /// Gets fired when the UpperBound property changed its value
        /// </summary>
        public event EventHandler UpperBoundChanged;
        
        /// <summary>
        /// Raises the IsContainmentChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnIsContainmentChanged(EventArgs eventArgs)
        {
            EventHandler handler = this.IsContainmentChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the DeclaringTypeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDeclaringTypeChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.DeclaringTypeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Gets called when the parent model element of the current model element changes
        /// </summary>
        /// <param name="oldParent">The old parent model element</param>
        /// <param name="newParent">The new parent model element</param>
        protected override void OnParentChanged(IModelElement newParent, IModelElement oldParent)
        {
            IReferenceType oldDeclaringType = ModelHelper.CastAs<IReferenceType>(oldParent);
            IReferenceType newDeclaringType = ModelHelper.CastAs<IReferenceType>(newParent);
            if ((oldDeclaringType != null))
            {
                oldDeclaringType.References.Remove(this);
            }
            if ((newDeclaringType != null))
            {
                newDeclaringType.References.Add(this);
            }
            this.OnPropertyChanged("DeclaringType");
            this.OnDeclaringTypeChanged(new ValueChangedEventArgs(oldDeclaringType, newDeclaringType));
        }
        
        /// <summary>
        /// Raises the OppositeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOppositeChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.OppositeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Opposite property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetOpposite(object sender, EventArgs eventArgs)
        {
            this.Opposite = null;
        }
        
        /// <summary>
        /// Raises the ReferenceTypeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReferenceTypeChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ReferenceTypeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the ReferenceType property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetReferenceType(object sender, EventArgs eventArgs)
        {
            this.ReferenceType = null;
        }
        
        /// <summary>
        /// Raises the RefinesChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRefinesChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.RefinesChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Refines property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetRefines(object sender, EventArgs eventArgs)
        {
            this.Refines = null;
        }
        
        /// <summary>
        /// Raises the IsOrderedChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnIsOrderedChanged(EventArgs eventArgs)
        {
            EventHandler handler = this.IsOrderedChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the IsUniqueChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnIsUniqueChanged(EventArgs eventArgs)
        {
            EventHandler handler = this.IsUniqueChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the LowerBoundChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLowerBoundChanged(EventArgs eventArgs)
        {
            EventHandler handler = this.LowerBoundChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the UpperBoundChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnUpperBoundChanged(EventArgs eventArgs)
        {
            EventHandler handler = this.UpperBoundChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Gets the Class element that describes the structure of the current model element
        /// </summary>
        public override NMF.Models.Meta.IClass GetClass()
        {
            return NMF.Models.Repository.MetaRepository.Instance.ResolveClass("http://nmf.codeplex.com/nmeta/#//Reference/");
        }
        
        /// <summary>
        /// The collection class to to represent the children of the Reference class
        /// </summary>
        public class ReferenceReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private Reference _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public ReferenceReferencedElementsCollection(Reference parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.DeclaringType != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Opposite != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.ReferenceType != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Refines != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.DeclaringTypeChanged += this.PropagateValueChanges;
                this._parent.OppositeChanged += this.PropagateValueChanges;
                this._parent.ReferenceTypeChanged += this.PropagateValueChanges;
                this._parent.RefinesChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.DeclaringTypeChanged -= this.PropagateValueChanges;
                this._parent.OppositeChanged -= this.PropagateValueChanges;
                this._parent.ReferenceTypeChanged -= this.PropagateValueChanges;
                this._parent.RefinesChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.DeclaringType == null))
                {
                    IReferenceType declaringTypeCasted = item.As<IReferenceType>();
                    if ((declaringTypeCasted != null))
                    {
                        this._parent.DeclaringType = declaringTypeCasted;
                        return;
                    }
                }
                if ((this._parent.Opposite == null))
                {
                    IReference oppositeCasted = item.As<IReference>();
                    if ((oppositeCasted != null))
                    {
                        this._parent.Opposite = oppositeCasted;
                        return;
                    }
                }
                if ((this._parent.ReferenceType == null))
                {
                    IReferenceType referenceTypeCasted = item.As<IReferenceType>();
                    if ((referenceTypeCasted != null))
                    {
                        this._parent.ReferenceType = referenceTypeCasted;
                        return;
                    }
                }
                if ((this._parent.Refines == null))
                {
                    IReference refinesCasted = item.As<IReference>();
                    if ((refinesCasted != null))
                    {
                        this._parent.Refines = refinesCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.DeclaringType = null;
                this._parent.Opposite = null;
                this._parent.ReferenceType = null;
                this._parent.Refines = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.DeclaringType))
                {
                    return true;
                }
                if ((item == this._parent.Opposite))
                {
                    return true;
                }
                if ((item == this._parent.ReferenceType))
                {
                    return true;
                }
                if ((item == this._parent.Refines))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.DeclaringType != null))
                {
                    array[arrayIndex] = this._parent.DeclaringType;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Opposite != null))
                {
                    array[arrayIndex] = this._parent.Opposite;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.ReferenceType != null))
                {
                    array[arrayIndex] = this._parent.ReferenceType;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Refines != null))
                {
                    array[arrayIndex] = this._parent.Refines;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.DeclaringType == item))
                {
                    this._parent.DeclaringType = null;
                    return true;
                }
                if ((this._parent.Opposite == item))
                {
                    this._parent.Opposite = null;
                    return true;
                }
                if ((this._parent.ReferenceType == item))
                {
                    this._parent.ReferenceType = null;
                    return true;
                }
                if ((this._parent.Refines == item))
                {
                    this._parent.Refines = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.DeclaringType).Concat(this._parent.Opposite).Concat(this._parent.ReferenceType).Concat(this._parent.Refines).GetEnumerator();
            }
        }
    }
}

