//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;

namespace NMF.Models.Tests.Architecture
{
    
    
    /// <summary>
    /// The public interface for Class
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(Class))]
    [XmlDefaultImplementationTypeAttribute(typeof(Class))]
    public interface IClass : IModelElement, INamedElement
    {
        
        /// <summary>
        /// The encapsulates property
        /// </summary>
        [LowerBoundAttribute(1)]
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlElementNameAttribute("encapsulates")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [XmlOppositeAttribute("isEncapsulatedBy")]
        [ConstantAttribute()]
        IListExpression<IFeature> Encapsulates
        {
            get;
        }
        
        /// <summary>
        /// The baseType property
        /// </summary>
        [XmlElementNameAttribute("baseType")]
        [XmlAttributeAttribute(true)]
        NMF.Models.Tests.Architecture.IClass BaseType
        {
            get;
            set;
        }
        
        /// <summary>
        /// Gets fired before the operation pullUpFeature gets called
        /// </summary>
        event System.EventHandler<OperationCallEventArgs> PullUpFeatureCalling;
        
        /// <summary>
        /// Gets fired after the operation pullUpFeature got called
        /// </summary>
        event System.EventHandler<OperationCallEventArgs> PullUpFeatureCalled;
        
        /// <summary>
        /// Gets fired before the BaseType property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> BaseTypeChanging;
        
        /// <summary>
        /// Gets fired when the BaseType property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> BaseTypeChanged;
        
        /// <summary>
        /// 
        /// </summary>
        /// <param name="methodName"></param>
        void PullUpFeature(string methodName);
    }
}

