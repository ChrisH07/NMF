//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;

namespace NMF.Models.Tests.Architecture
{
    
    
    /// <summary>
    /// The default implementation of the Feature class
    /// </summary>
    [XmlNamespaceAttribute("test:architecture")]
    [XmlNamespacePrefixAttribute("")]
    [ModelRepresentationClassAttribute("test:architecture#//Feature")]
    [DebuggerDisplayAttribute("Feature {Name}")]
    public abstract partial class Feature : NamedElement, IFeature, IModelElement
    {
        
        private static Lazy<ITypedElement> _isEncapsulatedByReference = new Lazy<ITypedElement>(RetrieveIsEncapsulatedByReference);
        
        private static NMF.Models.Meta.IClass _classInstance;
        
        /// <summary>
        /// The isEncapsulatedBy property
        /// </summary>
        [XmlElementNameAttribute("isEncapsulatedBy")]
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Hidden)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("encapsulates")]
        public NMF.Models.Tests.Architecture.IClass IsEncapsulatedBy
        {
            get
            {
                return ModelHelper.CastAs<NMF.Models.Tests.Architecture.IClass>(this.Parent);
            }
            set
            {
                this.Parent = value;
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new FeatureReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static NMF.Models.Meta.IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("test:architecture#//Feature")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the IsEncapsulatedBy property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> IsEncapsulatedByChanging;
        
        /// <summary>
        /// Gets fired when the IsEncapsulatedBy property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> IsEncapsulatedByChanged;
        
        private static ITypedElement RetrieveIsEncapsulatedByReference()
        {
            return ((ITypedElement)(((ModelElement)(Feature.ClassInstance)).Resolve("isEncapsulatedBy")));
        }
        
        /// <summary>
        /// Raises the IsEncapsulatedByChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnIsEncapsulatedByChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.IsEncapsulatedByChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Gets called when the parent model element of the current model element is about to change
        /// </summary>
        /// <param name="oldParent">The old parent model element</param>
        /// <param name="newParent">The new parent model element</param>
        protected override void OnParentChanging(IModelElement newParent, IModelElement oldParent)
        {
            NMF.Models.Tests.Architecture.IClass oldIsEncapsulatedBy = ModelHelper.CastAs<NMF.Models.Tests.Architecture.IClass>(oldParent);
            NMF.Models.Tests.Architecture.IClass newIsEncapsulatedBy = ModelHelper.CastAs<NMF.Models.Tests.Architecture.IClass>(newParent);
            ValueChangedEventArgs e = new ValueChangedEventArgs(oldIsEncapsulatedBy, newIsEncapsulatedBy);
            this.OnIsEncapsulatedByChanging(e);
            this.OnPropertyChanging("IsEncapsulatedBy", e, _isEncapsulatedByReference);
        }
        
        /// <summary>
        /// Raises the IsEncapsulatedByChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnIsEncapsulatedByChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.IsEncapsulatedByChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Gets called when the parent model element of the current model element changes
        /// </summary>
        /// <param name="oldParent">The old parent model element</param>
        /// <param name="newParent">The new parent model element</param>
        protected override void OnParentChanged(IModelElement newParent, IModelElement oldParent)
        {
            NMF.Models.Tests.Architecture.IClass oldIsEncapsulatedBy = ModelHelper.CastAs<NMF.Models.Tests.Architecture.IClass>(oldParent);
            NMF.Models.Tests.Architecture.IClass newIsEncapsulatedBy = ModelHelper.CastAs<NMF.Models.Tests.Architecture.IClass>(newParent);
            if ((oldIsEncapsulatedBy != null))
            {
                oldIsEncapsulatedBy.Encapsulates.Remove(this);
            }
            if ((newIsEncapsulatedBy != null))
            {
                newIsEncapsulatedBy.Encapsulates.Add(this);
            }
            ValueChangedEventArgs e = new ValueChangedEventArgs(oldIsEncapsulatedBy, newIsEncapsulatedBy);
            this.OnIsEncapsulatedByChanged(e);
            this.OnPropertyChanged("IsEncapsulatedBy", e, _isEncapsulatedByReference);
            base.OnParentChanged(newParent, oldParent);
        }
        
        /// <summary>
        /// Resolves the given URI to a child model element
        /// </summary>
        /// <returns>The model element or null if it could not be found</returns>
        /// <param name="reference">The requested reference name</param>
        /// <param name="index">The index of this reference</param>
        protected override IModelElement GetModelElementForReference(string reference, int index)
        {
            if ((reference == "ISENCAPSULATEDBY"))
            {
                return this.IsEncapsulatedBy;
            }
            return base.GetModelElementForReference(reference, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "ISENCAPSULATEDBY"))
            {
                this.IsEncapsulatedBy = ((NMF.Models.Tests.Architecture.IClass)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "ISENCAPSULATEDBY"))
            {
                return new IsEncapsulatedByProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override NMF.Models.Meta.IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((NMF.Models.Meta.IClass)(MetaRepository.Instance.Resolve("test:architecture#//Feature")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the Feature class
        /// </summary>
        public class FeatureReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private Feature _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public FeatureReferencedElementsCollection(Feature parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.IsEncapsulatedBy != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.IsEncapsulatedByChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.IsEncapsulatedByChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.IsEncapsulatedBy == null))
                {
                    NMF.Models.Tests.Architecture.IClass isEncapsulatedByCasted = item.As<NMF.Models.Tests.Architecture.IClass>();
                    if ((isEncapsulatedByCasted != null))
                    {
                        this._parent.IsEncapsulatedBy = isEncapsulatedByCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.IsEncapsulatedBy = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.IsEncapsulatedBy))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.IsEncapsulatedBy != null))
                {
                    array[arrayIndex] = this._parent.IsEncapsulatedBy;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.IsEncapsulatedBy == item))
                {
                    this._parent.IsEncapsulatedBy = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.IsEncapsulatedBy).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the isEncapsulatedBy property
        /// </summary>
        private sealed class IsEncapsulatedByProxy : ModelPropertyChange<IFeature, NMF.Models.Tests.Architecture.IClass>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public IsEncapsulatedByProxy(IFeature modelElement) : 
                    base(modelElement, "isEncapsulatedBy")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override NMF.Models.Tests.Architecture.IClass Value
            {
                get
                {
                    return this.ModelElement.IsEncapsulatedBy;
                }
                set
                {
                    this.ModelElement.IsEncapsulatedBy = value;
                }
            }
        }
    }
}

