//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;

namespace NMF.Expressions.Tests.SocialNetwork
{
    
    
    /// <summary>
    /// The default implementation of the Post class
    /// </summary>
    [XmlNamespaceAttribute("https://gitlab.upseil.com/lennart/streaming-model-analysis/debs2016/social-networ" +
        "k")]
    [XmlNamespacePrefixAttribute("social_network")]
    [ModelRepresentationClassAttribute("https://gitlab.upseil.com/lennart/streaming-model-analysis/debs2016/social-networ" +
        "k#//Post")]
    [DebuggerDisplayAttribute("Post {Id}")]
    public partial class Post : Submission, IPost, IModelElement
    {
        
        /// <summary>
        /// The backing field for the Active property
        /// </summary>
        private bool _active = true;
        
        private static Lazy<ITypedElement> _activeAttribute = new Lazy<ITypedElement>(RetrieveActiveAttribute);
        
        /// <summary>
        /// The backing field for the LastCommented property
        /// </summary>
        private DateTime _lastCommented;
        
        private static Lazy<ITypedElement> _lastCommentedAttribute = new Lazy<ITypedElement>(RetrieveLastCommentedAttribute);
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The active property
        /// </summary>
        [DefaultValueAttribute(true)]
        [XmlElementNameAttribute("active")]
        [XmlAttributeAttribute(true)]
        public bool Active
        {
            get
            {
                return this._active;
            }
            set
            {
                if ((this._active != value))
                {
                    bool old = this._active;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnActiveChanging(e);
                    this.OnPropertyChanging("Active", e, _activeAttribute);
                    this._active = value;
                    this.OnActiveChanged(e);
                    this.OnPropertyChanged("Active", e, _activeAttribute);
                }
            }
        }
        
        /// <summary>
        /// The lastCommented property
        /// </summary>
        [TypeConverterAttribute(typeof(IsoDateTimeConverter))]
        [XmlElementNameAttribute("lastCommented")]
        [XmlAttributeAttribute(true)]
        public DateTime LastCommented
        {
            get
            {
                return this._lastCommented;
            }
            set
            {
                if ((this._lastCommented != value))
                {
                    DateTime old = this._lastCommented;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnLastCommentedChanging(e);
                    this.OnPropertyChanging("LastCommented", e, _lastCommentedAttribute);
                    this._lastCommented = value;
                    this.OnLastCommentedChanged(e);
                    this.OnPropertyChanged("LastCommented", e, _lastCommentedAttribute);
                }
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("https://gitlab.upseil.com/lennart/streaming-model-analysis/debs2016/social-networ" +
                            "k#//Post")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the Active property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ActiveChanging;
        
        /// <summary>
        /// Gets fired when the Active property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ActiveChanged;
        
        /// <summary>
        /// Gets fired before the LastCommented property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LastCommentedChanging;
        
        /// <summary>
        /// Gets fired when the LastCommented property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LastCommentedChanged;
        
        private static ITypedElement RetrieveActiveAttribute()
        {
            return ((ITypedElement)(((ModelElement)(Post.ClassInstance)).Resolve("active")));
        }
        
        /// <summary>
        /// Raises the ActiveChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnActiveChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ActiveChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ActiveChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnActiveChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ActiveChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveLastCommentedAttribute()
        {
            return ((ITypedElement)(((ModelElement)(Post.ClassInstance)).Resolve("lastCommented")));
        }
        
        /// <summary>
        /// Raises the LastCommentedChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLastCommentedChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LastCommentedChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the LastCommentedChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLastCommentedChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LastCommentedChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "ACTIVE"))
            {
                return this.Active;
            }
            if ((attribute == "LASTCOMMENTED"))
            {
                return this.LastCommented;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "ACTIVE"))
            {
                this.Active = ((bool)(value));
                return;
            }
            if ((feature == "LASTCOMMENTED"))
            {
                this.LastCommented = ((System.DateTime)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "ACTIVE"))
            {
                return Observable.Box(new ActiveProxy(this));
            }
            if ((attribute == "LASTCOMMENTED"))
            {
                return Observable.Box(new LastCommentedProxy(this));
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("https://gitlab.upseil.com/lennart/streaming-model-analysis/debs2016/social-networ" +
                        "k#//Post")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the active property
        /// </summary>
        private sealed class ActiveProxy : ModelPropertyChange<IPost, bool>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ActiveProxy(IPost modelElement) : 
                    base(modelElement, "active")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override bool Value
            {
                get
                {
                    return this.ModelElement.Active;
                }
                set
                {
                    this.ModelElement.Active = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the lastCommented property
        /// </summary>
        private sealed class LastCommentedProxy : ModelPropertyChange<IPost, System.DateTime>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public LastCommentedProxy(IPost modelElement) : 
                    base(modelElement, "lastCommented")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override System.DateTime Value
            {
                get
                {
                    return this.ModelElement.LastCommented;
                }
                set
                {
                    this.ModelElement.LastCommented = value;
                }
            }
        }
    }
}

