//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMFExamples.Pcm.Core.Composition;
using NMFExamples.Pcm.Core.Entity;
using NMFExamples.Pcm.Resourceenvironment;
using NMFExamples.Pcm.System;
using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using global::System.Collections;
using global::System.Collections.Generic;
using global::System.Collections.ObjectModel;
using global::System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;

namespace NMFExamples.Pcm.Allocation
{
    
    
    /// <summary>
    /// The default implementation of the AllocationContext class
    /// </summary>
    [XmlNamespaceAttribute("http://sdq.ipd.uka.de/PalladioComponentModel/Allocation/5.0")]
    [XmlNamespacePrefixAttribute("allocation")]
    [ModelRepresentationClassAttribute("http://sdq.ipd.uka.de/PalladioComponentModel/5.0#//allocation/AllocationContext")]
    [DebuggerDisplayAttribute("AllocationContext {Id}")]
    public partial class AllocationContext : NMFExamples.Pcm.Core.Entity.Entity, IAllocationContext, IModelElement
    {
        
        private static Lazy<ITypedElement> _resourceContainer_AllocationContextReference = new Lazy<ITypedElement>(RetrieveResourceContainer_AllocationContextReference);
        
        /// <summary>
        /// The backing field for the ResourceContainer_AllocationContext property
        /// </summary>
        private IResourceContainer _resourceContainer_AllocationContext;
        
        private static Lazy<ITypedElement> _assemblyContext_AllocationContextReference = new Lazy<ITypedElement>(RetrieveAssemblyContext_AllocationContextReference);
        
        /// <summary>
        /// The backing field for the AssemblyContext_AllocationContext property
        /// </summary>
        private IAssemblyContext _assemblyContext_AllocationContext;
        
        private static Lazy<ITypedElement> _allocation_AllocationContextReference = new Lazy<ITypedElement>(RetrieveAllocation_AllocationContextReference);
        
        private static Lazy<ITypedElement> _eventChannel__AllocationContextReference = new Lazy<ITypedElement>(RetrieveEventChannel__AllocationContextReference);
        
        /// <summary>
        /// The backing field for the EventChannel__AllocationContext property
        /// </summary>
        private IEventChannel _eventChannel__AllocationContext;
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The resourceContainer_AllocationContext property
        /// </summary>
        [XmlElementNameAttribute("resourceContainer_AllocationContext")]
        [XmlAttributeAttribute(true)]
        public IResourceContainer ResourceContainer_AllocationContext
        {
            get
            {
                return this._resourceContainer_AllocationContext;
            }
            set
            {
                if ((this._resourceContainer_AllocationContext != value))
                {
                    IResourceContainer old = this._resourceContainer_AllocationContext;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnResourceContainer_AllocationContextChanging(e);
                    this.OnPropertyChanging("ResourceContainer_AllocationContext", e, _resourceContainer_AllocationContextReference);
                    this._resourceContainer_AllocationContext = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetResourceContainer_AllocationContext;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetResourceContainer_AllocationContext;
                    }
                    this.OnResourceContainer_AllocationContextChanged(e);
                    this.OnPropertyChanged("ResourceContainer_AllocationContext", e, _resourceContainer_AllocationContextReference);
                }
            }
        }
        
        /// <summary>
        /// The assemblyContext_AllocationContext property
        /// </summary>
        [XmlElementNameAttribute("assemblyContext_AllocationContext")]
        [XmlAttributeAttribute(true)]
        public IAssemblyContext AssemblyContext_AllocationContext
        {
            get
            {
                return this._assemblyContext_AllocationContext;
            }
            set
            {
                if ((this._assemblyContext_AllocationContext != value))
                {
                    IAssemblyContext old = this._assemblyContext_AllocationContext;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnAssemblyContext_AllocationContextChanging(e);
                    this.OnPropertyChanging("AssemblyContext_AllocationContext", e, _assemblyContext_AllocationContextReference);
                    this._assemblyContext_AllocationContext = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetAssemblyContext_AllocationContext;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetAssemblyContext_AllocationContext;
                    }
                    this.OnAssemblyContext_AllocationContextChanged(e);
                    this.OnPropertyChanged("AssemblyContext_AllocationContext", e, _assemblyContext_AllocationContextReference);
                }
            }
        }
        
        /// <summary>
        /// The allocation_AllocationContext property
        /// </summary>
        [XmlElementNameAttribute("allocation_AllocationContext")]
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Hidden)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("allocationContexts_Allocation")]
        public IAllocation Allocation_AllocationContext
        {
            get
            {
                return ModelHelper.CastAs<IAllocation>(this.Parent);
            }
            set
            {
                this.Parent = value;
            }
        }
        
        /// <summary>
        /// The eventChannel__AllocationContext property
        /// </summary>
        [XmlElementNameAttribute("eventChannel__AllocationContext")]
        [XmlAttributeAttribute(true)]
        public IEventChannel EventChannel__AllocationContext
        {
            get
            {
                return this._eventChannel__AllocationContext;
            }
            set
            {
                if ((this._eventChannel__AllocationContext != value))
                {
                    IEventChannel old = this._eventChannel__AllocationContext;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnEventChannel__AllocationContextChanging(e);
                    this.OnPropertyChanging("EventChannel__AllocationContext", e, _eventChannel__AllocationContextReference);
                    this._eventChannel__AllocationContext = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetEventChannel__AllocationContext;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetEventChannel__AllocationContext;
                    }
                    this.OnEventChannel__AllocationContextChanged(e);
                    this.OnPropertyChanged("EventChannel__AllocationContext", e, _eventChannel__AllocationContextReference);
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new AllocationContextReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://sdq.ipd.uka.de/PalladioComponentModel/5.0#//allocation/AllocationContext")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the ResourceContainer_AllocationContext property changes its value
        /// </summary>
        public event global::System.EventHandler<ValueChangedEventArgs> ResourceContainer_AllocationContextChanging;
        
        /// <summary>
        /// Gets fired when the ResourceContainer_AllocationContext property changed its value
        /// </summary>
        public event global::System.EventHandler<ValueChangedEventArgs> ResourceContainer_AllocationContextChanged;
        
        /// <summary>
        /// Gets fired before the AssemblyContext_AllocationContext property changes its value
        /// </summary>
        public event global::System.EventHandler<ValueChangedEventArgs> AssemblyContext_AllocationContextChanging;
        
        /// <summary>
        /// Gets fired when the AssemblyContext_AllocationContext property changed its value
        /// </summary>
        public event global::System.EventHandler<ValueChangedEventArgs> AssemblyContext_AllocationContextChanged;
        
        /// <summary>
        /// Gets fired before the Allocation_AllocationContext property changes its value
        /// </summary>
        public event global::System.EventHandler<ValueChangedEventArgs> Allocation_AllocationContextChanging;
        
        /// <summary>
        /// Gets fired when the Allocation_AllocationContext property changed its value
        /// </summary>
        public event global::System.EventHandler<ValueChangedEventArgs> Allocation_AllocationContextChanged;
        
        /// <summary>
        /// Gets fired before the EventChannel__AllocationContext property changes its value
        /// </summary>
        public event global::System.EventHandler<ValueChangedEventArgs> EventChannel__AllocationContextChanging;
        
        /// <summary>
        /// Gets fired when the EventChannel__AllocationContext property changed its value
        /// </summary>
        public event global::System.EventHandler<ValueChangedEventArgs> EventChannel__AllocationContextChanged;
        
        private static ITypedElement RetrieveResourceContainer_AllocationContextReference()
        {
            return ((ITypedElement)(((ModelElement)(NMFExamples.Pcm.Allocation.AllocationContext.ClassInstance)).Resolve("resourceContainer_AllocationContext")));
        }
        
        /// <summary>
        /// Raises the ResourceContainer_AllocationContextChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnResourceContainer_AllocationContextChanging(ValueChangedEventArgs eventArgs)
        {
            global::System.EventHandler<ValueChangedEventArgs> handler = this.ResourceContainer_AllocationContextChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ResourceContainer_AllocationContextChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnResourceContainer_AllocationContextChanged(ValueChangedEventArgs eventArgs)
        {
            global::System.EventHandler<ValueChangedEventArgs> handler = this.ResourceContainer_AllocationContextChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the ResourceContainer_AllocationContext property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetResourceContainer_AllocationContext(object sender, global::System.EventArgs eventArgs)
        {
            this.ResourceContainer_AllocationContext = null;
        }
        
        private static ITypedElement RetrieveAssemblyContext_AllocationContextReference()
        {
            return ((ITypedElement)(((ModelElement)(NMFExamples.Pcm.Allocation.AllocationContext.ClassInstance)).Resolve("assemblyContext_AllocationContext")));
        }
        
        /// <summary>
        /// Raises the AssemblyContext_AllocationContextChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAssemblyContext_AllocationContextChanging(ValueChangedEventArgs eventArgs)
        {
            global::System.EventHandler<ValueChangedEventArgs> handler = this.AssemblyContext_AllocationContextChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the AssemblyContext_AllocationContextChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAssemblyContext_AllocationContextChanged(ValueChangedEventArgs eventArgs)
        {
            global::System.EventHandler<ValueChangedEventArgs> handler = this.AssemblyContext_AllocationContextChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the AssemblyContext_AllocationContext property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetAssemblyContext_AllocationContext(object sender, global::System.EventArgs eventArgs)
        {
            this.AssemblyContext_AllocationContext = null;
        }
        
        private static ITypedElement RetrieveAllocation_AllocationContextReference()
        {
            return ((ITypedElement)(((ModelElement)(NMFExamples.Pcm.Allocation.AllocationContext.ClassInstance)).Resolve("allocation_AllocationContext")));
        }
        
        /// <summary>
        /// Raises the Allocation_AllocationContextChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAllocation_AllocationContextChanging(ValueChangedEventArgs eventArgs)
        {
            global::System.EventHandler<ValueChangedEventArgs> handler = this.Allocation_AllocationContextChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Gets called when the parent model element of the current model element is about to change
        /// </summary>
        /// <param name="oldParent">The old parent model element</param>
        /// <param name="newParent">The new parent model element</param>
        protected override void OnParentChanging(IModelElement newParent, IModelElement oldParent)
        {
            IAllocation oldAllocation_AllocationContext = ModelHelper.CastAs<IAllocation>(oldParent);
            IAllocation newAllocation_AllocationContext = ModelHelper.CastAs<IAllocation>(newParent);
            ValueChangedEventArgs e = new ValueChangedEventArgs(oldAllocation_AllocationContext, newAllocation_AllocationContext);
            this.OnAllocation_AllocationContextChanging(e);
            this.OnPropertyChanging("Allocation_AllocationContext", e, _allocation_AllocationContextReference);
        }
        
        /// <summary>
        /// Raises the Allocation_AllocationContextChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAllocation_AllocationContextChanged(ValueChangedEventArgs eventArgs)
        {
            global::System.EventHandler<ValueChangedEventArgs> handler = this.Allocation_AllocationContextChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Gets called when the parent model element of the current model element changes
        /// </summary>
        /// <param name="oldParent">The old parent model element</param>
        /// <param name="newParent">The new parent model element</param>
        protected override void OnParentChanged(IModelElement newParent, IModelElement oldParent)
        {
            IAllocation oldAllocation_AllocationContext = ModelHelper.CastAs<IAllocation>(oldParent);
            IAllocation newAllocation_AllocationContext = ModelHelper.CastAs<IAllocation>(newParent);
            if ((oldAllocation_AllocationContext != null))
            {
                oldAllocation_AllocationContext.AllocationContexts_Allocation.Remove(this);
            }
            if ((newAllocation_AllocationContext != null))
            {
                newAllocation_AllocationContext.AllocationContexts_Allocation.Add(this);
            }
            ValueChangedEventArgs e = new ValueChangedEventArgs(oldAllocation_AllocationContext, newAllocation_AllocationContext);
            this.OnAllocation_AllocationContextChanged(e);
            this.OnPropertyChanged("Allocation_AllocationContext", e, _allocation_AllocationContextReference);
            base.OnParentChanged(newParent, oldParent);
        }
        
        private static ITypedElement RetrieveEventChannel__AllocationContextReference()
        {
            return ((ITypedElement)(((ModelElement)(NMFExamples.Pcm.Allocation.AllocationContext.ClassInstance)).Resolve("eventChannel__AllocationContext")));
        }
        
        /// <summary>
        /// Raises the EventChannel__AllocationContextChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnEventChannel__AllocationContextChanging(ValueChangedEventArgs eventArgs)
        {
            global::System.EventHandler<ValueChangedEventArgs> handler = this.EventChannel__AllocationContextChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the EventChannel__AllocationContextChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnEventChannel__AllocationContextChanged(ValueChangedEventArgs eventArgs)
        {
            global::System.EventHandler<ValueChangedEventArgs> handler = this.EventChannel__AllocationContextChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the EventChannel__AllocationContext property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetEventChannel__AllocationContext(object sender, global::System.EventArgs eventArgs)
        {
            this.EventChannel__AllocationContext = null;
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "RESOURCECONTAINER_ALLOCATIONCONTEXT"))
            {
                this.ResourceContainer_AllocationContext = ((IResourceContainer)(value));
                return;
            }
            if ((feature == "ASSEMBLYCONTEXT_ALLOCATIONCONTEXT"))
            {
                this.AssemblyContext_AllocationContext = ((IAssemblyContext)(value));
                return;
            }
            if ((feature == "ALLOCATION_ALLOCATIONCONTEXT"))
            {
                this.Allocation_AllocationContext = ((IAllocation)(value));
                return;
            }
            if ((feature == "EVENTCHANNEL__ALLOCATIONCONTEXT"))
            {
                this.EventChannel__AllocationContext = ((IEventChannel)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "ResourceContainer_AllocationContext"))
            {
                return new ResourceContainer_AllocationContextProxy(this);
            }
            if ((attribute == "AssemblyContext_AllocationContext"))
            {
                return new AssemblyContext_AllocationContextProxy(this);
            }
            if ((attribute == "Allocation_AllocationContext"))
            {
                return new Allocation_AllocationContextProxy(this);
            }
            if ((attribute == "EventChannel__AllocationContext"))
            {
                return new EventChannel__AllocationContextProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "ResourceContainer_AllocationContext"))
            {
                return new ResourceContainer_AllocationContextProxy(this);
            }
            if ((reference == "AssemblyContext_AllocationContext"))
            {
                return new AssemblyContext_AllocationContextProxy(this);
            }
            if ((reference == "Allocation_AllocationContext"))
            {
                return new Allocation_AllocationContextProxy(this);
            }
            if ((reference == "EventChannel__AllocationContext"))
            {
                return new EventChannel__AllocationContextProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://sdq.ipd.uka.de/PalladioComponentModel/5.0#//allocation/AllocationContext")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the AllocationContext class
        /// </summary>
        public class AllocationContextReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private AllocationContext _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public AllocationContextReferencedElementsCollection(AllocationContext parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.ResourceContainer_AllocationContext != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.AssemblyContext_AllocationContext != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Allocation_AllocationContext != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.EventChannel__AllocationContext != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.ResourceContainer_AllocationContextChanged += this.PropagateValueChanges;
                this._parent.AssemblyContext_AllocationContextChanged += this.PropagateValueChanges;
                this._parent.Allocation_AllocationContextChanged += this.PropagateValueChanges;
                this._parent.EventChannel__AllocationContextChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.ResourceContainer_AllocationContextChanged -= this.PropagateValueChanges;
                this._parent.AssemblyContext_AllocationContextChanged -= this.PropagateValueChanges;
                this._parent.Allocation_AllocationContextChanged -= this.PropagateValueChanges;
                this._parent.EventChannel__AllocationContextChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.ResourceContainer_AllocationContext == null))
                {
                    IResourceContainer resourceContainer_AllocationContextCasted = item.As<IResourceContainer>();
                    if ((resourceContainer_AllocationContextCasted != null))
                    {
                        this._parent.ResourceContainer_AllocationContext = resourceContainer_AllocationContextCasted;
                        return;
                    }
                }
                if ((this._parent.AssemblyContext_AllocationContext == null))
                {
                    IAssemblyContext assemblyContext_AllocationContextCasted = item.As<IAssemblyContext>();
                    if ((assemblyContext_AllocationContextCasted != null))
                    {
                        this._parent.AssemblyContext_AllocationContext = assemblyContext_AllocationContextCasted;
                        return;
                    }
                }
                if ((this._parent.Allocation_AllocationContext == null))
                {
                    IAllocation allocation_AllocationContextCasted = item.As<IAllocation>();
                    if ((allocation_AllocationContextCasted != null))
                    {
                        this._parent.Allocation_AllocationContext = allocation_AllocationContextCasted;
                        return;
                    }
                }
                if ((this._parent.EventChannel__AllocationContext == null))
                {
                    IEventChannel eventChannel__AllocationContextCasted = item.As<IEventChannel>();
                    if ((eventChannel__AllocationContextCasted != null))
                    {
                        this._parent.EventChannel__AllocationContext = eventChannel__AllocationContextCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.ResourceContainer_AllocationContext = null;
                this._parent.AssemblyContext_AllocationContext = null;
                this._parent.Allocation_AllocationContext = null;
                this._parent.EventChannel__AllocationContext = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.ResourceContainer_AllocationContext))
                {
                    return true;
                }
                if ((item == this._parent.AssemblyContext_AllocationContext))
                {
                    return true;
                }
                if ((item == this._parent.Allocation_AllocationContext))
                {
                    return true;
                }
                if ((item == this._parent.EventChannel__AllocationContext))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.ResourceContainer_AllocationContext != null))
                {
                    array[arrayIndex] = this._parent.ResourceContainer_AllocationContext;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.AssemblyContext_AllocationContext != null))
                {
                    array[arrayIndex] = this._parent.AssemblyContext_AllocationContext;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Allocation_AllocationContext != null))
                {
                    array[arrayIndex] = this._parent.Allocation_AllocationContext;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.EventChannel__AllocationContext != null))
                {
                    array[arrayIndex] = this._parent.EventChannel__AllocationContext;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.ResourceContainer_AllocationContext == item))
                {
                    this._parent.ResourceContainer_AllocationContext = null;
                    return true;
                }
                if ((this._parent.AssemblyContext_AllocationContext == item))
                {
                    this._parent.AssemblyContext_AllocationContext = null;
                    return true;
                }
                if ((this._parent.Allocation_AllocationContext == item))
                {
                    this._parent.Allocation_AllocationContext = null;
                    return true;
                }
                if ((this._parent.EventChannel__AllocationContext == item))
                {
                    this._parent.EventChannel__AllocationContext = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.ResourceContainer_AllocationContext).Concat(this._parent.AssemblyContext_AllocationContext).Concat(this._parent.Allocation_AllocationContext).Concat(this._parent.EventChannel__AllocationContext).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the resourceContainer_AllocationContext property
        /// </summary>
        private sealed class ResourceContainer_AllocationContextProxy : ModelPropertyChange<IAllocationContext, IResourceContainer>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ResourceContainer_AllocationContextProxy(IAllocationContext modelElement) : 
                    base(modelElement, "resourceContainer_AllocationContext")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IResourceContainer Value
            {
                get
                {
                    return this.ModelElement.ResourceContainer_AllocationContext;
                }
                set
                {
                    this.ModelElement.ResourceContainer_AllocationContext = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the assemblyContext_AllocationContext property
        /// </summary>
        private sealed class AssemblyContext_AllocationContextProxy : ModelPropertyChange<IAllocationContext, IAssemblyContext>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public AssemblyContext_AllocationContextProxy(IAllocationContext modelElement) : 
                    base(modelElement, "assemblyContext_AllocationContext")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IAssemblyContext Value
            {
                get
                {
                    return this.ModelElement.AssemblyContext_AllocationContext;
                }
                set
                {
                    this.ModelElement.AssemblyContext_AllocationContext = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the allocation_AllocationContext property
        /// </summary>
        private sealed class Allocation_AllocationContextProxy : ModelPropertyChange<IAllocationContext, IAllocation>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Allocation_AllocationContextProxy(IAllocationContext modelElement) : 
                    base(modelElement, "allocation_AllocationContext")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IAllocation Value
            {
                get
                {
                    return this.ModelElement.Allocation_AllocationContext;
                }
                set
                {
                    this.ModelElement.Allocation_AllocationContext = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the eventChannel__AllocationContext property
        /// </summary>
        private sealed class EventChannel__AllocationContextProxy : ModelPropertyChange<IAllocationContext, IEventChannel>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public EventChannel__AllocationContextProxy(IAllocationContext modelElement) : 
                    base(modelElement, "eventChannel__AllocationContext")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IEventChannel Value
            {
                get
                {
                    return this.ModelElement.EventChannel__AllocationContext;
                }
                set
                {
                    this.ModelElement.EventChannel__AllocationContext = value;
                }
            }
        }
    }
}

