//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMFExamples.Identifier;
using NMFExamples.Pcm.Core.Composition;
using NMFExamples.Pcm.Repository;
using NMFExamples.Pcm.Resourcetype;
using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using global::System.Collections;
using global::System.Collections.Generic;
using global::System.Collections.ObjectModel;
using global::System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;

namespace NMFExamples.Pcm.Core.Entity
{
    
    
    /// <summary>
    /// The default implementation of the ResourceProvidedRole class
    /// </summary>
    [XmlNamespaceAttribute("http://sdq.ipd.uka.de/PalladioComponentModel/Core/Entity/5.0")]
    [XmlNamespacePrefixAttribute("entity")]
    [ModelRepresentationClassAttribute("http://sdq.ipd.uka.de/PalladioComponentModel/5.0#//core/entity/ResourceProvidedRo" +
        "le")]
    [DebuggerDisplayAttribute("ResourceProvidedRole {Id}")]
    public partial class ResourceProvidedRole : Role, IResourceProvidedRole, IModelElement
    {
        
        private static Lazy<ITypedElement> _resourceInterfaceProvidingEntity__ResourceProvidedRoleReference = new Lazy<ITypedElement>(RetrieveResourceInterfaceProvidingEntity__ResourceProvidedRoleReference);
        
        private static Lazy<ITypedElement> _providedResourceInterface__ResourceProvidedRoleReference = new Lazy<ITypedElement>(RetrieveProvidedResourceInterface__ResourceProvidedRoleReference);
        
        /// <summary>
        /// The backing field for the ProvidedResourceInterface__ResourceProvidedRole property
        /// </summary>
        private IResourceInterface _providedResourceInterface__ResourceProvidedRole;
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The resourceInterfaceProvidingEntity__ResourceProvidedRole property
        /// </summary>
        [XmlElementNameAttribute("resourceInterfaceProvidingEntity__ResourceProvidedRole")]
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Hidden)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("resourceProvidedRoles__ResourceInterfaceProvidingEntity")]
        public IResourceInterfaceProvidingEntity ResourceInterfaceProvidingEntity__ResourceProvidedRole
        {
            get
            {
                return ModelHelper.CastAs<IResourceInterfaceProvidingEntity>(this.Parent);
            }
            set
            {
                this.Parent = value;
            }
        }
        
        /// <summary>
        /// The providedResourceInterface__ResourceProvidedRole property
        /// </summary>
        [XmlElementNameAttribute("providedResourceInterface__ResourceProvidedRole")]
        [XmlAttributeAttribute(true)]
        public IResourceInterface ProvidedResourceInterface__ResourceProvidedRole
        {
            get
            {
                return this._providedResourceInterface__ResourceProvidedRole;
            }
            set
            {
                if ((this._providedResourceInterface__ResourceProvidedRole != value))
                {
                    IResourceInterface old = this._providedResourceInterface__ResourceProvidedRole;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnProvidedResourceInterface__ResourceProvidedRoleChanging(e);
                    this.OnPropertyChanging("ProvidedResourceInterface__ResourceProvidedRole", e, _providedResourceInterface__ResourceProvidedRoleReference);
                    this._providedResourceInterface__ResourceProvidedRole = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetProvidedResourceInterface__ResourceProvidedRole;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetProvidedResourceInterface__ResourceProvidedRole;
                    }
                    this.OnProvidedResourceInterface__ResourceProvidedRoleChanged(e);
                    this.OnPropertyChanged("ProvidedResourceInterface__ResourceProvidedRole", e, _providedResourceInterface__ResourceProvidedRoleReference);
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new ResourceProvidedRoleReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://sdq.ipd.uka.de/PalladioComponentModel/5.0#//core/entity/ResourceProvidedRo" +
                            "le")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the ResourceInterfaceProvidingEntity__ResourceProvidedRole property changes its value
        /// </summary>
        public event global::System.EventHandler<ValueChangedEventArgs> ResourceInterfaceProvidingEntity__ResourceProvidedRoleChanging;
        
        /// <summary>
        /// Gets fired when the ResourceInterfaceProvidingEntity__ResourceProvidedRole property changed its value
        /// </summary>
        public event global::System.EventHandler<ValueChangedEventArgs> ResourceInterfaceProvidingEntity__ResourceProvidedRoleChanged;
        
        /// <summary>
        /// Gets fired before the ProvidedResourceInterface__ResourceProvidedRole property changes its value
        /// </summary>
        public event global::System.EventHandler<ValueChangedEventArgs> ProvidedResourceInterface__ResourceProvidedRoleChanging;
        
        /// <summary>
        /// Gets fired when the ProvidedResourceInterface__ResourceProvidedRole property changed its value
        /// </summary>
        public event global::System.EventHandler<ValueChangedEventArgs> ProvidedResourceInterface__ResourceProvidedRoleChanged;
        
        private static ITypedElement RetrieveResourceInterfaceProvidingEntity__ResourceProvidedRoleReference()
        {
            return ((ITypedElement)(((ModelElement)(NMFExamples.Pcm.Core.Entity.ResourceProvidedRole.ClassInstance)).Resolve("resourceInterfaceProvidingEntity__ResourceProvidedRole")));
        }
        
        /// <summary>
        /// Raises the ResourceInterfaceProvidingEntity__ResourceProvidedRoleChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnResourceInterfaceProvidingEntity__ResourceProvidedRoleChanging(ValueChangedEventArgs eventArgs)
        {
            global::System.EventHandler<ValueChangedEventArgs> handler = this.ResourceInterfaceProvidingEntity__ResourceProvidedRoleChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Gets called when the parent model element of the current model element is about to change
        /// </summary>
        /// <param name="oldParent">The old parent model element</param>
        /// <param name="newParent">The new parent model element</param>
        protected override void OnParentChanging(IModelElement newParent, IModelElement oldParent)
        {
            IResourceInterfaceProvidingEntity oldResourceInterfaceProvidingEntity__ResourceProvidedRole = ModelHelper.CastAs<IResourceInterfaceProvidingEntity>(oldParent);
            IResourceInterfaceProvidingEntity newResourceInterfaceProvidingEntity__ResourceProvidedRole = ModelHelper.CastAs<IResourceInterfaceProvidingEntity>(newParent);
            ValueChangedEventArgs e = new ValueChangedEventArgs(oldResourceInterfaceProvidingEntity__ResourceProvidedRole, newResourceInterfaceProvidingEntity__ResourceProvidedRole);
            this.OnResourceInterfaceProvidingEntity__ResourceProvidedRoleChanging(e);
            this.OnPropertyChanging("ResourceInterfaceProvidingEntity__ResourceProvidedRole", e, _resourceInterfaceProvidingEntity__ResourceProvidedRoleReference);
        }
        
        /// <summary>
        /// Raises the ResourceInterfaceProvidingEntity__ResourceProvidedRoleChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnResourceInterfaceProvidingEntity__ResourceProvidedRoleChanged(ValueChangedEventArgs eventArgs)
        {
            global::System.EventHandler<ValueChangedEventArgs> handler = this.ResourceInterfaceProvidingEntity__ResourceProvidedRoleChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Gets called when the parent model element of the current model element changes
        /// </summary>
        /// <param name="oldParent">The old parent model element</param>
        /// <param name="newParent">The new parent model element</param>
        protected override void OnParentChanged(IModelElement newParent, IModelElement oldParent)
        {
            IResourceInterfaceProvidingEntity oldResourceInterfaceProvidingEntity__ResourceProvidedRole = ModelHelper.CastAs<IResourceInterfaceProvidingEntity>(oldParent);
            IResourceInterfaceProvidingEntity newResourceInterfaceProvidingEntity__ResourceProvidedRole = ModelHelper.CastAs<IResourceInterfaceProvidingEntity>(newParent);
            if ((oldResourceInterfaceProvidingEntity__ResourceProvidedRole != null))
            {
                oldResourceInterfaceProvidingEntity__ResourceProvidedRole.ResourceProvidedRoles__ResourceInterfaceProvidingEntity.Remove(this);
            }
            if ((newResourceInterfaceProvidingEntity__ResourceProvidedRole != null))
            {
                newResourceInterfaceProvidingEntity__ResourceProvidedRole.ResourceProvidedRoles__ResourceInterfaceProvidingEntity.Add(this);
            }
            ValueChangedEventArgs e = new ValueChangedEventArgs(oldResourceInterfaceProvidingEntity__ResourceProvidedRole, newResourceInterfaceProvidingEntity__ResourceProvidedRole);
            this.OnResourceInterfaceProvidingEntity__ResourceProvidedRoleChanged(e);
            this.OnPropertyChanged("ResourceInterfaceProvidingEntity__ResourceProvidedRole", e, _resourceInterfaceProvidingEntity__ResourceProvidedRoleReference);
            base.OnParentChanged(newParent, oldParent);
        }
        
        private static ITypedElement RetrieveProvidedResourceInterface__ResourceProvidedRoleReference()
        {
            return ((ITypedElement)(((ModelElement)(NMFExamples.Pcm.Core.Entity.ResourceProvidedRole.ClassInstance)).Resolve("providedResourceInterface__ResourceProvidedRole")));
        }
        
        /// <summary>
        /// Raises the ProvidedResourceInterface__ResourceProvidedRoleChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnProvidedResourceInterface__ResourceProvidedRoleChanging(ValueChangedEventArgs eventArgs)
        {
            global::System.EventHandler<ValueChangedEventArgs> handler = this.ProvidedResourceInterface__ResourceProvidedRoleChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ProvidedResourceInterface__ResourceProvidedRoleChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnProvidedResourceInterface__ResourceProvidedRoleChanged(ValueChangedEventArgs eventArgs)
        {
            global::System.EventHandler<ValueChangedEventArgs> handler = this.ProvidedResourceInterface__ResourceProvidedRoleChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the ProvidedResourceInterface__ResourceProvidedRole property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetProvidedResourceInterface__ResourceProvidedRole(object sender, global::System.EventArgs eventArgs)
        {
            this.ProvidedResourceInterface__ResourceProvidedRole = null;
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "RESOURCEINTERFACEPROVIDINGENTITY__RESOURCEPROVIDEDROLE"))
            {
                this.ResourceInterfaceProvidingEntity__ResourceProvidedRole = ((IResourceInterfaceProvidingEntity)(value));
                return;
            }
            if ((feature == "PROVIDEDRESOURCEINTERFACE__RESOURCEPROVIDEDROLE"))
            {
                this.ProvidedResourceInterface__ResourceProvidedRole = ((IResourceInterface)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "ResourceInterfaceProvidingEntity__ResourceProvidedRole"))
            {
                return new ResourceInterfaceProvidingEntity__ResourceProvidedRoleProxy(this);
            }
            if ((attribute == "ProvidedResourceInterface__ResourceProvidedRole"))
            {
                return new ProvidedResourceInterface__ResourceProvidedRoleProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "ResourceInterfaceProvidingEntity__ResourceProvidedRole"))
            {
                return new ResourceInterfaceProvidingEntity__ResourceProvidedRoleProxy(this);
            }
            if ((reference == "ProvidedResourceInterface__ResourceProvidedRole"))
            {
                return new ProvidedResourceInterface__ResourceProvidedRoleProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://sdq.ipd.uka.de/PalladioComponentModel/5.0#//core/entity/ResourceProvidedRo" +
                        "le")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the ResourceProvidedRole class
        /// </summary>
        public class ResourceProvidedRoleReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private ResourceProvidedRole _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public ResourceProvidedRoleReferencedElementsCollection(ResourceProvidedRole parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.ResourceInterfaceProvidingEntity__ResourceProvidedRole != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.ProvidedResourceInterface__ResourceProvidedRole != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.ResourceInterfaceProvidingEntity__ResourceProvidedRoleChanged += this.PropagateValueChanges;
                this._parent.ProvidedResourceInterface__ResourceProvidedRoleChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.ResourceInterfaceProvidingEntity__ResourceProvidedRoleChanged -= this.PropagateValueChanges;
                this._parent.ProvidedResourceInterface__ResourceProvidedRoleChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.ResourceInterfaceProvidingEntity__ResourceProvidedRole == null))
                {
                    IResourceInterfaceProvidingEntity resourceInterfaceProvidingEntity__ResourceProvidedRoleCasted = item.As<IResourceInterfaceProvidingEntity>();
                    if ((resourceInterfaceProvidingEntity__ResourceProvidedRoleCasted != null))
                    {
                        this._parent.ResourceInterfaceProvidingEntity__ResourceProvidedRole = resourceInterfaceProvidingEntity__ResourceProvidedRoleCasted;
                        return;
                    }
                }
                if ((this._parent.ProvidedResourceInterface__ResourceProvidedRole == null))
                {
                    IResourceInterface providedResourceInterface__ResourceProvidedRoleCasted = item.As<IResourceInterface>();
                    if ((providedResourceInterface__ResourceProvidedRoleCasted != null))
                    {
                        this._parent.ProvidedResourceInterface__ResourceProvidedRole = providedResourceInterface__ResourceProvidedRoleCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.ResourceInterfaceProvidingEntity__ResourceProvidedRole = null;
                this._parent.ProvidedResourceInterface__ResourceProvidedRole = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.ResourceInterfaceProvidingEntity__ResourceProvidedRole))
                {
                    return true;
                }
                if ((item == this._parent.ProvidedResourceInterface__ResourceProvidedRole))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.ResourceInterfaceProvidingEntity__ResourceProvidedRole != null))
                {
                    array[arrayIndex] = this._parent.ResourceInterfaceProvidingEntity__ResourceProvidedRole;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.ProvidedResourceInterface__ResourceProvidedRole != null))
                {
                    array[arrayIndex] = this._parent.ProvidedResourceInterface__ResourceProvidedRole;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.ResourceInterfaceProvidingEntity__ResourceProvidedRole == item))
                {
                    this._parent.ResourceInterfaceProvidingEntity__ResourceProvidedRole = null;
                    return true;
                }
                if ((this._parent.ProvidedResourceInterface__ResourceProvidedRole == item))
                {
                    this._parent.ProvidedResourceInterface__ResourceProvidedRole = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.ResourceInterfaceProvidingEntity__ResourceProvidedRole).Concat(this._parent.ProvidedResourceInterface__ResourceProvidedRole).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the resourceInterfaceProvidingEntity__ResourceProvidedRole property
        /// </summary>
        private sealed class ResourceInterfaceProvidingEntity__ResourceProvidedRoleProxy : ModelPropertyChange<IResourceProvidedRole, IResourceInterfaceProvidingEntity>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ResourceInterfaceProvidingEntity__ResourceProvidedRoleProxy(IResourceProvidedRole modelElement) : 
                    base(modelElement, "resourceInterfaceProvidingEntity__ResourceProvidedRole")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IResourceInterfaceProvidingEntity Value
            {
                get
                {
                    return this.ModelElement.ResourceInterfaceProvidingEntity__ResourceProvidedRole;
                }
                set
                {
                    this.ModelElement.ResourceInterfaceProvidingEntity__ResourceProvidedRole = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the providedResourceInterface__ResourceProvidedRole property
        /// </summary>
        private sealed class ProvidedResourceInterface__ResourceProvidedRoleProxy : ModelPropertyChange<IResourceProvidedRole, IResourceInterface>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ProvidedResourceInterface__ResourceProvidedRoleProxy(IResourceProvidedRole modelElement) : 
                    base(modelElement, "providedResourceInterface__ResourceProvidedRole")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IResourceInterface Value
            {
                get
                {
                    return this.ModelElement.ProvidedResourceInterface__ResourceProvidedRole;
                }
                set
                {
                    this.ModelElement.ProvidedResourceInterface__ResourceProvidedRole = value;
                }
            }
        }
    }
}

