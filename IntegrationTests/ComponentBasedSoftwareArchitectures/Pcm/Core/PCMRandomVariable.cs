//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMFExamples.Pcm.Core.Composition;
using NMFExamples.Pcm.Parameter;
using NMFExamples.Pcm.Qosannotations.Qos_performance;
using NMFExamples.Pcm.Repository;
using NMFExamples.Pcm.Resourceenvironment;
using NMFExamples.Pcm.Seff;
using NMFExamples.Pcm.Seff.Seff_performance;
using NMFExamples.Pcm.Usagemodel;
using NMFExamples.Stoex;
using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using global::System.Collections;
using global::System.Collections.Generic;
using global::System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;

namespace NMFExamples.Pcm.Core
{
    
    
    /// <summary>
    /// The default implementation of the PCMRandomVariable class
    /// </summary>
    [XmlNamespaceAttribute("http://sdq.ipd.uka.de/PalladioComponentModel/Core/5.0")]
    [XmlNamespacePrefixAttribute("core")]
    [ModelRepresentationClassAttribute("http://sdq.ipd.uka.de/PalladioComponentModel/5.0#//core/PCMRandomVariable")]
    public partial class PCMRandomVariable : RandomVariable, IPCMRandomVariable, IModelElement
    {
        
        private static Lazy<ITypedElement> _closedWorkload_PCMRandomVariableReference = new Lazy<ITypedElement>(RetrieveClosedWorkload_PCMRandomVariableReference);
        
        /// <summary>
        /// The backing field for the ClosedWorkload_PCMRandomVariable property
        /// </summary>
        private IClosedWorkload _closedWorkload_PCMRandomVariable;
        
        private static Lazy<ITypedElement> _passiveResource_capacity_PCMRandomVariableReference = new Lazy<ITypedElement>(RetrievePassiveResource_capacity_PCMRandomVariableReference);
        
        /// <summary>
        /// The backing field for the PassiveResource_capacity_PCMRandomVariable property
        /// </summary>
        private IPassiveResource _passiveResource_capacity_PCMRandomVariable;
        
        private static Lazy<ITypedElement> _variableCharacterisation_SpecificationReference = new Lazy<ITypedElement>(RetrieveVariableCharacterisation_SpecificationReference);
        
        /// <summary>
        /// The backing field for the VariableCharacterisation_Specification property
        /// </summary>
        private IVariableCharacterisation _variableCharacterisation_Specification;
        
        private static Lazy<ITypedElement> _infrastructureCall__PCMRandomVariableReference = new Lazy<ITypedElement>(RetrieveInfrastructureCall__PCMRandomVariableReference);
        
        /// <summary>
        /// The backing field for the InfrastructureCall__PCMRandomVariable property
        /// </summary>
        private IInfrastructureCall _infrastructureCall__PCMRandomVariable;
        
        private static Lazy<ITypedElement> _resourceCall__PCMRandomVariableReference = new Lazy<ITypedElement>(RetrieveResourceCall__PCMRandomVariableReference);
        
        /// <summary>
        /// The backing field for the ResourceCall__PCMRandomVariable property
        /// </summary>
        private IResourceCall _resourceCall__PCMRandomVariable;
        
        private static Lazy<ITypedElement> _parametricResourceDemand_PCMRandomVariableReference = new Lazy<ITypedElement>(RetrieveParametricResourceDemand_PCMRandomVariableReference);
        
        /// <summary>
        /// The backing field for the ParametricResourceDemand_PCMRandomVariable property
        /// </summary>
        private IParametricResourceDemand _parametricResourceDemand_PCMRandomVariable;
        
        private static Lazy<ITypedElement> _loopAction_PCMRandomVariableReference = new Lazy<ITypedElement>(RetrieveLoopAction_PCMRandomVariableReference);
        
        /// <summary>
        /// The backing field for the LoopAction_PCMRandomVariable property
        /// </summary>
        private ILoopAction _loopAction_PCMRandomVariable;
        
        private static Lazy<ITypedElement> _guardedBranchTransition_PCMRandomVariableReference = new Lazy<ITypedElement>(RetrieveGuardedBranchTransition_PCMRandomVariableReference);
        
        /// <summary>
        /// The backing field for the GuardedBranchTransition_PCMRandomVariable property
        /// </summary>
        private IGuardedBranchTransition _guardedBranchTransition_PCMRandomVariable;
        
        private static Lazy<ITypedElement> _specifiedExecutionTime_PCMRandomVariableReference = new Lazy<ITypedElement>(RetrieveSpecifiedExecutionTime_PCMRandomVariableReference);
        
        /// <summary>
        /// The backing field for the SpecifiedExecutionTime_PCMRandomVariable property
        /// </summary>
        private ISpecifiedExecutionTime _specifiedExecutionTime_PCMRandomVariable;
        
        private static Lazy<ITypedElement> _eventChannelSinkConnector__FilterConditionReference = new Lazy<ITypedElement>(RetrieveEventChannelSinkConnector__FilterConditionReference);
        
        /// <summary>
        /// The backing field for the EventChannelSinkConnector__FilterCondition property
        /// </summary>
        private IEventChannelSinkConnector _eventChannelSinkConnector__FilterCondition;
        
        private static Lazy<ITypedElement> _assemblyEventConnector__FilterConditionReference = new Lazy<ITypedElement>(RetrieveAssemblyEventConnector__FilterConditionReference);
        
        /// <summary>
        /// The backing field for the AssemblyEventConnector__FilterCondition property
        /// </summary>
        private IAssemblyEventConnector _assemblyEventConnector__FilterCondition;
        
        private static Lazy<ITypedElement> _loop_LoopIterationReference = new Lazy<ITypedElement>(RetrieveLoop_LoopIterationReference);
        
        /// <summary>
        /// The backing field for the Loop_LoopIteration property
        /// </summary>
        private ILoop _loop_LoopIteration;
        
        private static Lazy<ITypedElement> _openWorkload_PCMRandomVariableReference = new Lazy<ITypedElement>(RetrieveOpenWorkload_PCMRandomVariableReference);
        
        /// <summary>
        /// The backing field for the OpenWorkload_PCMRandomVariable property
        /// </summary>
        private IOpenWorkload _openWorkload_PCMRandomVariable;
        
        private static Lazy<ITypedElement> _delay_TimeSpecificationReference = new Lazy<ITypedElement>(RetrieveDelay_TimeSpecificationReference);
        
        /// <summary>
        /// The backing field for the Delay_TimeSpecification property
        /// </summary>
        private IDelay _delay_TimeSpecification;
        
        private static Lazy<ITypedElement> _communicationLinkResourceSpecifcation_throughput_PCMRandomVariableReference = new Lazy<ITypedElement>(RetrieveCommunicationLinkResourceSpecifcation_throughput_PCMRandomVariableReference);
        
        /// <summary>
        /// The backing field for the CommunicationLinkResourceSpecifcation_throughput_PCMRandomVariable property
        /// </summary>
        private ICommunicationLinkResourceSpecification _communicationLinkResourceSpecifcation_throughput_PCMRandomVariable;
        
        private static Lazy<ITypedElement> _processingResourceSpecification_processingRate_PCMRandomVariableReference = new Lazy<ITypedElement>(RetrieveProcessingResourceSpecification_processingRate_PCMRandomVariableReference);
        
        /// <summary>
        /// The backing field for the ProcessingResourceSpecification_processingRate_PCMRandomVariable property
        /// </summary>
        private IProcessingResourceSpecification _processingResourceSpecification_processingRate_PCMRandomVariable;
        
        private static Lazy<ITypedElement> _communicationLinkResourceSpecification_latency_PCMRandomVariableReference = new Lazy<ITypedElement>(RetrieveCommunicationLinkResourceSpecification_latency_PCMRandomVariableReference);
        
        /// <summary>
        /// The backing field for the CommunicationLinkResourceSpecification_latency_PCMRandomVariable property
        /// </summary>
        private ICommunicationLinkResourceSpecification _communicationLinkResourceSpecification_latency_PCMRandomVariable;
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The closedWorkload_PCMRandomVariable property
        /// </summary>
        [XmlElementNameAttribute("closedWorkload_PCMRandomVariable")]
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Hidden)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("thinkTime_ClosedWorkload")]
        public IClosedWorkload ClosedWorkload_PCMRandomVariable
        {
            get
            {
                return this._closedWorkload_PCMRandomVariable;
            }
            set
            {
                if ((this._closedWorkload_PCMRandomVariable != value))
                {
                    IClosedWorkload old = this._closedWorkload_PCMRandomVariable;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnClosedWorkload_PCMRandomVariableChanging(e);
                    this.OnPropertyChanging("ClosedWorkload_PCMRandomVariable", e, _closedWorkload_PCMRandomVariableReference);
                    this._closedWorkload_PCMRandomVariable = value;
                    this.Parent = value;
                    if ((old != null))
                    {
                        old.ThinkTime_ClosedWorkload = null;
                        old.Deleted -= this.OnResetClosedWorkload_PCMRandomVariable;
                    }
                    if ((value != null))
                    {
                        value.ThinkTime_ClosedWorkload = this;
                        value.Deleted += this.OnResetClosedWorkload_PCMRandomVariable;
                    }
                    this.OnClosedWorkload_PCMRandomVariableChanged(e);
                    this.OnPropertyChanged("ClosedWorkload_PCMRandomVariable", e, _closedWorkload_PCMRandomVariableReference);
                }
            }
        }
        
        /// <summary>
        /// The passiveResource_capacity_PCMRandomVariable property
        /// </summary>
        [XmlElementNameAttribute("passiveResource_capacity_PCMRandomVariable")]
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Hidden)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("capacity_PassiveResource")]
        public IPassiveResource PassiveResource_capacity_PCMRandomVariable
        {
            get
            {
                return this._passiveResource_capacity_PCMRandomVariable;
            }
            set
            {
                if ((this._passiveResource_capacity_PCMRandomVariable != value))
                {
                    IPassiveResource old = this._passiveResource_capacity_PCMRandomVariable;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPassiveResource_capacity_PCMRandomVariableChanging(e);
                    this.OnPropertyChanging("PassiveResource_capacity_PCMRandomVariable", e, _passiveResource_capacity_PCMRandomVariableReference);
                    this._passiveResource_capacity_PCMRandomVariable = value;
                    this.Parent = value;
                    if ((old != null))
                    {
                        old.Capacity_PassiveResource = null;
                        old.Deleted -= this.OnResetPassiveResource_capacity_PCMRandomVariable;
                    }
                    if ((value != null))
                    {
                        value.Capacity_PassiveResource = this;
                        value.Deleted += this.OnResetPassiveResource_capacity_PCMRandomVariable;
                    }
                    this.OnPassiveResource_capacity_PCMRandomVariableChanged(e);
                    this.OnPropertyChanged("PassiveResource_capacity_PCMRandomVariable", e, _passiveResource_capacity_PCMRandomVariableReference);
                }
            }
        }
        
        /// <summary>
        /// The variableCharacterisation_Specification property
        /// </summary>
        [XmlElementNameAttribute("variableCharacterisation_Specification")]
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Hidden)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("specification_VariableCharacterisation")]
        public IVariableCharacterisation VariableCharacterisation_Specification
        {
            get
            {
                return this._variableCharacterisation_Specification;
            }
            set
            {
                if ((this._variableCharacterisation_Specification != value))
                {
                    IVariableCharacterisation old = this._variableCharacterisation_Specification;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnVariableCharacterisation_SpecificationChanging(e);
                    this.OnPropertyChanging("VariableCharacterisation_Specification", e, _variableCharacterisation_SpecificationReference);
                    this._variableCharacterisation_Specification = value;
                    this.Parent = value;
                    if ((old != null))
                    {
                        old.Specification_VariableCharacterisation = null;
                        old.Deleted -= this.OnResetVariableCharacterisation_Specification;
                    }
                    if ((value != null))
                    {
                        value.Specification_VariableCharacterisation = this;
                        value.Deleted += this.OnResetVariableCharacterisation_Specification;
                    }
                    this.OnVariableCharacterisation_SpecificationChanged(e);
                    this.OnPropertyChanged("VariableCharacterisation_Specification", e, _variableCharacterisation_SpecificationReference);
                }
            }
        }
        
        /// <summary>
        /// The infrastructureCall__PCMRandomVariable property
        /// </summary>
        [XmlElementNameAttribute("infrastructureCall__PCMRandomVariable")]
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Hidden)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("numberOfCalls__InfrastructureCall")]
        public IInfrastructureCall InfrastructureCall__PCMRandomVariable
        {
            get
            {
                return this._infrastructureCall__PCMRandomVariable;
            }
            set
            {
                if ((this._infrastructureCall__PCMRandomVariable != value))
                {
                    IInfrastructureCall old = this._infrastructureCall__PCMRandomVariable;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnInfrastructureCall__PCMRandomVariableChanging(e);
                    this.OnPropertyChanging("InfrastructureCall__PCMRandomVariable", e, _infrastructureCall__PCMRandomVariableReference);
                    this._infrastructureCall__PCMRandomVariable = value;
                    this.Parent = value;
                    if ((old != null))
                    {
                        old.NumberOfCalls__InfrastructureCall = null;
                        old.Deleted -= this.OnResetInfrastructureCall__PCMRandomVariable;
                    }
                    if ((value != null))
                    {
                        value.NumberOfCalls__InfrastructureCall = this;
                        value.Deleted += this.OnResetInfrastructureCall__PCMRandomVariable;
                    }
                    this.OnInfrastructureCall__PCMRandomVariableChanged(e);
                    this.OnPropertyChanged("InfrastructureCall__PCMRandomVariable", e, _infrastructureCall__PCMRandomVariableReference);
                }
            }
        }
        
        /// <summary>
        /// The resourceCall__PCMRandomVariable property
        /// </summary>
        [XmlElementNameAttribute("resourceCall__PCMRandomVariable")]
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Hidden)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("numberOfCalls__ResourceCall")]
        public IResourceCall ResourceCall__PCMRandomVariable
        {
            get
            {
                return this._resourceCall__PCMRandomVariable;
            }
            set
            {
                if ((this._resourceCall__PCMRandomVariable != value))
                {
                    IResourceCall old = this._resourceCall__PCMRandomVariable;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnResourceCall__PCMRandomVariableChanging(e);
                    this.OnPropertyChanging("ResourceCall__PCMRandomVariable", e, _resourceCall__PCMRandomVariableReference);
                    this._resourceCall__PCMRandomVariable = value;
                    this.Parent = value;
                    if ((old != null))
                    {
                        old.NumberOfCalls__ResourceCall = null;
                        old.Deleted -= this.OnResetResourceCall__PCMRandomVariable;
                    }
                    if ((value != null))
                    {
                        value.NumberOfCalls__ResourceCall = this;
                        value.Deleted += this.OnResetResourceCall__PCMRandomVariable;
                    }
                    this.OnResourceCall__PCMRandomVariableChanged(e);
                    this.OnPropertyChanged("ResourceCall__PCMRandomVariable", e, _resourceCall__PCMRandomVariableReference);
                }
            }
        }
        
        /// <summary>
        /// The parametricResourceDemand_PCMRandomVariable property
        /// </summary>
        [XmlElementNameAttribute("parametricResourceDemand_PCMRandomVariable")]
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Hidden)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("specification_ParametericResourceDemand")]
        public IParametricResourceDemand ParametricResourceDemand_PCMRandomVariable
        {
            get
            {
                return this._parametricResourceDemand_PCMRandomVariable;
            }
            set
            {
                if ((this._parametricResourceDemand_PCMRandomVariable != value))
                {
                    IParametricResourceDemand old = this._parametricResourceDemand_PCMRandomVariable;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnParametricResourceDemand_PCMRandomVariableChanging(e);
                    this.OnPropertyChanging("ParametricResourceDemand_PCMRandomVariable", e, _parametricResourceDemand_PCMRandomVariableReference);
                    this._parametricResourceDemand_PCMRandomVariable = value;
                    this.Parent = value;
                    if ((old != null))
                    {
                        old.Specification_ParametericResourceDemand = null;
                        old.Deleted -= this.OnResetParametricResourceDemand_PCMRandomVariable;
                    }
                    if ((value != null))
                    {
                        value.Specification_ParametericResourceDemand = this;
                        value.Deleted += this.OnResetParametricResourceDemand_PCMRandomVariable;
                    }
                    this.OnParametricResourceDemand_PCMRandomVariableChanged(e);
                    this.OnPropertyChanged("ParametricResourceDemand_PCMRandomVariable", e, _parametricResourceDemand_PCMRandomVariableReference);
                }
            }
        }
        
        /// <summary>
        /// The loopAction_PCMRandomVariable property
        /// </summary>
        [XmlElementNameAttribute("loopAction_PCMRandomVariable")]
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Hidden)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("iterationCount_LoopAction")]
        public ILoopAction LoopAction_PCMRandomVariable
        {
            get
            {
                return this._loopAction_PCMRandomVariable;
            }
            set
            {
                if ((this._loopAction_PCMRandomVariable != value))
                {
                    ILoopAction old = this._loopAction_PCMRandomVariable;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnLoopAction_PCMRandomVariableChanging(e);
                    this.OnPropertyChanging("LoopAction_PCMRandomVariable", e, _loopAction_PCMRandomVariableReference);
                    this._loopAction_PCMRandomVariable = value;
                    this.Parent = value;
                    if ((old != null))
                    {
                        old.IterationCount_LoopAction = null;
                        old.Deleted -= this.OnResetLoopAction_PCMRandomVariable;
                    }
                    if ((value != null))
                    {
                        value.IterationCount_LoopAction = this;
                        value.Deleted += this.OnResetLoopAction_PCMRandomVariable;
                    }
                    this.OnLoopAction_PCMRandomVariableChanged(e);
                    this.OnPropertyChanged("LoopAction_PCMRandomVariable", e, _loopAction_PCMRandomVariableReference);
                }
            }
        }
        
        /// <summary>
        /// The guardedBranchTransition_PCMRandomVariable property
        /// </summary>
        [XmlElementNameAttribute("guardedBranchTransition_PCMRandomVariable")]
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Hidden)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("branchCondition_GuardedBranchTransition")]
        public IGuardedBranchTransition GuardedBranchTransition_PCMRandomVariable
        {
            get
            {
                return this._guardedBranchTransition_PCMRandomVariable;
            }
            set
            {
                if ((this._guardedBranchTransition_PCMRandomVariable != value))
                {
                    IGuardedBranchTransition old = this._guardedBranchTransition_PCMRandomVariable;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnGuardedBranchTransition_PCMRandomVariableChanging(e);
                    this.OnPropertyChanging("GuardedBranchTransition_PCMRandomVariable", e, _guardedBranchTransition_PCMRandomVariableReference);
                    this._guardedBranchTransition_PCMRandomVariable = value;
                    this.Parent = value;
                    if ((old != null))
                    {
                        old.BranchCondition_GuardedBranchTransition = null;
                        old.Deleted -= this.OnResetGuardedBranchTransition_PCMRandomVariable;
                    }
                    if ((value != null))
                    {
                        value.BranchCondition_GuardedBranchTransition = this;
                        value.Deleted += this.OnResetGuardedBranchTransition_PCMRandomVariable;
                    }
                    this.OnGuardedBranchTransition_PCMRandomVariableChanged(e);
                    this.OnPropertyChanged("GuardedBranchTransition_PCMRandomVariable", e, _guardedBranchTransition_PCMRandomVariableReference);
                }
            }
        }
        
        /// <summary>
        /// The specifiedExecutionTime_PCMRandomVariable property
        /// </summary>
        [XmlElementNameAttribute("specifiedExecutionTime_PCMRandomVariable")]
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Hidden)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("specification_SpecifiedExecutionTime")]
        public ISpecifiedExecutionTime SpecifiedExecutionTime_PCMRandomVariable
        {
            get
            {
                return this._specifiedExecutionTime_PCMRandomVariable;
            }
            set
            {
                if ((this._specifiedExecutionTime_PCMRandomVariable != value))
                {
                    ISpecifiedExecutionTime old = this._specifiedExecutionTime_PCMRandomVariable;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnSpecifiedExecutionTime_PCMRandomVariableChanging(e);
                    this.OnPropertyChanging("SpecifiedExecutionTime_PCMRandomVariable", e, _specifiedExecutionTime_PCMRandomVariableReference);
                    this._specifiedExecutionTime_PCMRandomVariable = value;
                    this.Parent = value;
                    if ((old != null))
                    {
                        old.Specification_SpecifiedExecutionTime = null;
                        old.Deleted -= this.OnResetSpecifiedExecutionTime_PCMRandomVariable;
                    }
                    if ((value != null))
                    {
                        value.Specification_SpecifiedExecutionTime = this;
                        value.Deleted += this.OnResetSpecifiedExecutionTime_PCMRandomVariable;
                    }
                    this.OnSpecifiedExecutionTime_PCMRandomVariableChanged(e);
                    this.OnPropertyChanged("SpecifiedExecutionTime_PCMRandomVariable", e, _specifiedExecutionTime_PCMRandomVariableReference);
                }
            }
        }
        
        /// <summary>
        /// The eventChannelSinkConnector__FilterCondition property
        /// </summary>
        [XmlElementNameAttribute("eventChannelSinkConnector__FilterCondition")]
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Hidden)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("filterCondition__EventChannelSinkConnector")]
        public IEventChannelSinkConnector EventChannelSinkConnector__FilterCondition
        {
            get
            {
                return this._eventChannelSinkConnector__FilterCondition;
            }
            set
            {
                if ((this._eventChannelSinkConnector__FilterCondition != value))
                {
                    IEventChannelSinkConnector old = this._eventChannelSinkConnector__FilterCondition;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnEventChannelSinkConnector__FilterConditionChanging(e);
                    this.OnPropertyChanging("EventChannelSinkConnector__FilterCondition", e, _eventChannelSinkConnector__FilterConditionReference);
                    this._eventChannelSinkConnector__FilterCondition = value;
                    this.Parent = value;
                    if ((old != null))
                    {
                        old.FilterCondition__EventChannelSinkConnector = null;
                        old.Deleted -= this.OnResetEventChannelSinkConnector__FilterCondition;
                    }
                    if ((value != null))
                    {
                        value.FilterCondition__EventChannelSinkConnector = this;
                        value.Deleted += this.OnResetEventChannelSinkConnector__FilterCondition;
                    }
                    this.OnEventChannelSinkConnector__FilterConditionChanged(e);
                    this.OnPropertyChanged("EventChannelSinkConnector__FilterCondition", e, _eventChannelSinkConnector__FilterConditionReference);
                }
            }
        }
        
        /// <summary>
        /// The assemblyEventConnector__FilterCondition property
        /// </summary>
        [XmlElementNameAttribute("assemblyEventConnector__FilterCondition")]
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Hidden)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("filterCondition__AssemblyEventConnector")]
        public IAssemblyEventConnector AssemblyEventConnector__FilterCondition
        {
            get
            {
                return this._assemblyEventConnector__FilterCondition;
            }
            set
            {
                if ((this._assemblyEventConnector__FilterCondition != value))
                {
                    IAssemblyEventConnector old = this._assemblyEventConnector__FilterCondition;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnAssemblyEventConnector__FilterConditionChanging(e);
                    this.OnPropertyChanging("AssemblyEventConnector__FilterCondition", e, _assemblyEventConnector__FilterConditionReference);
                    this._assemblyEventConnector__FilterCondition = value;
                    this.Parent = value;
                    if ((old != null))
                    {
                        old.FilterCondition__AssemblyEventConnector = null;
                        old.Deleted -= this.OnResetAssemblyEventConnector__FilterCondition;
                    }
                    if ((value != null))
                    {
                        value.FilterCondition__AssemblyEventConnector = this;
                        value.Deleted += this.OnResetAssemblyEventConnector__FilterCondition;
                    }
                    this.OnAssemblyEventConnector__FilterConditionChanged(e);
                    this.OnPropertyChanged("AssemblyEventConnector__FilterCondition", e, _assemblyEventConnector__FilterConditionReference);
                }
            }
        }
        
        /// <summary>
        /// The loop_LoopIteration property
        /// </summary>
        [XmlElementNameAttribute("loop_LoopIteration")]
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Hidden)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("loopIteration_Loop")]
        public ILoop Loop_LoopIteration
        {
            get
            {
                return this._loop_LoopIteration;
            }
            set
            {
                if ((this._loop_LoopIteration != value))
                {
                    ILoop old = this._loop_LoopIteration;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnLoop_LoopIterationChanging(e);
                    this.OnPropertyChanging("Loop_LoopIteration", e, _loop_LoopIterationReference);
                    this._loop_LoopIteration = value;
                    this.Parent = value;
                    if ((old != null))
                    {
                        old.LoopIteration_Loop = null;
                        old.Deleted -= this.OnResetLoop_LoopIteration;
                    }
                    if ((value != null))
                    {
                        value.LoopIteration_Loop = this;
                        value.Deleted += this.OnResetLoop_LoopIteration;
                    }
                    this.OnLoop_LoopIterationChanged(e);
                    this.OnPropertyChanged("Loop_LoopIteration", e, _loop_LoopIterationReference);
                }
            }
        }
        
        /// <summary>
        /// The openWorkload_PCMRandomVariable property
        /// </summary>
        [XmlElementNameAttribute("openWorkload_PCMRandomVariable")]
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Hidden)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("interArrivalTime_OpenWorkload")]
        public IOpenWorkload OpenWorkload_PCMRandomVariable
        {
            get
            {
                return this._openWorkload_PCMRandomVariable;
            }
            set
            {
                if ((this._openWorkload_PCMRandomVariable != value))
                {
                    IOpenWorkload old = this._openWorkload_PCMRandomVariable;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnOpenWorkload_PCMRandomVariableChanging(e);
                    this.OnPropertyChanging("OpenWorkload_PCMRandomVariable", e, _openWorkload_PCMRandomVariableReference);
                    this._openWorkload_PCMRandomVariable = value;
                    this.Parent = value;
                    if ((old != null))
                    {
                        old.InterArrivalTime_OpenWorkload = null;
                        old.Deleted -= this.OnResetOpenWorkload_PCMRandomVariable;
                    }
                    if ((value != null))
                    {
                        value.InterArrivalTime_OpenWorkload = this;
                        value.Deleted += this.OnResetOpenWorkload_PCMRandomVariable;
                    }
                    this.OnOpenWorkload_PCMRandomVariableChanged(e);
                    this.OnPropertyChanged("OpenWorkload_PCMRandomVariable", e, _openWorkload_PCMRandomVariableReference);
                }
            }
        }
        
        /// <summary>
        /// The delay_TimeSpecification property
        /// </summary>
        [XmlElementNameAttribute("delay_TimeSpecification")]
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Hidden)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("timeSpecification_Delay")]
        public IDelay Delay_TimeSpecification
        {
            get
            {
                return this._delay_TimeSpecification;
            }
            set
            {
                if ((this._delay_TimeSpecification != value))
                {
                    IDelay old = this._delay_TimeSpecification;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnDelay_TimeSpecificationChanging(e);
                    this.OnPropertyChanging("Delay_TimeSpecification", e, _delay_TimeSpecificationReference);
                    this._delay_TimeSpecification = value;
                    this.Parent = value;
                    if ((old != null))
                    {
                        old.TimeSpecification_Delay = null;
                        old.Deleted -= this.OnResetDelay_TimeSpecification;
                    }
                    if ((value != null))
                    {
                        value.TimeSpecification_Delay = this;
                        value.Deleted += this.OnResetDelay_TimeSpecification;
                    }
                    this.OnDelay_TimeSpecificationChanged(e);
                    this.OnPropertyChanged("Delay_TimeSpecification", e, _delay_TimeSpecificationReference);
                }
            }
        }
        
        /// <summary>
        /// The communicationLinkResourceSpecifcation_throughput_PCMRandomVariable property
        /// </summary>
        [XmlElementNameAttribute("communicationLinkResourceSpecifcation_throughput_PCMRandomVariable")]
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Hidden)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("throughput_CommunicationLinkResourceSpecification")]
        public ICommunicationLinkResourceSpecification CommunicationLinkResourceSpecifcation_throughput_PCMRandomVariable
        {
            get
            {
                return this._communicationLinkResourceSpecifcation_throughput_PCMRandomVariable;
            }
            set
            {
                if ((this._communicationLinkResourceSpecifcation_throughput_PCMRandomVariable != value))
                {
                    ICommunicationLinkResourceSpecification old = this._communicationLinkResourceSpecifcation_throughput_PCMRandomVariable;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnCommunicationLinkResourceSpecifcation_throughput_PCMRandomVariableChanging(e);
                    this.OnPropertyChanging("CommunicationLinkResourceSpecifcation_throughput_PCMRandomVariable", e, _communicationLinkResourceSpecifcation_throughput_PCMRandomVariableReference);
                    this._communicationLinkResourceSpecifcation_throughput_PCMRandomVariable = value;
                    this.Parent = value;
                    if ((old != null))
                    {
                        old.Throughput_CommunicationLinkResourceSpecification = null;
                        old.Deleted -= this.OnResetCommunicationLinkResourceSpecifcation_throughput_PCMRandomVariable;
                    }
                    if ((value != null))
                    {
                        value.Throughput_CommunicationLinkResourceSpecification = this;
                        value.Deleted += this.OnResetCommunicationLinkResourceSpecifcation_throughput_PCMRandomVariable;
                    }
                    this.OnCommunicationLinkResourceSpecifcation_throughput_PCMRandomVariableChanged(e);
                    this.OnPropertyChanged("CommunicationLinkResourceSpecifcation_throughput_PCMRandomVariable", e, _communicationLinkResourceSpecifcation_throughput_PCMRandomVariableReference);
                }
            }
        }
        
        /// <summary>
        /// The processingResourceSpecification_processingRate_PCMRandomVariable property
        /// </summary>
        [XmlElementNameAttribute("processingResourceSpecification_processingRate_PCMRandomVariable")]
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Hidden)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("processingRate_ProcessingResourceSpecification")]
        public IProcessingResourceSpecification ProcessingResourceSpecification_processingRate_PCMRandomVariable
        {
            get
            {
                return this._processingResourceSpecification_processingRate_PCMRandomVariable;
            }
            set
            {
                if ((this._processingResourceSpecification_processingRate_PCMRandomVariable != value))
                {
                    IProcessingResourceSpecification old = this._processingResourceSpecification_processingRate_PCMRandomVariable;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnProcessingResourceSpecification_processingRate_PCMRandomVariableChanging(e);
                    this.OnPropertyChanging("ProcessingResourceSpecification_processingRate_PCMRandomVariable", e, _processingResourceSpecification_processingRate_PCMRandomVariableReference);
                    this._processingResourceSpecification_processingRate_PCMRandomVariable = value;
                    this.Parent = value;
                    if ((old != null))
                    {
                        old.ProcessingRate_ProcessingResourceSpecification = null;
                        old.Deleted -= this.OnResetProcessingResourceSpecification_processingRate_PCMRandomVariable;
                    }
                    if ((value != null))
                    {
                        value.ProcessingRate_ProcessingResourceSpecification = this;
                        value.Deleted += this.OnResetProcessingResourceSpecification_processingRate_PCMRandomVariable;
                    }
                    this.OnProcessingResourceSpecification_processingRate_PCMRandomVariableChanged(e);
                    this.OnPropertyChanged("ProcessingResourceSpecification_processingRate_PCMRandomVariable", e, _processingResourceSpecification_processingRate_PCMRandomVariableReference);
                }
            }
        }
        
        /// <summary>
        /// The communicationLinkResourceSpecification_latency_PCMRandomVariable property
        /// </summary>
        [XmlElementNameAttribute("communicationLinkResourceSpecification_latency_PCMRandomVariable")]
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Hidden)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("latency_CommunicationLinkResourceSpecification")]
        public ICommunicationLinkResourceSpecification CommunicationLinkResourceSpecification_latency_PCMRandomVariable
        {
            get
            {
                return this._communicationLinkResourceSpecification_latency_PCMRandomVariable;
            }
            set
            {
                if ((this._communicationLinkResourceSpecification_latency_PCMRandomVariable != value))
                {
                    ICommunicationLinkResourceSpecification old = this._communicationLinkResourceSpecification_latency_PCMRandomVariable;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnCommunicationLinkResourceSpecification_latency_PCMRandomVariableChanging(e);
                    this.OnPropertyChanging("CommunicationLinkResourceSpecification_latency_PCMRandomVariable", e, _communicationLinkResourceSpecification_latency_PCMRandomVariableReference);
                    this._communicationLinkResourceSpecification_latency_PCMRandomVariable = value;
                    this.Parent = value;
                    if ((old != null))
                    {
                        old.Latency_CommunicationLinkResourceSpecification = null;
                        old.Deleted -= this.OnResetCommunicationLinkResourceSpecification_latency_PCMRandomVariable;
                    }
                    if ((value != null))
                    {
                        value.Latency_CommunicationLinkResourceSpecification = this;
                        value.Deleted += this.OnResetCommunicationLinkResourceSpecification_latency_PCMRandomVariable;
                    }
                    this.OnCommunicationLinkResourceSpecification_latency_PCMRandomVariableChanged(e);
                    this.OnPropertyChanged("CommunicationLinkResourceSpecification_latency_PCMRandomVariable", e, _communicationLinkResourceSpecification_latency_PCMRandomVariableReference);
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new PCMRandomVariableReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://sdq.ipd.uka.de/PalladioComponentModel/5.0#//core/PCMRandomVariable")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the ClosedWorkload_PCMRandomVariable property changes its value
        /// </summary>
        public event global::System.EventHandler<ValueChangedEventArgs> ClosedWorkload_PCMRandomVariableChanging;
        
        /// <summary>
        /// Gets fired when the ClosedWorkload_PCMRandomVariable property changed its value
        /// </summary>
        public event global::System.EventHandler<ValueChangedEventArgs> ClosedWorkload_PCMRandomVariableChanged;
        
        /// <summary>
        /// Gets fired before the PassiveResource_capacity_PCMRandomVariable property changes its value
        /// </summary>
        public event global::System.EventHandler<ValueChangedEventArgs> PassiveResource_capacity_PCMRandomVariableChanging;
        
        /// <summary>
        /// Gets fired when the PassiveResource_capacity_PCMRandomVariable property changed its value
        /// </summary>
        public event global::System.EventHandler<ValueChangedEventArgs> PassiveResource_capacity_PCMRandomVariableChanged;
        
        /// <summary>
        /// Gets fired before the VariableCharacterisation_Specification property changes its value
        /// </summary>
        public event global::System.EventHandler<ValueChangedEventArgs> VariableCharacterisation_SpecificationChanging;
        
        /// <summary>
        /// Gets fired when the VariableCharacterisation_Specification property changed its value
        /// </summary>
        public event global::System.EventHandler<ValueChangedEventArgs> VariableCharacterisation_SpecificationChanged;
        
        /// <summary>
        /// Gets fired before the InfrastructureCall__PCMRandomVariable property changes its value
        /// </summary>
        public event global::System.EventHandler<ValueChangedEventArgs> InfrastructureCall__PCMRandomVariableChanging;
        
        /// <summary>
        /// Gets fired when the InfrastructureCall__PCMRandomVariable property changed its value
        /// </summary>
        public event global::System.EventHandler<ValueChangedEventArgs> InfrastructureCall__PCMRandomVariableChanged;
        
        /// <summary>
        /// Gets fired before the ResourceCall__PCMRandomVariable property changes its value
        /// </summary>
        public event global::System.EventHandler<ValueChangedEventArgs> ResourceCall__PCMRandomVariableChanging;
        
        /// <summary>
        /// Gets fired when the ResourceCall__PCMRandomVariable property changed its value
        /// </summary>
        public event global::System.EventHandler<ValueChangedEventArgs> ResourceCall__PCMRandomVariableChanged;
        
        /// <summary>
        /// Gets fired before the ParametricResourceDemand_PCMRandomVariable property changes its value
        /// </summary>
        public event global::System.EventHandler<ValueChangedEventArgs> ParametricResourceDemand_PCMRandomVariableChanging;
        
        /// <summary>
        /// Gets fired when the ParametricResourceDemand_PCMRandomVariable property changed its value
        /// </summary>
        public event global::System.EventHandler<ValueChangedEventArgs> ParametricResourceDemand_PCMRandomVariableChanged;
        
        /// <summary>
        /// Gets fired before the LoopAction_PCMRandomVariable property changes its value
        /// </summary>
        public event global::System.EventHandler<ValueChangedEventArgs> LoopAction_PCMRandomVariableChanging;
        
        /// <summary>
        /// Gets fired when the LoopAction_PCMRandomVariable property changed its value
        /// </summary>
        public event global::System.EventHandler<ValueChangedEventArgs> LoopAction_PCMRandomVariableChanged;
        
        /// <summary>
        /// Gets fired before the GuardedBranchTransition_PCMRandomVariable property changes its value
        /// </summary>
        public event global::System.EventHandler<ValueChangedEventArgs> GuardedBranchTransition_PCMRandomVariableChanging;
        
        /// <summary>
        /// Gets fired when the GuardedBranchTransition_PCMRandomVariable property changed its value
        /// </summary>
        public event global::System.EventHandler<ValueChangedEventArgs> GuardedBranchTransition_PCMRandomVariableChanged;
        
        /// <summary>
        /// Gets fired before the SpecifiedExecutionTime_PCMRandomVariable property changes its value
        /// </summary>
        public event global::System.EventHandler<ValueChangedEventArgs> SpecifiedExecutionTime_PCMRandomVariableChanging;
        
        /// <summary>
        /// Gets fired when the SpecifiedExecutionTime_PCMRandomVariable property changed its value
        /// </summary>
        public event global::System.EventHandler<ValueChangedEventArgs> SpecifiedExecutionTime_PCMRandomVariableChanged;
        
        /// <summary>
        /// Gets fired before the EventChannelSinkConnector__FilterCondition property changes its value
        /// </summary>
        public event global::System.EventHandler<ValueChangedEventArgs> EventChannelSinkConnector__FilterConditionChanging;
        
        /// <summary>
        /// Gets fired when the EventChannelSinkConnector__FilterCondition property changed its value
        /// </summary>
        public event global::System.EventHandler<ValueChangedEventArgs> EventChannelSinkConnector__FilterConditionChanged;
        
        /// <summary>
        /// Gets fired before the AssemblyEventConnector__FilterCondition property changes its value
        /// </summary>
        public event global::System.EventHandler<ValueChangedEventArgs> AssemblyEventConnector__FilterConditionChanging;
        
        /// <summary>
        /// Gets fired when the AssemblyEventConnector__FilterCondition property changed its value
        /// </summary>
        public event global::System.EventHandler<ValueChangedEventArgs> AssemblyEventConnector__FilterConditionChanged;
        
        /// <summary>
        /// Gets fired before the Loop_LoopIteration property changes its value
        /// </summary>
        public event global::System.EventHandler<ValueChangedEventArgs> Loop_LoopIterationChanging;
        
        /// <summary>
        /// Gets fired when the Loop_LoopIteration property changed its value
        /// </summary>
        public event global::System.EventHandler<ValueChangedEventArgs> Loop_LoopIterationChanged;
        
        /// <summary>
        /// Gets fired before the OpenWorkload_PCMRandomVariable property changes its value
        /// </summary>
        public event global::System.EventHandler<ValueChangedEventArgs> OpenWorkload_PCMRandomVariableChanging;
        
        /// <summary>
        /// Gets fired when the OpenWorkload_PCMRandomVariable property changed its value
        /// </summary>
        public event global::System.EventHandler<ValueChangedEventArgs> OpenWorkload_PCMRandomVariableChanged;
        
        /// <summary>
        /// Gets fired before the Delay_TimeSpecification property changes its value
        /// </summary>
        public event global::System.EventHandler<ValueChangedEventArgs> Delay_TimeSpecificationChanging;
        
        /// <summary>
        /// Gets fired when the Delay_TimeSpecification property changed its value
        /// </summary>
        public event global::System.EventHandler<ValueChangedEventArgs> Delay_TimeSpecificationChanged;
        
        /// <summary>
        /// Gets fired before the CommunicationLinkResourceSpecifcation_throughput_PCMRandomVariable property changes its value
        /// </summary>
        public event global::System.EventHandler<ValueChangedEventArgs> CommunicationLinkResourceSpecifcation_throughput_PCMRandomVariableChanging;
        
        /// <summary>
        /// Gets fired when the CommunicationLinkResourceSpecifcation_throughput_PCMRandomVariable property changed its value
        /// </summary>
        public event global::System.EventHandler<ValueChangedEventArgs> CommunicationLinkResourceSpecifcation_throughput_PCMRandomVariableChanged;
        
        /// <summary>
        /// Gets fired before the ProcessingResourceSpecification_processingRate_PCMRandomVariable property changes its value
        /// </summary>
        public event global::System.EventHandler<ValueChangedEventArgs> ProcessingResourceSpecification_processingRate_PCMRandomVariableChanging;
        
        /// <summary>
        /// Gets fired when the ProcessingResourceSpecification_processingRate_PCMRandomVariable property changed its value
        /// </summary>
        public event global::System.EventHandler<ValueChangedEventArgs> ProcessingResourceSpecification_processingRate_PCMRandomVariableChanged;
        
        /// <summary>
        /// Gets fired before the CommunicationLinkResourceSpecification_latency_PCMRandomVariable property changes its value
        /// </summary>
        public event global::System.EventHandler<ValueChangedEventArgs> CommunicationLinkResourceSpecification_latency_PCMRandomVariableChanging;
        
        /// <summary>
        /// Gets fired when the CommunicationLinkResourceSpecification_latency_PCMRandomVariable property changed its value
        /// </summary>
        public event global::System.EventHandler<ValueChangedEventArgs> CommunicationLinkResourceSpecification_latency_PCMRandomVariableChanged;
        
        private static ITypedElement RetrieveClosedWorkload_PCMRandomVariableReference()
        {
            return ((ITypedElement)(((ModelElement)(NMFExamples.Pcm.Core.PCMRandomVariable.ClassInstance)).Resolve("closedWorkload_PCMRandomVariable")));
        }
        
        /// <summary>
        /// Raises the ClosedWorkload_PCMRandomVariableChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnClosedWorkload_PCMRandomVariableChanging(ValueChangedEventArgs eventArgs)
        {
            global::System.EventHandler<ValueChangedEventArgs> handler = this.ClosedWorkload_PCMRandomVariableChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ClosedWorkload_PCMRandomVariableChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnClosedWorkload_PCMRandomVariableChanged(ValueChangedEventArgs eventArgs)
        {
            global::System.EventHandler<ValueChangedEventArgs> handler = this.ClosedWorkload_PCMRandomVariableChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the ClosedWorkload_PCMRandomVariable property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetClosedWorkload_PCMRandomVariable(object sender, global::System.EventArgs eventArgs)
        {
            this.ClosedWorkload_PCMRandomVariable = null;
        }
        
        private static ITypedElement RetrievePassiveResource_capacity_PCMRandomVariableReference()
        {
            return ((ITypedElement)(((ModelElement)(NMFExamples.Pcm.Core.PCMRandomVariable.ClassInstance)).Resolve("passiveResource_capacity_PCMRandomVariable")));
        }
        
        /// <summary>
        /// Raises the PassiveResource_capacity_PCMRandomVariableChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPassiveResource_capacity_PCMRandomVariableChanging(ValueChangedEventArgs eventArgs)
        {
            global::System.EventHandler<ValueChangedEventArgs> handler = this.PassiveResource_capacity_PCMRandomVariableChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PassiveResource_capacity_PCMRandomVariableChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPassiveResource_capacity_PCMRandomVariableChanged(ValueChangedEventArgs eventArgs)
        {
            global::System.EventHandler<ValueChangedEventArgs> handler = this.PassiveResource_capacity_PCMRandomVariableChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the PassiveResource_capacity_PCMRandomVariable property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetPassiveResource_capacity_PCMRandomVariable(object sender, global::System.EventArgs eventArgs)
        {
            this.PassiveResource_capacity_PCMRandomVariable = null;
        }
        
        private static ITypedElement RetrieveVariableCharacterisation_SpecificationReference()
        {
            return ((ITypedElement)(((ModelElement)(NMFExamples.Pcm.Core.PCMRandomVariable.ClassInstance)).Resolve("variableCharacterisation_Specification")));
        }
        
        /// <summary>
        /// Raises the VariableCharacterisation_SpecificationChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnVariableCharacterisation_SpecificationChanging(ValueChangedEventArgs eventArgs)
        {
            global::System.EventHandler<ValueChangedEventArgs> handler = this.VariableCharacterisation_SpecificationChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the VariableCharacterisation_SpecificationChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnVariableCharacterisation_SpecificationChanged(ValueChangedEventArgs eventArgs)
        {
            global::System.EventHandler<ValueChangedEventArgs> handler = this.VariableCharacterisation_SpecificationChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the VariableCharacterisation_Specification property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetVariableCharacterisation_Specification(object sender, global::System.EventArgs eventArgs)
        {
            this.VariableCharacterisation_Specification = null;
        }
        
        private static ITypedElement RetrieveInfrastructureCall__PCMRandomVariableReference()
        {
            return ((ITypedElement)(((ModelElement)(NMFExamples.Pcm.Core.PCMRandomVariable.ClassInstance)).Resolve("infrastructureCall__PCMRandomVariable")));
        }
        
        /// <summary>
        /// Raises the InfrastructureCall__PCMRandomVariableChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnInfrastructureCall__PCMRandomVariableChanging(ValueChangedEventArgs eventArgs)
        {
            global::System.EventHandler<ValueChangedEventArgs> handler = this.InfrastructureCall__PCMRandomVariableChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the InfrastructureCall__PCMRandomVariableChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnInfrastructureCall__PCMRandomVariableChanged(ValueChangedEventArgs eventArgs)
        {
            global::System.EventHandler<ValueChangedEventArgs> handler = this.InfrastructureCall__PCMRandomVariableChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the InfrastructureCall__PCMRandomVariable property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetInfrastructureCall__PCMRandomVariable(object sender, global::System.EventArgs eventArgs)
        {
            this.InfrastructureCall__PCMRandomVariable = null;
        }
        
        private static ITypedElement RetrieveResourceCall__PCMRandomVariableReference()
        {
            return ((ITypedElement)(((ModelElement)(NMFExamples.Pcm.Core.PCMRandomVariable.ClassInstance)).Resolve("resourceCall__PCMRandomVariable")));
        }
        
        /// <summary>
        /// Raises the ResourceCall__PCMRandomVariableChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnResourceCall__PCMRandomVariableChanging(ValueChangedEventArgs eventArgs)
        {
            global::System.EventHandler<ValueChangedEventArgs> handler = this.ResourceCall__PCMRandomVariableChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ResourceCall__PCMRandomVariableChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnResourceCall__PCMRandomVariableChanged(ValueChangedEventArgs eventArgs)
        {
            global::System.EventHandler<ValueChangedEventArgs> handler = this.ResourceCall__PCMRandomVariableChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the ResourceCall__PCMRandomVariable property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetResourceCall__PCMRandomVariable(object sender, global::System.EventArgs eventArgs)
        {
            this.ResourceCall__PCMRandomVariable = null;
        }
        
        private static ITypedElement RetrieveParametricResourceDemand_PCMRandomVariableReference()
        {
            return ((ITypedElement)(((ModelElement)(NMFExamples.Pcm.Core.PCMRandomVariable.ClassInstance)).Resolve("parametricResourceDemand_PCMRandomVariable")));
        }
        
        /// <summary>
        /// Raises the ParametricResourceDemand_PCMRandomVariableChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnParametricResourceDemand_PCMRandomVariableChanging(ValueChangedEventArgs eventArgs)
        {
            global::System.EventHandler<ValueChangedEventArgs> handler = this.ParametricResourceDemand_PCMRandomVariableChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ParametricResourceDemand_PCMRandomVariableChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnParametricResourceDemand_PCMRandomVariableChanged(ValueChangedEventArgs eventArgs)
        {
            global::System.EventHandler<ValueChangedEventArgs> handler = this.ParametricResourceDemand_PCMRandomVariableChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the ParametricResourceDemand_PCMRandomVariable property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetParametricResourceDemand_PCMRandomVariable(object sender, global::System.EventArgs eventArgs)
        {
            this.ParametricResourceDemand_PCMRandomVariable = null;
        }
        
        private static ITypedElement RetrieveLoopAction_PCMRandomVariableReference()
        {
            return ((ITypedElement)(((ModelElement)(NMFExamples.Pcm.Core.PCMRandomVariable.ClassInstance)).Resolve("loopAction_PCMRandomVariable")));
        }
        
        /// <summary>
        /// Raises the LoopAction_PCMRandomVariableChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLoopAction_PCMRandomVariableChanging(ValueChangedEventArgs eventArgs)
        {
            global::System.EventHandler<ValueChangedEventArgs> handler = this.LoopAction_PCMRandomVariableChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the LoopAction_PCMRandomVariableChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLoopAction_PCMRandomVariableChanged(ValueChangedEventArgs eventArgs)
        {
            global::System.EventHandler<ValueChangedEventArgs> handler = this.LoopAction_PCMRandomVariableChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the LoopAction_PCMRandomVariable property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetLoopAction_PCMRandomVariable(object sender, global::System.EventArgs eventArgs)
        {
            this.LoopAction_PCMRandomVariable = null;
        }
        
        private static ITypedElement RetrieveGuardedBranchTransition_PCMRandomVariableReference()
        {
            return ((ITypedElement)(((ModelElement)(NMFExamples.Pcm.Core.PCMRandomVariable.ClassInstance)).Resolve("guardedBranchTransition_PCMRandomVariable")));
        }
        
        /// <summary>
        /// Raises the GuardedBranchTransition_PCMRandomVariableChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnGuardedBranchTransition_PCMRandomVariableChanging(ValueChangedEventArgs eventArgs)
        {
            global::System.EventHandler<ValueChangedEventArgs> handler = this.GuardedBranchTransition_PCMRandomVariableChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the GuardedBranchTransition_PCMRandomVariableChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnGuardedBranchTransition_PCMRandomVariableChanged(ValueChangedEventArgs eventArgs)
        {
            global::System.EventHandler<ValueChangedEventArgs> handler = this.GuardedBranchTransition_PCMRandomVariableChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the GuardedBranchTransition_PCMRandomVariable property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetGuardedBranchTransition_PCMRandomVariable(object sender, global::System.EventArgs eventArgs)
        {
            this.GuardedBranchTransition_PCMRandomVariable = null;
        }
        
        private static ITypedElement RetrieveSpecifiedExecutionTime_PCMRandomVariableReference()
        {
            return ((ITypedElement)(((ModelElement)(NMFExamples.Pcm.Core.PCMRandomVariable.ClassInstance)).Resolve("specifiedExecutionTime_PCMRandomVariable")));
        }
        
        /// <summary>
        /// Raises the SpecifiedExecutionTime_PCMRandomVariableChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSpecifiedExecutionTime_PCMRandomVariableChanging(ValueChangedEventArgs eventArgs)
        {
            global::System.EventHandler<ValueChangedEventArgs> handler = this.SpecifiedExecutionTime_PCMRandomVariableChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the SpecifiedExecutionTime_PCMRandomVariableChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSpecifiedExecutionTime_PCMRandomVariableChanged(ValueChangedEventArgs eventArgs)
        {
            global::System.EventHandler<ValueChangedEventArgs> handler = this.SpecifiedExecutionTime_PCMRandomVariableChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the SpecifiedExecutionTime_PCMRandomVariable property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetSpecifiedExecutionTime_PCMRandomVariable(object sender, global::System.EventArgs eventArgs)
        {
            this.SpecifiedExecutionTime_PCMRandomVariable = null;
        }
        
        private static ITypedElement RetrieveEventChannelSinkConnector__FilterConditionReference()
        {
            return ((ITypedElement)(((ModelElement)(NMFExamples.Pcm.Core.PCMRandomVariable.ClassInstance)).Resolve("eventChannelSinkConnector__FilterCondition")));
        }
        
        /// <summary>
        /// Raises the EventChannelSinkConnector__FilterConditionChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnEventChannelSinkConnector__FilterConditionChanging(ValueChangedEventArgs eventArgs)
        {
            global::System.EventHandler<ValueChangedEventArgs> handler = this.EventChannelSinkConnector__FilterConditionChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the EventChannelSinkConnector__FilterConditionChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnEventChannelSinkConnector__FilterConditionChanged(ValueChangedEventArgs eventArgs)
        {
            global::System.EventHandler<ValueChangedEventArgs> handler = this.EventChannelSinkConnector__FilterConditionChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the EventChannelSinkConnector__FilterCondition property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetEventChannelSinkConnector__FilterCondition(object sender, global::System.EventArgs eventArgs)
        {
            this.EventChannelSinkConnector__FilterCondition = null;
        }
        
        private static ITypedElement RetrieveAssemblyEventConnector__FilterConditionReference()
        {
            return ((ITypedElement)(((ModelElement)(NMFExamples.Pcm.Core.PCMRandomVariable.ClassInstance)).Resolve("assemblyEventConnector__FilterCondition")));
        }
        
        /// <summary>
        /// Raises the AssemblyEventConnector__FilterConditionChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAssemblyEventConnector__FilterConditionChanging(ValueChangedEventArgs eventArgs)
        {
            global::System.EventHandler<ValueChangedEventArgs> handler = this.AssemblyEventConnector__FilterConditionChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the AssemblyEventConnector__FilterConditionChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAssemblyEventConnector__FilterConditionChanged(ValueChangedEventArgs eventArgs)
        {
            global::System.EventHandler<ValueChangedEventArgs> handler = this.AssemblyEventConnector__FilterConditionChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the AssemblyEventConnector__FilterCondition property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetAssemblyEventConnector__FilterCondition(object sender, global::System.EventArgs eventArgs)
        {
            this.AssemblyEventConnector__FilterCondition = null;
        }
        
        private static ITypedElement RetrieveLoop_LoopIterationReference()
        {
            return ((ITypedElement)(((ModelElement)(NMFExamples.Pcm.Core.PCMRandomVariable.ClassInstance)).Resolve("loop_LoopIteration")));
        }
        
        /// <summary>
        /// Raises the Loop_LoopIterationChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLoop_LoopIterationChanging(ValueChangedEventArgs eventArgs)
        {
            global::System.EventHandler<ValueChangedEventArgs> handler = this.Loop_LoopIterationChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Loop_LoopIterationChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLoop_LoopIterationChanged(ValueChangedEventArgs eventArgs)
        {
            global::System.EventHandler<ValueChangedEventArgs> handler = this.Loop_LoopIterationChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Loop_LoopIteration property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetLoop_LoopIteration(object sender, global::System.EventArgs eventArgs)
        {
            this.Loop_LoopIteration = null;
        }
        
        private static ITypedElement RetrieveOpenWorkload_PCMRandomVariableReference()
        {
            return ((ITypedElement)(((ModelElement)(NMFExamples.Pcm.Core.PCMRandomVariable.ClassInstance)).Resolve("openWorkload_PCMRandomVariable")));
        }
        
        /// <summary>
        /// Raises the OpenWorkload_PCMRandomVariableChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOpenWorkload_PCMRandomVariableChanging(ValueChangedEventArgs eventArgs)
        {
            global::System.EventHandler<ValueChangedEventArgs> handler = this.OpenWorkload_PCMRandomVariableChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the OpenWorkload_PCMRandomVariableChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOpenWorkload_PCMRandomVariableChanged(ValueChangedEventArgs eventArgs)
        {
            global::System.EventHandler<ValueChangedEventArgs> handler = this.OpenWorkload_PCMRandomVariableChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the OpenWorkload_PCMRandomVariable property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetOpenWorkload_PCMRandomVariable(object sender, global::System.EventArgs eventArgs)
        {
            this.OpenWorkload_PCMRandomVariable = null;
        }
        
        private static ITypedElement RetrieveDelay_TimeSpecificationReference()
        {
            return ((ITypedElement)(((ModelElement)(NMFExamples.Pcm.Core.PCMRandomVariable.ClassInstance)).Resolve("delay_TimeSpecification")));
        }
        
        /// <summary>
        /// Raises the Delay_TimeSpecificationChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDelay_TimeSpecificationChanging(ValueChangedEventArgs eventArgs)
        {
            global::System.EventHandler<ValueChangedEventArgs> handler = this.Delay_TimeSpecificationChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Delay_TimeSpecificationChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDelay_TimeSpecificationChanged(ValueChangedEventArgs eventArgs)
        {
            global::System.EventHandler<ValueChangedEventArgs> handler = this.Delay_TimeSpecificationChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Delay_TimeSpecification property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetDelay_TimeSpecification(object sender, global::System.EventArgs eventArgs)
        {
            this.Delay_TimeSpecification = null;
        }
        
        private static ITypedElement RetrieveCommunicationLinkResourceSpecifcation_throughput_PCMRandomVariableReference()
        {
            return ((ITypedElement)(((ModelElement)(NMFExamples.Pcm.Core.PCMRandomVariable.ClassInstance)).Resolve("communicationLinkResourceSpecifcation_throughput_PCMRandomVariable")));
        }
        
        /// <summary>
        /// Raises the CommunicationLinkResourceSpecifcation_throughput_PCMRandomVariableChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCommunicationLinkResourceSpecifcation_throughput_PCMRandomVariableChanging(ValueChangedEventArgs eventArgs)
        {
            global::System.EventHandler<ValueChangedEventArgs> handler = this.CommunicationLinkResourceSpecifcation_throughput_PCMRandomVariableChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the CommunicationLinkResourceSpecifcation_throughput_PCMRandomVariableChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCommunicationLinkResourceSpecifcation_throughput_PCMRandomVariableChanged(ValueChangedEventArgs eventArgs)
        {
            global::System.EventHandler<ValueChangedEventArgs> handler = this.CommunicationLinkResourceSpecifcation_throughput_PCMRandomVariableChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the CommunicationLinkResourceSpecifcation_throughput_PCMRandomVariable property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetCommunicationLinkResourceSpecifcation_throughput_PCMRandomVariable(object sender, global::System.EventArgs eventArgs)
        {
            this.CommunicationLinkResourceSpecifcation_throughput_PCMRandomVariable = null;
        }
        
        private static ITypedElement RetrieveProcessingResourceSpecification_processingRate_PCMRandomVariableReference()
        {
            return ((ITypedElement)(((ModelElement)(NMFExamples.Pcm.Core.PCMRandomVariable.ClassInstance)).Resolve("processingResourceSpecification_processingRate_PCMRandomVariable")));
        }
        
        /// <summary>
        /// Raises the ProcessingResourceSpecification_processingRate_PCMRandomVariableChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnProcessingResourceSpecification_processingRate_PCMRandomVariableChanging(ValueChangedEventArgs eventArgs)
        {
            global::System.EventHandler<ValueChangedEventArgs> handler = this.ProcessingResourceSpecification_processingRate_PCMRandomVariableChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ProcessingResourceSpecification_processingRate_PCMRandomVariableChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnProcessingResourceSpecification_processingRate_PCMRandomVariableChanged(ValueChangedEventArgs eventArgs)
        {
            global::System.EventHandler<ValueChangedEventArgs> handler = this.ProcessingResourceSpecification_processingRate_PCMRandomVariableChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the ProcessingResourceSpecification_processingRate_PCMRandomVariable property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetProcessingResourceSpecification_processingRate_PCMRandomVariable(object sender, global::System.EventArgs eventArgs)
        {
            this.ProcessingResourceSpecification_processingRate_PCMRandomVariable = null;
        }
        
        private static ITypedElement RetrieveCommunicationLinkResourceSpecification_latency_PCMRandomVariableReference()
        {
            return ((ITypedElement)(((ModelElement)(NMFExamples.Pcm.Core.PCMRandomVariable.ClassInstance)).Resolve("communicationLinkResourceSpecification_latency_PCMRandomVariable")));
        }
        
        /// <summary>
        /// Raises the CommunicationLinkResourceSpecification_latency_PCMRandomVariableChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCommunicationLinkResourceSpecification_latency_PCMRandomVariableChanging(ValueChangedEventArgs eventArgs)
        {
            global::System.EventHandler<ValueChangedEventArgs> handler = this.CommunicationLinkResourceSpecification_latency_PCMRandomVariableChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the CommunicationLinkResourceSpecification_latency_PCMRandomVariableChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCommunicationLinkResourceSpecification_latency_PCMRandomVariableChanged(ValueChangedEventArgs eventArgs)
        {
            global::System.EventHandler<ValueChangedEventArgs> handler = this.CommunicationLinkResourceSpecification_latency_PCMRandomVariableChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the CommunicationLinkResourceSpecification_latency_PCMRandomVariable property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetCommunicationLinkResourceSpecification_latency_PCMRandomVariable(object sender, global::System.EventArgs eventArgs)
        {
            this.CommunicationLinkResourceSpecification_latency_PCMRandomVariable = null;
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "CLOSEDWORKLOAD_PCMRANDOMVARIABLE"))
            {
                this.ClosedWorkload_PCMRandomVariable = ((IClosedWorkload)(value));
                return;
            }
            if ((feature == "PASSIVERESOURCE_CAPACITY_PCMRANDOMVARIABLE"))
            {
                this.PassiveResource_capacity_PCMRandomVariable = ((IPassiveResource)(value));
                return;
            }
            if ((feature == "VARIABLECHARACTERISATION_SPECIFICATION"))
            {
                this.VariableCharacterisation_Specification = ((IVariableCharacterisation)(value));
                return;
            }
            if ((feature == "INFRASTRUCTURECALL__PCMRANDOMVARIABLE"))
            {
                this.InfrastructureCall__PCMRandomVariable = ((IInfrastructureCall)(value));
                return;
            }
            if ((feature == "RESOURCECALL__PCMRANDOMVARIABLE"))
            {
                this.ResourceCall__PCMRandomVariable = ((IResourceCall)(value));
                return;
            }
            if ((feature == "PARAMETRICRESOURCEDEMAND_PCMRANDOMVARIABLE"))
            {
                this.ParametricResourceDemand_PCMRandomVariable = ((IParametricResourceDemand)(value));
                return;
            }
            if ((feature == "LOOPACTION_PCMRANDOMVARIABLE"))
            {
                this.LoopAction_PCMRandomVariable = ((ILoopAction)(value));
                return;
            }
            if ((feature == "GUARDEDBRANCHTRANSITION_PCMRANDOMVARIABLE"))
            {
                this.GuardedBranchTransition_PCMRandomVariable = ((IGuardedBranchTransition)(value));
                return;
            }
            if ((feature == "SPECIFIEDEXECUTIONTIME_PCMRANDOMVARIABLE"))
            {
                this.SpecifiedExecutionTime_PCMRandomVariable = ((ISpecifiedExecutionTime)(value));
                return;
            }
            if ((feature == "EVENTCHANNELSINKCONNECTOR__FILTERCONDITION"))
            {
                this.EventChannelSinkConnector__FilterCondition = ((IEventChannelSinkConnector)(value));
                return;
            }
            if ((feature == "ASSEMBLYEVENTCONNECTOR__FILTERCONDITION"))
            {
                this.AssemblyEventConnector__FilterCondition = ((IAssemblyEventConnector)(value));
                return;
            }
            if ((feature == "LOOP_LOOPITERATION"))
            {
                this.Loop_LoopIteration = ((ILoop)(value));
                return;
            }
            if ((feature == "OPENWORKLOAD_PCMRANDOMVARIABLE"))
            {
                this.OpenWorkload_PCMRandomVariable = ((IOpenWorkload)(value));
                return;
            }
            if ((feature == "DELAY_TIMESPECIFICATION"))
            {
                this.Delay_TimeSpecification = ((IDelay)(value));
                return;
            }
            if ((feature == "COMMUNICATIONLINKRESOURCESPECIFCATION_THROUGHPUT_PCMRANDOMVARIABLE"))
            {
                this.CommunicationLinkResourceSpecifcation_throughput_PCMRandomVariable = ((ICommunicationLinkResourceSpecification)(value));
                return;
            }
            if ((feature == "PROCESSINGRESOURCESPECIFICATION_PROCESSINGRATE_PCMRANDOMVARIABLE"))
            {
                this.ProcessingResourceSpecification_processingRate_PCMRandomVariable = ((IProcessingResourceSpecification)(value));
                return;
            }
            if ((feature == "COMMUNICATIONLINKRESOURCESPECIFICATION_LATENCY_PCMRANDOMVARIABLE"))
            {
                this.CommunicationLinkResourceSpecification_latency_PCMRandomVariable = ((ICommunicationLinkResourceSpecification)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "ClosedWorkload_PCMRandomVariable"))
            {
                return new ClosedWorkload_PCMRandomVariableProxy(this);
            }
            if ((attribute == "PassiveResource_capacity_PCMRandomVariable"))
            {
                return new PassiveResource_capacity_PCMRandomVariableProxy(this);
            }
            if ((attribute == "VariableCharacterisation_Specification"))
            {
                return new VariableCharacterisation_SpecificationProxy(this);
            }
            if ((attribute == "InfrastructureCall__PCMRandomVariable"))
            {
                return new InfrastructureCall__PCMRandomVariableProxy(this);
            }
            if ((attribute == "ResourceCall__PCMRandomVariable"))
            {
                return new ResourceCall__PCMRandomVariableProxy(this);
            }
            if ((attribute == "ParametricResourceDemand_PCMRandomVariable"))
            {
                return new ParametricResourceDemand_PCMRandomVariableProxy(this);
            }
            if ((attribute == "LoopAction_PCMRandomVariable"))
            {
                return new LoopAction_PCMRandomVariableProxy(this);
            }
            if ((attribute == "GuardedBranchTransition_PCMRandomVariable"))
            {
                return new GuardedBranchTransition_PCMRandomVariableProxy(this);
            }
            if ((attribute == "SpecifiedExecutionTime_PCMRandomVariable"))
            {
                return new SpecifiedExecutionTime_PCMRandomVariableProxy(this);
            }
            if ((attribute == "EventChannelSinkConnector__FilterCondition"))
            {
                return new EventChannelSinkConnector__FilterConditionProxy(this);
            }
            if ((attribute == "AssemblyEventConnector__FilterCondition"))
            {
                return new AssemblyEventConnector__FilterConditionProxy(this);
            }
            if ((attribute == "Loop_LoopIteration"))
            {
                return new Loop_LoopIterationProxy(this);
            }
            if ((attribute == "OpenWorkload_PCMRandomVariable"))
            {
                return new OpenWorkload_PCMRandomVariableProxy(this);
            }
            if ((attribute == "Delay_TimeSpecification"))
            {
                return new Delay_TimeSpecificationProxy(this);
            }
            if ((attribute == "CommunicationLinkResourceSpecifcation_throughput_PCMRandomVariable"))
            {
                return new CommunicationLinkResourceSpecifcation_throughput_PCMRandomVariableProxy(this);
            }
            if ((attribute == "ProcessingResourceSpecification_processingRate_PCMRandomVariable"))
            {
                return new ProcessingResourceSpecification_processingRate_PCMRandomVariableProxy(this);
            }
            if ((attribute == "CommunicationLinkResourceSpecification_latency_PCMRandomVariable"))
            {
                return new CommunicationLinkResourceSpecification_latency_PCMRandomVariableProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "ClosedWorkload_PCMRandomVariable"))
            {
                return new ClosedWorkload_PCMRandomVariableProxy(this);
            }
            if ((reference == "PassiveResource_capacity_PCMRandomVariable"))
            {
                return new PassiveResource_capacity_PCMRandomVariableProxy(this);
            }
            if ((reference == "VariableCharacterisation_Specification"))
            {
                return new VariableCharacterisation_SpecificationProxy(this);
            }
            if ((reference == "InfrastructureCall__PCMRandomVariable"))
            {
                return new InfrastructureCall__PCMRandomVariableProxy(this);
            }
            if ((reference == "ResourceCall__PCMRandomVariable"))
            {
                return new ResourceCall__PCMRandomVariableProxy(this);
            }
            if ((reference == "ParametricResourceDemand_PCMRandomVariable"))
            {
                return new ParametricResourceDemand_PCMRandomVariableProxy(this);
            }
            if ((reference == "LoopAction_PCMRandomVariable"))
            {
                return new LoopAction_PCMRandomVariableProxy(this);
            }
            if ((reference == "GuardedBranchTransition_PCMRandomVariable"))
            {
                return new GuardedBranchTransition_PCMRandomVariableProxy(this);
            }
            if ((reference == "SpecifiedExecutionTime_PCMRandomVariable"))
            {
                return new SpecifiedExecutionTime_PCMRandomVariableProxy(this);
            }
            if ((reference == "EventChannelSinkConnector__FilterCondition"))
            {
                return new EventChannelSinkConnector__FilterConditionProxy(this);
            }
            if ((reference == "AssemblyEventConnector__FilterCondition"))
            {
                return new AssemblyEventConnector__FilterConditionProxy(this);
            }
            if ((reference == "Loop_LoopIteration"))
            {
                return new Loop_LoopIterationProxy(this);
            }
            if ((reference == "OpenWorkload_PCMRandomVariable"))
            {
                return new OpenWorkload_PCMRandomVariableProxy(this);
            }
            if ((reference == "Delay_TimeSpecification"))
            {
                return new Delay_TimeSpecificationProxy(this);
            }
            if ((reference == "CommunicationLinkResourceSpecifcation_throughput_PCMRandomVariable"))
            {
                return new CommunicationLinkResourceSpecifcation_throughput_PCMRandomVariableProxy(this);
            }
            if ((reference == "ProcessingResourceSpecification_processingRate_PCMRandomVariable"))
            {
                return new ProcessingResourceSpecification_processingRate_PCMRandomVariableProxy(this);
            }
            if ((reference == "CommunicationLinkResourceSpecification_latency_PCMRandomVariable"))
            {
                return new CommunicationLinkResourceSpecification_latency_PCMRandomVariableProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://sdq.ipd.uka.de/PalladioComponentModel/5.0#//core/PCMRandomVariable")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the PCMRandomVariable class
        /// </summary>
        public class PCMRandomVariableReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private PCMRandomVariable _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public PCMRandomVariableReferencedElementsCollection(PCMRandomVariable parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.ClosedWorkload_PCMRandomVariable != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.PassiveResource_capacity_PCMRandomVariable != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.VariableCharacterisation_Specification != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.InfrastructureCall__PCMRandomVariable != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.ResourceCall__PCMRandomVariable != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.ParametricResourceDemand_PCMRandomVariable != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.LoopAction_PCMRandomVariable != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.GuardedBranchTransition_PCMRandomVariable != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.SpecifiedExecutionTime_PCMRandomVariable != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.EventChannelSinkConnector__FilterCondition != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.AssemblyEventConnector__FilterCondition != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Loop_LoopIteration != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.OpenWorkload_PCMRandomVariable != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Delay_TimeSpecification != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.CommunicationLinkResourceSpecifcation_throughput_PCMRandomVariable != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.ProcessingResourceSpecification_processingRate_PCMRandomVariable != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.CommunicationLinkResourceSpecification_latency_PCMRandomVariable != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.ClosedWorkload_PCMRandomVariableChanged += this.PropagateValueChanges;
                this._parent.PassiveResource_capacity_PCMRandomVariableChanged += this.PropagateValueChanges;
                this._parent.VariableCharacterisation_SpecificationChanged += this.PropagateValueChanges;
                this._parent.InfrastructureCall__PCMRandomVariableChanged += this.PropagateValueChanges;
                this._parent.ResourceCall__PCMRandomVariableChanged += this.PropagateValueChanges;
                this._parent.ParametricResourceDemand_PCMRandomVariableChanged += this.PropagateValueChanges;
                this._parent.LoopAction_PCMRandomVariableChanged += this.PropagateValueChanges;
                this._parent.GuardedBranchTransition_PCMRandomVariableChanged += this.PropagateValueChanges;
                this._parent.SpecifiedExecutionTime_PCMRandomVariableChanged += this.PropagateValueChanges;
                this._parent.EventChannelSinkConnector__FilterConditionChanged += this.PropagateValueChanges;
                this._parent.AssemblyEventConnector__FilterConditionChanged += this.PropagateValueChanges;
                this._parent.Loop_LoopIterationChanged += this.PropagateValueChanges;
                this._parent.OpenWorkload_PCMRandomVariableChanged += this.PropagateValueChanges;
                this._parent.Delay_TimeSpecificationChanged += this.PropagateValueChanges;
                this._parent.CommunicationLinkResourceSpecifcation_throughput_PCMRandomVariableChanged += this.PropagateValueChanges;
                this._parent.ProcessingResourceSpecification_processingRate_PCMRandomVariableChanged += this.PropagateValueChanges;
                this._parent.CommunicationLinkResourceSpecification_latency_PCMRandomVariableChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.ClosedWorkload_PCMRandomVariableChanged -= this.PropagateValueChanges;
                this._parent.PassiveResource_capacity_PCMRandomVariableChanged -= this.PropagateValueChanges;
                this._parent.VariableCharacterisation_SpecificationChanged -= this.PropagateValueChanges;
                this._parent.InfrastructureCall__PCMRandomVariableChanged -= this.PropagateValueChanges;
                this._parent.ResourceCall__PCMRandomVariableChanged -= this.PropagateValueChanges;
                this._parent.ParametricResourceDemand_PCMRandomVariableChanged -= this.PropagateValueChanges;
                this._parent.LoopAction_PCMRandomVariableChanged -= this.PropagateValueChanges;
                this._parent.GuardedBranchTransition_PCMRandomVariableChanged -= this.PropagateValueChanges;
                this._parent.SpecifiedExecutionTime_PCMRandomVariableChanged -= this.PropagateValueChanges;
                this._parent.EventChannelSinkConnector__FilterConditionChanged -= this.PropagateValueChanges;
                this._parent.AssemblyEventConnector__FilterConditionChanged -= this.PropagateValueChanges;
                this._parent.Loop_LoopIterationChanged -= this.PropagateValueChanges;
                this._parent.OpenWorkload_PCMRandomVariableChanged -= this.PropagateValueChanges;
                this._parent.Delay_TimeSpecificationChanged -= this.PropagateValueChanges;
                this._parent.CommunicationLinkResourceSpecifcation_throughput_PCMRandomVariableChanged -= this.PropagateValueChanges;
                this._parent.ProcessingResourceSpecification_processingRate_PCMRandomVariableChanged -= this.PropagateValueChanges;
                this._parent.CommunicationLinkResourceSpecification_latency_PCMRandomVariableChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.ClosedWorkload_PCMRandomVariable == null))
                {
                    IClosedWorkload closedWorkload_PCMRandomVariableCasted = item.As<IClosedWorkload>();
                    if ((closedWorkload_PCMRandomVariableCasted != null))
                    {
                        this._parent.ClosedWorkload_PCMRandomVariable = closedWorkload_PCMRandomVariableCasted;
                        return;
                    }
                }
                if ((this._parent.PassiveResource_capacity_PCMRandomVariable == null))
                {
                    IPassiveResource passiveResource_capacity_PCMRandomVariableCasted = item.As<IPassiveResource>();
                    if ((passiveResource_capacity_PCMRandomVariableCasted != null))
                    {
                        this._parent.PassiveResource_capacity_PCMRandomVariable = passiveResource_capacity_PCMRandomVariableCasted;
                        return;
                    }
                }
                if ((this._parent.VariableCharacterisation_Specification == null))
                {
                    IVariableCharacterisation variableCharacterisation_SpecificationCasted = item.As<IVariableCharacterisation>();
                    if ((variableCharacterisation_SpecificationCasted != null))
                    {
                        this._parent.VariableCharacterisation_Specification = variableCharacterisation_SpecificationCasted;
                        return;
                    }
                }
                if ((this._parent.InfrastructureCall__PCMRandomVariable == null))
                {
                    IInfrastructureCall infrastructureCall__PCMRandomVariableCasted = item.As<IInfrastructureCall>();
                    if ((infrastructureCall__PCMRandomVariableCasted != null))
                    {
                        this._parent.InfrastructureCall__PCMRandomVariable = infrastructureCall__PCMRandomVariableCasted;
                        return;
                    }
                }
                if ((this._parent.ResourceCall__PCMRandomVariable == null))
                {
                    IResourceCall resourceCall__PCMRandomVariableCasted = item.As<IResourceCall>();
                    if ((resourceCall__PCMRandomVariableCasted != null))
                    {
                        this._parent.ResourceCall__PCMRandomVariable = resourceCall__PCMRandomVariableCasted;
                        return;
                    }
                }
                if ((this._parent.ParametricResourceDemand_PCMRandomVariable == null))
                {
                    IParametricResourceDemand parametricResourceDemand_PCMRandomVariableCasted = item.As<IParametricResourceDemand>();
                    if ((parametricResourceDemand_PCMRandomVariableCasted != null))
                    {
                        this._parent.ParametricResourceDemand_PCMRandomVariable = parametricResourceDemand_PCMRandomVariableCasted;
                        return;
                    }
                }
                if ((this._parent.LoopAction_PCMRandomVariable == null))
                {
                    ILoopAction loopAction_PCMRandomVariableCasted = item.As<ILoopAction>();
                    if ((loopAction_PCMRandomVariableCasted != null))
                    {
                        this._parent.LoopAction_PCMRandomVariable = loopAction_PCMRandomVariableCasted;
                        return;
                    }
                }
                if ((this._parent.GuardedBranchTransition_PCMRandomVariable == null))
                {
                    IGuardedBranchTransition guardedBranchTransition_PCMRandomVariableCasted = item.As<IGuardedBranchTransition>();
                    if ((guardedBranchTransition_PCMRandomVariableCasted != null))
                    {
                        this._parent.GuardedBranchTransition_PCMRandomVariable = guardedBranchTransition_PCMRandomVariableCasted;
                        return;
                    }
                }
                if ((this._parent.SpecifiedExecutionTime_PCMRandomVariable == null))
                {
                    ISpecifiedExecutionTime specifiedExecutionTime_PCMRandomVariableCasted = item.As<ISpecifiedExecutionTime>();
                    if ((specifiedExecutionTime_PCMRandomVariableCasted != null))
                    {
                        this._parent.SpecifiedExecutionTime_PCMRandomVariable = specifiedExecutionTime_PCMRandomVariableCasted;
                        return;
                    }
                }
                if ((this._parent.EventChannelSinkConnector__FilterCondition == null))
                {
                    IEventChannelSinkConnector eventChannelSinkConnector__FilterConditionCasted = item.As<IEventChannelSinkConnector>();
                    if ((eventChannelSinkConnector__FilterConditionCasted != null))
                    {
                        this._parent.EventChannelSinkConnector__FilterCondition = eventChannelSinkConnector__FilterConditionCasted;
                        return;
                    }
                }
                if ((this._parent.AssemblyEventConnector__FilterCondition == null))
                {
                    IAssemblyEventConnector assemblyEventConnector__FilterConditionCasted = item.As<IAssemblyEventConnector>();
                    if ((assemblyEventConnector__FilterConditionCasted != null))
                    {
                        this._parent.AssemblyEventConnector__FilterCondition = assemblyEventConnector__FilterConditionCasted;
                        return;
                    }
                }
                if ((this._parent.Loop_LoopIteration == null))
                {
                    ILoop loop_LoopIterationCasted = item.As<ILoop>();
                    if ((loop_LoopIterationCasted != null))
                    {
                        this._parent.Loop_LoopIteration = loop_LoopIterationCasted;
                        return;
                    }
                }
                if ((this._parent.OpenWorkload_PCMRandomVariable == null))
                {
                    IOpenWorkload openWorkload_PCMRandomVariableCasted = item.As<IOpenWorkload>();
                    if ((openWorkload_PCMRandomVariableCasted != null))
                    {
                        this._parent.OpenWorkload_PCMRandomVariable = openWorkload_PCMRandomVariableCasted;
                        return;
                    }
                }
                if ((this._parent.Delay_TimeSpecification == null))
                {
                    IDelay delay_TimeSpecificationCasted = item.As<IDelay>();
                    if ((delay_TimeSpecificationCasted != null))
                    {
                        this._parent.Delay_TimeSpecification = delay_TimeSpecificationCasted;
                        return;
                    }
                }
                if ((this._parent.CommunicationLinkResourceSpecifcation_throughput_PCMRandomVariable == null))
                {
                    ICommunicationLinkResourceSpecification communicationLinkResourceSpecifcation_throughput_PCMRandomVariableCasted = item.As<ICommunicationLinkResourceSpecification>();
                    if ((communicationLinkResourceSpecifcation_throughput_PCMRandomVariableCasted != null))
                    {
                        this._parent.CommunicationLinkResourceSpecifcation_throughput_PCMRandomVariable = communicationLinkResourceSpecifcation_throughput_PCMRandomVariableCasted;
                        return;
                    }
                }
                if ((this._parent.ProcessingResourceSpecification_processingRate_PCMRandomVariable == null))
                {
                    IProcessingResourceSpecification processingResourceSpecification_processingRate_PCMRandomVariableCasted = item.As<IProcessingResourceSpecification>();
                    if ((processingResourceSpecification_processingRate_PCMRandomVariableCasted != null))
                    {
                        this._parent.ProcessingResourceSpecification_processingRate_PCMRandomVariable = processingResourceSpecification_processingRate_PCMRandomVariableCasted;
                        return;
                    }
                }
                if ((this._parent.CommunicationLinkResourceSpecification_latency_PCMRandomVariable == null))
                {
                    ICommunicationLinkResourceSpecification communicationLinkResourceSpecification_latency_PCMRandomVariableCasted = item.As<ICommunicationLinkResourceSpecification>();
                    if ((communicationLinkResourceSpecification_latency_PCMRandomVariableCasted != null))
                    {
                        this._parent.CommunicationLinkResourceSpecification_latency_PCMRandomVariable = communicationLinkResourceSpecification_latency_PCMRandomVariableCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.ClosedWorkload_PCMRandomVariable = null;
                this._parent.PassiveResource_capacity_PCMRandomVariable = null;
                this._parent.VariableCharacterisation_Specification = null;
                this._parent.InfrastructureCall__PCMRandomVariable = null;
                this._parent.ResourceCall__PCMRandomVariable = null;
                this._parent.ParametricResourceDemand_PCMRandomVariable = null;
                this._parent.LoopAction_PCMRandomVariable = null;
                this._parent.GuardedBranchTransition_PCMRandomVariable = null;
                this._parent.SpecifiedExecutionTime_PCMRandomVariable = null;
                this._parent.EventChannelSinkConnector__FilterCondition = null;
                this._parent.AssemblyEventConnector__FilterCondition = null;
                this._parent.Loop_LoopIteration = null;
                this._parent.OpenWorkload_PCMRandomVariable = null;
                this._parent.Delay_TimeSpecification = null;
                this._parent.CommunicationLinkResourceSpecifcation_throughput_PCMRandomVariable = null;
                this._parent.ProcessingResourceSpecification_processingRate_PCMRandomVariable = null;
                this._parent.CommunicationLinkResourceSpecification_latency_PCMRandomVariable = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.ClosedWorkload_PCMRandomVariable))
                {
                    return true;
                }
                if ((item == this._parent.PassiveResource_capacity_PCMRandomVariable))
                {
                    return true;
                }
                if ((item == this._parent.VariableCharacterisation_Specification))
                {
                    return true;
                }
                if ((item == this._parent.InfrastructureCall__PCMRandomVariable))
                {
                    return true;
                }
                if ((item == this._parent.ResourceCall__PCMRandomVariable))
                {
                    return true;
                }
                if ((item == this._parent.ParametricResourceDemand_PCMRandomVariable))
                {
                    return true;
                }
                if ((item == this._parent.LoopAction_PCMRandomVariable))
                {
                    return true;
                }
                if ((item == this._parent.GuardedBranchTransition_PCMRandomVariable))
                {
                    return true;
                }
                if ((item == this._parent.SpecifiedExecutionTime_PCMRandomVariable))
                {
                    return true;
                }
                if ((item == this._parent.EventChannelSinkConnector__FilterCondition))
                {
                    return true;
                }
                if ((item == this._parent.AssemblyEventConnector__FilterCondition))
                {
                    return true;
                }
                if ((item == this._parent.Loop_LoopIteration))
                {
                    return true;
                }
                if ((item == this._parent.OpenWorkload_PCMRandomVariable))
                {
                    return true;
                }
                if ((item == this._parent.Delay_TimeSpecification))
                {
                    return true;
                }
                if ((item == this._parent.CommunicationLinkResourceSpecifcation_throughput_PCMRandomVariable))
                {
                    return true;
                }
                if ((item == this._parent.ProcessingResourceSpecification_processingRate_PCMRandomVariable))
                {
                    return true;
                }
                if ((item == this._parent.CommunicationLinkResourceSpecification_latency_PCMRandomVariable))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.ClosedWorkload_PCMRandomVariable != null))
                {
                    array[arrayIndex] = this._parent.ClosedWorkload_PCMRandomVariable;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.PassiveResource_capacity_PCMRandomVariable != null))
                {
                    array[arrayIndex] = this._parent.PassiveResource_capacity_PCMRandomVariable;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.VariableCharacterisation_Specification != null))
                {
                    array[arrayIndex] = this._parent.VariableCharacterisation_Specification;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.InfrastructureCall__PCMRandomVariable != null))
                {
                    array[arrayIndex] = this._parent.InfrastructureCall__PCMRandomVariable;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.ResourceCall__PCMRandomVariable != null))
                {
                    array[arrayIndex] = this._parent.ResourceCall__PCMRandomVariable;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.ParametricResourceDemand_PCMRandomVariable != null))
                {
                    array[arrayIndex] = this._parent.ParametricResourceDemand_PCMRandomVariable;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.LoopAction_PCMRandomVariable != null))
                {
                    array[arrayIndex] = this._parent.LoopAction_PCMRandomVariable;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.GuardedBranchTransition_PCMRandomVariable != null))
                {
                    array[arrayIndex] = this._parent.GuardedBranchTransition_PCMRandomVariable;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.SpecifiedExecutionTime_PCMRandomVariable != null))
                {
                    array[arrayIndex] = this._parent.SpecifiedExecutionTime_PCMRandomVariable;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.EventChannelSinkConnector__FilterCondition != null))
                {
                    array[arrayIndex] = this._parent.EventChannelSinkConnector__FilterCondition;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.AssemblyEventConnector__FilterCondition != null))
                {
                    array[arrayIndex] = this._parent.AssemblyEventConnector__FilterCondition;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Loop_LoopIteration != null))
                {
                    array[arrayIndex] = this._parent.Loop_LoopIteration;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.OpenWorkload_PCMRandomVariable != null))
                {
                    array[arrayIndex] = this._parent.OpenWorkload_PCMRandomVariable;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Delay_TimeSpecification != null))
                {
                    array[arrayIndex] = this._parent.Delay_TimeSpecification;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.CommunicationLinkResourceSpecifcation_throughput_PCMRandomVariable != null))
                {
                    array[arrayIndex] = this._parent.CommunicationLinkResourceSpecifcation_throughput_PCMRandomVariable;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.ProcessingResourceSpecification_processingRate_PCMRandomVariable != null))
                {
                    array[arrayIndex] = this._parent.ProcessingResourceSpecification_processingRate_PCMRandomVariable;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.CommunicationLinkResourceSpecification_latency_PCMRandomVariable != null))
                {
                    array[arrayIndex] = this._parent.CommunicationLinkResourceSpecification_latency_PCMRandomVariable;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.ClosedWorkload_PCMRandomVariable == item))
                {
                    this._parent.ClosedWorkload_PCMRandomVariable = null;
                    return true;
                }
                if ((this._parent.PassiveResource_capacity_PCMRandomVariable == item))
                {
                    this._parent.PassiveResource_capacity_PCMRandomVariable = null;
                    return true;
                }
                if ((this._parent.VariableCharacterisation_Specification == item))
                {
                    this._parent.VariableCharacterisation_Specification = null;
                    return true;
                }
                if ((this._parent.InfrastructureCall__PCMRandomVariable == item))
                {
                    this._parent.InfrastructureCall__PCMRandomVariable = null;
                    return true;
                }
                if ((this._parent.ResourceCall__PCMRandomVariable == item))
                {
                    this._parent.ResourceCall__PCMRandomVariable = null;
                    return true;
                }
                if ((this._parent.ParametricResourceDemand_PCMRandomVariable == item))
                {
                    this._parent.ParametricResourceDemand_PCMRandomVariable = null;
                    return true;
                }
                if ((this._parent.LoopAction_PCMRandomVariable == item))
                {
                    this._parent.LoopAction_PCMRandomVariable = null;
                    return true;
                }
                if ((this._parent.GuardedBranchTransition_PCMRandomVariable == item))
                {
                    this._parent.GuardedBranchTransition_PCMRandomVariable = null;
                    return true;
                }
                if ((this._parent.SpecifiedExecutionTime_PCMRandomVariable == item))
                {
                    this._parent.SpecifiedExecutionTime_PCMRandomVariable = null;
                    return true;
                }
                if ((this._parent.EventChannelSinkConnector__FilterCondition == item))
                {
                    this._parent.EventChannelSinkConnector__FilterCondition = null;
                    return true;
                }
                if ((this._parent.AssemblyEventConnector__FilterCondition == item))
                {
                    this._parent.AssemblyEventConnector__FilterCondition = null;
                    return true;
                }
                if ((this._parent.Loop_LoopIteration == item))
                {
                    this._parent.Loop_LoopIteration = null;
                    return true;
                }
                if ((this._parent.OpenWorkload_PCMRandomVariable == item))
                {
                    this._parent.OpenWorkload_PCMRandomVariable = null;
                    return true;
                }
                if ((this._parent.Delay_TimeSpecification == item))
                {
                    this._parent.Delay_TimeSpecification = null;
                    return true;
                }
                if ((this._parent.CommunicationLinkResourceSpecifcation_throughput_PCMRandomVariable == item))
                {
                    this._parent.CommunicationLinkResourceSpecifcation_throughput_PCMRandomVariable = null;
                    return true;
                }
                if ((this._parent.ProcessingResourceSpecification_processingRate_PCMRandomVariable == item))
                {
                    this._parent.ProcessingResourceSpecification_processingRate_PCMRandomVariable = null;
                    return true;
                }
                if ((this._parent.CommunicationLinkResourceSpecification_latency_PCMRandomVariable == item))
                {
                    this._parent.CommunicationLinkResourceSpecification_latency_PCMRandomVariable = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.ClosedWorkload_PCMRandomVariable).Concat(this._parent.PassiveResource_capacity_PCMRandomVariable).Concat(this._parent.VariableCharacterisation_Specification).Concat(this._parent.InfrastructureCall__PCMRandomVariable).Concat(this._parent.ResourceCall__PCMRandomVariable).Concat(this._parent.ParametricResourceDemand_PCMRandomVariable).Concat(this._parent.LoopAction_PCMRandomVariable).Concat(this._parent.GuardedBranchTransition_PCMRandomVariable).Concat(this._parent.SpecifiedExecutionTime_PCMRandomVariable).Concat(this._parent.EventChannelSinkConnector__FilterCondition).Concat(this._parent.AssemblyEventConnector__FilterCondition).Concat(this._parent.Loop_LoopIteration).Concat(this._parent.OpenWorkload_PCMRandomVariable).Concat(this._parent.Delay_TimeSpecification).Concat(this._parent.CommunicationLinkResourceSpecifcation_throughput_PCMRandomVariable).Concat(this._parent.ProcessingResourceSpecification_processingRate_PCMRandomVariable).Concat(this._parent.CommunicationLinkResourceSpecification_latency_PCMRandomVariable).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the closedWorkload_PCMRandomVariable property
        /// </summary>
        private sealed class ClosedWorkload_PCMRandomVariableProxy : ModelPropertyChange<IPCMRandomVariable, IClosedWorkload>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ClosedWorkload_PCMRandomVariableProxy(IPCMRandomVariable modelElement) : 
                    base(modelElement, "closedWorkload_PCMRandomVariable")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IClosedWorkload Value
            {
                get
                {
                    return this.ModelElement.ClosedWorkload_PCMRandomVariable;
                }
                set
                {
                    this.ModelElement.ClosedWorkload_PCMRandomVariable = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the passiveResource_capacity_PCMRandomVariable property
        /// </summary>
        private sealed class PassiveResource_capacity_PCMRandomVariableProxy : ModelPropertyChange<IPCMRandomVariable, IPassiveResource>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public PassiveResource_capacity_PCMRandomVariableProxy(IPCMRandomVariable modelElement) : 
                    base(modelElement, "passiveResource_capacity_PCMRandomVariable")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IPassiveResource Value
            {
                get
                {
                    return this.ModelElement.PassiveResource_capacity_PCMRandomVariable;
                }
                set
                {
                    this.ModelElement.PassiveResource_capacity_PCMRandomVariable = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the variableCharacterisation_Specification property
        /// </summary>
        private sealed class VariableCharacterisation_SpecificationProxy : ModelPropertyChange<IPCMRandomVariable, IVariableCharacterisation>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public VariableCharacterisation_SpecificationProxy(IPCMRandomVariable modelElement) : 
                    base(modelElement, "variableCharacterisation_Specification")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IVariableCharacterisation Value
            {
                get
                {
                    return this.ModelElement.VariableCharacterisation_Specification;
                }
                set
                {
                    this.ModelElement.VariableCharacterisation_Specification = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the infrastructureCall__PCMRandomVariable property
        /// </summary>
        private sealed class InfrastructureCall__PCMRandomVariableProxy : ModelPropertyChange<IPCMRandomVariable, IInfrastructureCall>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public InfrastructureCall__PCMRandomVariableProxy(IPCMRandomVariable modelElement) : 
                    base(modelElement, "infrastructureCall__PCMRandomVariable")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IInfrastructureCall Value
            {
                get
                {
                    return this.ModelElement.InfrastructureCall__PCMRandomVariable;
                }
                set
                {
                    this.ModelElement.InfrastructureCall__PCMRandomVariable = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the resourceCall__PCMRandomVariable property
        /// </summary>
        private sealed class ResourceCall__PCMRandomVariableProxy : ModelPropertyChange<IPCMRandomVariable, IResourceCall>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ResourceCall__PCMRandomVariableProxy(IPCMRandomVariable modelElement) : 
                    base(modelElement, "resourceCall__PCMRandomVariable")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IResourceCall Value
            {
                get
                {
                    return this.ModelElement.ResourceCall__PCMRandomVariable;
                }
                set
                {
                    this.ModelElement.ResourceCall__PCMRandomVariable = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the parametricResourceDemand_PCMRandomVariable property
        /// </summary>
        private sealed class ParametricResourceDemand_PCMRandomVariableProxy : ModelPropertyChange<IPCMRandomVariable, IParametricResourceDemand>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ParametricResourceDemand_PCMRandomVariableProxy(IPCMRandomVariable modelElement) : 
                    base(modelElement, "parametricResourceDemand_PCMRandomVariable")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IParametricResourceDemand Value
            {
                get
                {
                    return this.ModelElement.ParametricResourceDemand_PCMRandomVariable;
                }
                set
                {
                    this.ModelElement.ParametricResourceDemand_PCMRandomVariable = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the loopAction_PCMRandomVariable property
        /// </summary>
        private sealed class LoopAction_PCMRandomVariableProxy : ModelPropertyChange<IPCMRandomVariable, ILoopAction>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public LoopAction_PCMRandomVariableProxy(IPCMRandomVariable modelElement) : 
                    base(modelElement, "loopAction_PCMRandomVariable")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ILoopAction Value
            {
                get
                {
                    return this.ModelElement.LoopAction_PCMRandomVariable;
                }
                set
                {
                    this.ModelElement.LoopAction_PCMRandomVariable = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the guardedBranchTransition_PCMRandomVariable property
        /// </summary>
        private sealed class GuardedBranchTransition_PCMRandomVariableProxy : ModelPropertyChange<IPCMRandomVariable, IGuardedBranchTransition>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public GuardedBranchTransition_PCMRandomVariableProxy(IPCMRandomVariable modelElement) : 
                    base(modelElement, "guardedBranchTransition_PCMRandomVariable")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IGuardedBranchTransition Value
            {
                get
                {
                    return this.ModelElement.GuardedBranchTransition_PCMRandomVariable;
                }
                set
                {
                    this.ModelElement.GuardedBranchTransition_PCMRandomVariable = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the specifiedExecutionTime_PCMRandomVariable property
        /// </summary>
        private sealed class SpecifiedExecutionTime_PCMRandomVariableProxy : ModelPropertyChange<IPCMRandomVariable, ISpecifiedExecutionTime>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public SpecifiedExecutionTime_PCMRandomVariableProxy(IPCMRandomVariable modelElement) : 
                    base(modelElement, "specifiedExecutionTime_PCMRandomVariable")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ISpecifiedExecutionTime Value
            {
                get
                {
                    return this.ModelElement.SpecifiedExecutionTime_PCMRandomVariable;
                }
                set
                {
                    this.ModelElement.SpecifiedExecutionTime_PCMRandomVariable = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the eventChannelSinkConnector__FilterCondition property
        /// </summary>
        private sealed class EventChannelSinkConnector__FilterConditionProxy : ModelPropertyChange<IPCMRandomVariable, IEventChannelSinkConnector>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public EventChannelSinkConnector__FilterConditionProxy(IPCMRandomVariable modelElement) : 
                    base(modelElement, "eventChannelSinkConnector__FilterCondition")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IEventChannelSinkConnector Value
            {
                get
                {
                    return this.ModelElement.EventChannelSinkConnector__FilterCondition;
                }
                set
                {
                    this.ModelElement.EventChannelSinkConnector__FilterCondition = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the assemblyEventConnector__FilterCondition property
        /// </summary>
        private sealed class AssemblyEventConnector__FilterConditionProxy : ModelPropertyChange<IPCMRandomVariable, IAssemblyEventConnector>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public AssemblyEventConnector__FilterConditionProxy(IPCMRandomVariable modelElement) : 
                    base(modelElement, "assemblyEventConnector__FilterCondition")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IAssemblyEventConnector Value
            {
                get
                {
                    return this.ModelElement.AssemblyEventConnector__FilterCondition;
                }
                set
                {
                    this.ModelElement.AssemblyEventConnector__FilterCondition = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the loop_LoopIteration property
        /// </summary>
        private sealed class Loop_LoopIterationProxy : ModelPropertyChange<IPCMRandomVariable, ILoop>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Loop_LoopIterationProxy(IPCMRandomVariable modelElement) : 
                    base(modelElement, "loop_LoopIteration")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ILoop Value
            {
                get
                {
                    return this.ModelElement.Loop_LoopIteration;
                }
                set
                {
                    this.ModelElement.Loop_LoopIteration = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the openWorkload_PCMRandomVariable property
        /// </summary>
        private sealed class OpenWorkload_PCMRandomVariableProxy : ModelPropertyChange<IPCMRandomVariable, IOpenWorkload>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public OpenWorkload_PCMRandomVariableProxy(IPCMRandomVariable modelElement) : 
                    base(modelElement, "openWorkload_PCMRandomVariable")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IOpenWorkload Value
            {
                get
                {
                    return this.ModelElement.OpenWorkload_PCMRandomVariable;
                }
                set
                {
                    this.ModelElement.OpenWorkload_PCMRandomVariable = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the delay_TimeSpecification property
        /// </summary>
        private sealed class Delay_TimeSpecificationProxy : ModelPropertyChange<IPCMRandomVariable, IDelay>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Delay_TimeSpecificationProxy(IPCMRandomVariable modelElement) : 
                    base(modelElement, "delay_TimeSpecification")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IDelay Value
            {
                get
                {
                    return this.ModelElement.Delay_TimeSpecification;
                }
                set
                {
                    this.ModelElement.Delay_TimeSpecification = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the communicationLinkResourceSpecifcation_throughput_PCMRandomVariable property
        /// </summary>
        private sealed class CommunicationLinkResourceSpecifcation_throughput_PCMRandomVariableProxy : ModelPropertyChange<IPCMRandomVariable, ICommunicationLinkResourceSpecification>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public CommunicationLinkResourceSpecifcation_throughput_PCMRandomVariableProxy(IPCMRandomVariable modelElement) : 
                    base(modelElement, "communicationLinkResourceSpecifcation_throughput_PCMRandomVariable")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ICommunicationLinkResourceSpecification Value
            {
                get
                {
                    return this.ModelElement.CommunicationLinkResourceSpecifcation_throughput_PCMRandomVariable;
                }
                set
                {
                    this.ModelElement.CommunicationLinkResourceSpecifcation_throughput_PCMRandomVariable = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the processingResourceSpecification_processingRate_PCMRandomVariable property
        /// </summary>
        private sealed class ProcessingResourceSpecification_processingRate_PCMRandomVariableProxy : ModelPropertyChange<IPCMRandomVariable, IProcessingResourceSpecification>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ProcessingResourceSpecification_processingRate_PCMRandomVariableProxy(IPCMRandomVariable modelElement) : 
                    base(modelElement, "processingResourceSpecification_processingRate_PCMRandomVariable")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IProcessingResourceSpecification Value
            {
                get
                {
                    return this.ModelElement.ProcessingResourceSpecification_processingRate_PCMRandomVariable;
                }
                set
                {
                    this.ModelElement.ProcessingResourceSpecification_processingRate_PCMRandomVariable = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the communicationLinkResourceSpecification_latency_PCMRandomVariable property
        /// </summary>
        private sealed class CommunicationLinkResourceSpecification_latency_PCMRandomVariableProxy : ModelPropertyChange<IPCMRandomVariable, ICommunicationLinkResourceSpecification>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public CommunicationLinkResourceSpecification_latency_PCMRandomVariableProxy(IPCMRandomVariable modelElement) : 
                    base(modelElement, "communicationLinkResourceSpecification_latency_PCMRandomVariable")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ICommunicationLinkResourceSpecification Value
            {
                get
                {
                    return this.ModelElement.CommunicationLinkResourceSpecification_latency_PCMRandomVariable;
                }
                set
                {
                    this.ModelElement.CommunicationLinkResourceSpecification_latency_PCMRandomVariable = value;
                }
            }
        }
    }
}

