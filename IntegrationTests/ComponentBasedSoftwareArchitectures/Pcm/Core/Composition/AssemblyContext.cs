//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMFExamples.Pcm.Core;
using NMFExamples.Pcm.Core.Entity;
using NMFExamples.Pcm.Parameter;
using NMFExamples.Pcm.Repository;
using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using global::System.Collections;
using global::System.Collections.Generic;
using global::System.Collections.ObjectModel;
using global::System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;

namespace NMFExamples.Pcm.Core.Composition
{
    
    
    /// <summary>
    /// The default implementation of the AssemblyContext class
    /// </summary>
    [XmlNamespaceAttribute("http://sdq.ipd.uka.de/PalladioComponentModel/Core/Composition/5.0")]
    [XmlNamespacePrefixAttribute("composition")]
    [ModelRepresentationClassAttribute("http://sdq.ipd.uka.de/PalladioComponentModel/5.0#//core/composition/AssemblyConte" +
        "xt")]
    [DebuggerDisplayAttribute("AssemblyContext {Id}")]
    public partial class AssemblyContext : NMFExamples.Pcm.Core.Entity.Entity, IAssemblyContext, IModelElement
    {
        
        private static Lazy<ITypedElement> _parentStructure__AssemblyContextReference = new Lazy<ITypedElement>(RetrieveParentStructure__AssemblyContextReference);
        
        private static Lazy<ITypedElement> _encapsulatedComponent__AssemblyContextReference = new Lazy<ITypedElement>(RetrieveEncapsulatedComponent__AssemblyContextReference);
        
        /// <summary>
        /// The backing field for the EncapsulatedComponent__AssemblyContext property
        /// </summary>
        private IRepositoryComponent _encapsulatedComponent__AssemblyContext;
        
        private static Lazy<ITypedElement> _configParameterUsages__AssemblyContextReference = new Lazy<ITypedElement>(RetrieveConfigParameterUsages__AssemblyContextReference);
        
        /// <summary>
        /// The backing field for the ConfigParameterUsages__AssemblyContext property
        /// </summary>
        private AssemblyContextConfigParameterUsages__AssemblyContextCollection _configParameterUsages__AssemblyContext;
        
        private static IClass _classInstance;
        
        public AssemblyContext()
        {
            this._configParameterUsages__AssemblyContext = new AssemblyContextConfigParameterUsages__AssemblyContextCollection(this);
            this._configParameterUsages__AssemblyContext.CollectionChanging += this.ConfigParameterUsages__AssemblyContextCollectionChanging;
            this._configParameterUsages__AssemblyContext.CollectionChanged += this.ConfigParameterUsages__AssemblyContextCollectionChanged;
        }
        
        /// <summary>
        /// The parentStructure__AssemblyContext property
        /// </summary>
        [XmlElementNameAttribute("parentStructure__AssemblyContext")]
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Hidden)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("assemblyContexts__ComposedStructure")]
        public IComposedStructure ParentStructure__AssemblyContext
        {
            get
            {
                return ModelHelper.CastAs<IComposedStructure>(this.Parent);
            }
            set
            {
                this.Parent = value;
            }
        }
        
        /// <summary>
        /// The encapsulatedComponent__AssemblyContext property
        /// </summary>
        [XmlElementNameAttribute("encapsulatedComponent__AssemblyContext")]
        [XmlAttributeAttribute(true)]
        public IRepositoryComponent EncapsulatedComponent__AssemblyContext
        {
            get
            {
                return this._encapsulatedComponent__AssemblyContext;
            }
            set
            {
                if ((this._encapsulatedComponent__AssemblyContext != value))
                {
                    IRepositoryComponent old = this._encapsulatedComponent__AssemblyContext;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnEncapsulatedComponent__AssemblyContextChanging(e);
                    this.OnPropertyChanging("EncapsulatedComponent__AssemblyContext", e, _encapsulatedComponent__AssemblyContextReference);
                    this._encapsulatedComponent__AssemblyContext = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetEncapsulatedComponent__AssemblyContext;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetEncapsulatedComponent__AssemblyContext;
                    }
                    this.OnEncapsulatedComponent__AssemblyContextChanged(e);
                    this.OnPropertyChanged("EncapsulatedComponent__AssemblyContext", e, _encapsulatedComponent__AssemblyContextReference);
                }
            }
        }
        
        /// <summary>
        /// The configParameterUsages__AssemblyContext property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlElementNameAttribute("configParameterUsages__AssemblyContext")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [XmlOppositeAttribute("assemblyContext__VariableUsage")]
        [ConstantAttribute()]
        public IListExpression<IVariableUsage> ConfigParameterUsages__AssemblyContext
        {
            get
            {
                return this._configParameterUsages__AssemblyContext;
            }
        }
        
        /// <summary>
        /// Gets the child model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> Children
        {
            get
            {
                return base.Children.Concat(new AssemblyContextChildrenCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new AssemblyContextReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://sdq.ipd.uka.de/PalladioComponentModel/5.0#//core/composition/AssemblyConte" +
                            "xt")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the ParentStructure__AssemblyContext property changes its value
        /// </summary>
        public event global::System.EventHandler<ValueChangedEventArgs> ParentStructure__AssemblyContextChanging;
        
        /// <summary>
        /// Gets fired when the ParentStructure__AssemblyContext property changed its value
        /// </summary>
        public event global::System.EventHandler<ValueChangedEventArgs> ParentStructure__AssemblyContextChanged;
        
        /// <summary>
        /// Gets fired before the EncapsulatedComponent__AssemblyContext property changes its value
        /// </summary>
        public event global::System.EventHandler<ValueChangedEventArgs> EncapsulatedComponent__AssemblyContextChanging;
        
        /// <summary>
        /// Gets fired when the EncapsulatedComponent__AssemblyContext property changed its value
        /// </summary>
        public event global::System.EventHandler<ValueChangedEventArgs> EncapsulatedComponent__AssemblyContextChanged;
        
        private static ITypedElement RetrieveParentStructure__AssemblyContextReference()
        {
            return ((ITypedElement)(((ModelElement)(NMFExamples.Pcm.Core.Composition.AssemblyContext.ClassInstance)).Resolve("parentStructure__AssemblyContext")));
        }
        
        /// <summary>
        /// Raises the ParentStructure__AssemblyContextChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnParentStructure__AssemblyContextChanging(ValueChangedEventArgs eventArgs)
        {
            global::System.EventHandler<ValueChangedEventArgs> handler = this.ParentStructure__AssemblyContextChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Gets called when the parent model element of the current model element is about to change
        /// </summary>
        /// <param name="oldParent">The old parent model element</param>
        /// <param name="newParent">The new parent model element</param>
        protected override void OnParentChanging(IModelElement newParent, IModelElement oldParent)
        {
            IComposedStructure oldParentStructure__AssemblyContext = ModelHelper.CastAs<IComposedStructure>(oldParent);
            IComposedStructure newParentStructure__AssemblyContext = ModelHelper.CastAs<IComposedStructure>(newParent);
            ValueChangedEventArgs e = new ValueChangedEventArgs(oldParentStructure__AssemblyContext, newParentStructure__AssemblyContext);
            this.OnParentStructure__AssemblyContextChanging(e);
            this.OnPropertyChanging("ParentStructure__AssemblyContext", e, _parentStructure__AssemblyContextReference);
        }
        
        /// <summary>
        /// Raises the ParentStructure__AssemblyContextChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnParentStructure__AssemblyContextChanged(ValueChangedEventArgs eventArgs)
        {
            global::System.EventHandler<ValueChangedEventArgs> handler = this.ParentStructure__AssemblyContextChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Gets called when the parent model element of the current model element changes
        /// </summary>
        /// <param name="oldParent">The old parent model element</param>
        /// <param name="newParent">The new parent model element</param>
        protected override void OnParentChanged(IModelElement newParent, IModelElement oldParent)
        {
            IComposedStructure oldParentStructure__AssemblyContext = ModelHelper.CastAs<IComposedStructure>(oldParent);
            IComposedStructure newParentStructure__AssemblyContext = ModelHelper.CastAs<IComposedStructure>(newParent);
            if ((oldParentStructure__AssemblyContext != null))
            {
                oldParentStructure__AssemblyContext.AssemblyContexts__ComposedStructure.Remove(this);
            }
            if ((newParentStructure__AssemblyContext != null))
            {
                newParentStructure__AssemblyContext.AssemblyContexts__ComposedStructure.Add(this);
            }
            ValueChangedEventArgs e = new ValueChangedEventArgs(oldParentStructure__AssemblyContext, newParentStructure__AssemblyContext);
            this.OnParentStructure__AssemblyContextChanged(e);
            this.OnPropertyChanged("ParentStructure__AssemblyContext", e, _parentStructure__AssemblyContextReference);
            base.OnParentChanged(newParent, oldParent);
        }
        
        private static ITypedElement RetrieveEncapsulatedComponent__AssemblyContextReference()
        {
            return ((ITypedElement)(((ModelElement)(NMFExamples.Pcm.Core.Composition.AssemblyContext.ClassInstance)).Resolve("encapsulatedComponent__AssemblyContext")));
        }
        
        /// <summary>
        /// Raises the EncapsulatedComponent__AssemblyContextChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnEncapsulatedComponent__AssemblyContextChanging(ValueChangedEventArgs eventArgs)
        {
            global::System.EventHandler<ValueChangedEventArgs> handler = this.EncapsulatedComponent__AssemblyContextChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the EncapsulatedComponent__AssemblyContextChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnEncapsulatedComponent__AssemblyContextChanged(ValueChangedEventArgs eventArgs)
        {
            global::System.EventHandler<ValueChangedEventArgs> handler = this.EncapsulatedComponent__AssemblyContextChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the EncapsulatedComponent__AssemblyContext property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetEncapsulatedComponent__AssemblyContext(object sender, global::System.EventArgs eventArgs)
        {
            this.EncapsulatedComponent__AssemblyContext = null;
        }
        
        private static ITypedElement RetrieveConfigParameterUsages__AssemblyContextReference()
        {
            return ((ITypedElement)(((ModelElement)(NMFExamples.Pcm.Core.Composition.AssemblyContext.ClassInstance)).Resolve("configParameterUsages__AssemblyContext")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the ConfigParameterUsages__AssemblyContext property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ConfigParameterUsages__AssemblyContextCollectionChanging(object sender, NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("ConfigParameterUsages__AssemblyContext", e, _configParameterUsages__AssemblyContextReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the ConfigParameterUsages__AssemblyContext property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ConfigParameterUsages__AssemblyContextCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("ConfigParameterUsages__AssemblyContext", e, _configParameterUsages__AssemblyContextReference);
        }
        
        /// <summary>
        /// Gets the relative URI fragment for the given child model element
        /// </summary>
        /// <returns>A fragment of the relative URI</returns>
        /// <param name="element">The element that should be looked for</param>
        protected override string GetRelativePathForNonIdentifiedChild(IModelElement element)
        {
            int configParameterUsages__AssemblyContextIndex = ModelHelper.IndexOfReference(this.ConfigParameterUsages__AssemblyContext, element);
            if ((configParameterUsages__AssemblyContextIndex != -1))
            {
                return ModelHelper.CreatePath("configParameterUsages__AssemblyContext", configParameterUsages__AssemblyContextIndex);
            }
            return base.GetRelativePathForNonIdentifiedChild(element);
        }
        
        /// <summary>
        /// Resolves the given URI to a child model element
        /// </summary>
        /// <returns>The model element or null if it could not be found</returns>
        /// <param name="reference">The requested reference name</param>
        /// <param name="index">The index of this reference</param>
        protected override IModelElement GetModelElementForReference(string reference, int index)
        {
            if ((reference == "CONFIGPARAMETERUSAGES__ASSEMBLYCONTEXT"))
            {
                if ((index < this.ConfigParameterUsages__AssemblyContext.Count))
                {
                    return this.ConfigParameterUsages__AssemblyContext[index];
                }
                else
                {
                    return null;
                }
            }
            return base.GetModelElementForReference(reference, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override global::System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "CONFIGPARAMETERUSAGES__ASSEMBLYCONTEXT"))
            {
                return this._configParameterUsages__AssemblyContext;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "PARENTSTRUCTURE__ASSEMBLYCONTEXT"))
            {
                this.ParentStructure__AssemblyContext = ((IComposedStructure)(value));
                return;
            }
            if ((feature == "ENCAPSULATEDCOMPONENT__ASSEMBLYCONTEXT"))
            {
                this.EncapsulatedComponent__AssemblyContext = ((IRepositoryComponent)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "ParentStructure__AssemblyContext"))
            {
                return new ParentStructure__AssemblyContextProxy(this);
            }
            if ((attribute == "EncapsulatedComponent__AssemblyContext"))
            {
                return new EncapsulatedComponent__AssemblyContextProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "ParentStructure__AssemblyContext"))
            {
                return new ParentStructure__AssemblyContextProxy(this);
            }
            if ((reference == "EncapsulatedComponent__AssemblyContext"))
            {
                return new EncapsulatedComponent__AssemblyContextProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the property name for the given container
        /// </summary>
        /// <returns>The name of the respective container reference</returns>
        /// <param name="container">The container object</param>
        protected override string GetCompositionName(object container)
        {
            if ((container == this._configParameterUsages__AssemblyContext))
            {
                return "configParameterUsages__AssemblyContext";
            }
            return base.GetCompositionName(container);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://sdq.ipd.uka.de/PalladioComponentModel/5.0#//core/composition/AssemblyConte" +
                        "xt")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the AssemblyContext class
        /// </summary>
        public class AssemblyContextChildrenCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private AssemblyContext _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public AssemblyContextChildrenCollection(AssemblyContext parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.ConfigParameterUsages__AssemblyContext.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.ConfigParameterUsages__AssemblyContext.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.ConfigParameterUsages__AssemblyContext.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IVariableUsage configParameterUsages__AssemblyContextCasted = item.As<IVariableUsage>();
                if ((configParameterUsages__AssemblyContextCasted != null))
                {
                    this._parent.ConfigParameterUsages__AssemblyContext.Add(configParameterUsages__AssemblyContextCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.ConfigParameterUsages__AssemblyContext.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.ConfigParameterUsages__AssemblyContext.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> configParameterUsages__AssemblyContextEnumerator = this._parent.ConfigParameterUsages__AssemblyContext.GetEnumerator();
                try
                {
                    for (
                    ; configParameterUsages__AssemblyContextEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = configParameterUsages__AssemblyContextEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    configParameterUsages__AssemblyContextEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IVariableUsage variableUsageItem = item.As<IVariableUsage>();
                if (((variableUsageItem != null) 
                            && this._parent.ConfigParameterUsages__AssemblyContext.Remove(variableUsageItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.ConfigParameterUsages__AssemblyContext).GetEnumerator();
            }
        }
        
        /// <summary>
        /// The collection class to to represent the children of the AssemblyContext class
        /// </summary>
        public class AssemblyContextReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private AssemblyContext _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public AssemblyContextReferencedElementsCollection(AssemblyContext parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.ParentStructure__AssemblyContext != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.EncapsulatedComponent__AssemblyContext != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.ConfigParameterUsages__AssemblyContext.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.ParentStructure__AssemblyContextChanged += this.PropagateValueChanges;
                this._parent.EncapsulatedComponent__AssemblyContextChanged += this.PropagateValueChanges;
                this._parent.ConfigParameterUsages__AssemblyContext.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.ParentStructure__AssemblyContextChanged -= this.PropagateValueChanges;
                this._parent.EncapsulatedComponent__AssemblyContextChanged -= this.PropagateValueChanges;
                this._parent.ConfigParameterUsages__AssemblyContext.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.ParentStructure__AssemblyContext == null))
                {
                    IComposedStructure parentStructure__AssemblyContextCasted = item.As<IComposedStructure>();
                    if ((parentStructure__AssemblyContextCasted != null))
                    {
                        this._parent.ParentStructure__AssemblyContext = parentStructure__AssemblyContextCasted;
                        return;
                    }
                }
                if ((this._parent.EncapsulatedComponent__AssemblyContext == null))
                {
                    IRepositoryComponent encapsulatedComponent__AssemblyContextCasted = item.As<IRepositoryComponent>();
                    if ((encapsulatedComponent__AssemblyContextCasted != null))
                    {
                        this._parent.EncapsulatedComponent__AssemblyContext = encapsulatedComponent__AssemblyContextCasted;
                        return;
                    }
                }
                IVariableUsage configParameterUsages__AssemblyContextCasted = item.As<IVariableUsage>();
                if ((configParameterUsages__AssemblyContextCasted != null))
                {
                    this._parent.ConfigParameterUsages__AssemblyContext.Add(configParameterUsages__AssemblyContextCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.ParentStructure__AssemblyContext = null;
                this._parent.EncapsulatedComponent__AssemblyContext = null;
                this._parent.ConfigParameterUsages__AssemblyContext.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.ParentStructure__AssemblyContext))
                {
                    return true;
                }
                if ((item == this._parent.EncapsulatedComponent__AssemblyContext))
                {
                    return true;
                }
                if (this._parent.ConfigParameterUsages__AssemblyContext.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.ParentStructure__AssemblyContext != null))
                {
                    array[arrayIndex] = this._parent.ParentStructure__AssemblyContext;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.EncapsulatedComponent__AssemblyContext != null))
                {
                    array[arrayIndex] = this._parent.EncapsulatedComponent__AssemblyContext;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> configParameterUsages__AssemblyContextEnumerator = this._parent.ConfigParameterUsages__AssemblyContext.GetEnumerator();
                try
                {
                    for (
                    ; configParameterUsages__AssemblyContextEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = configParameterUsages__AssemblyContextEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    configParameterUsages__AssemblyContextEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.ParentStructure__AssemblyContext == item))
                {
                    this._parent.ParentStructure__AssemblyContext = null;
                    return true;
                }
                if ((this._parent.EncapsulatedComponent__AssemblyContext == item))
                {
                    this._parent.EncapsulatedComponent__AssemblyContext = null;
                    return true;
                }
                IVariableUsage variableUsageItem = item.As<IVariableUsage>();
                if (((variableUsageItem != null) 
                            && this._parent.ConfigParameterUsages__AssemblyContext.Remove(variableUsageItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.ParentStructure__AssemblyContext).Concat(this._parent.EncapsulatedComponent__AssemblyContext).Concat(this._parent.ConfigParameterUsages__AssemblyContext).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the parentStructure__AssemblyContext property
        /// </summary>
        private sealed class ParentStructure__AssemblyContextProxy : ModelPropertyChange<IAssemblyContext, IComposedStructure>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ParentStructure__AssemblyContextProxy(IAssemblyContext modelElement) : 
                    base(modelElement, "parentStructure__AssemblyContext")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IComposedStructure Value
            {
                get
                {
                    return this.ModelElement.ParentStructure__AssemblyContext;
                }
                set
                {
                    this.ModelElement.ParentStructure__AssemblyContext = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the encapsulatedComponent__AssemblyContext property
        /// </summary>
        private sealed class EncapsulatedComponent__AssemblyContextProxy : ModelPropertyChange<IAssemblyContext, IRepositoryComponent>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public EncapsulatedComponent__AssemblyContextProxy(IAssemblyContext modelElement) : 
                    base(modelElement, "encapsulatedComponent__AssemblyContext")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IRepositoryComponent Value
            {
                get
                {
                    return this.ModelElement.EncapsulatedComponent__AssemblyContext;
                }
                set
                {
                    this.ModelElement.EncapsulatedComponent__AssemblyContext = value;
                }
            }
        }
    }
}

