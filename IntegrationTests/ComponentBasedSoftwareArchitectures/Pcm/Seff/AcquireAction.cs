//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMFExamples.Identifier;
using NMFExamples.Pcm.Core;
using NMFExamples.Pcm.Core.Entity;
using NMFExamples.Pcm.Parameter;
using NMFExamples.Pcm.Reliability;
using NMFExamples.Pcm.Repository;
using NMFExamples.Pcm.Seff.Seff_performance;
using NMFExamples.Pcm.Seff.Seff_reliability;
using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using global::System.Collections;
using global::System.Collections.Generic;
using global::System.Collections.ObjectModel;
using global::System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;

namespace NMFExamples.Pcm.Seff
{
    
    
    /// <summary>
    /// The default implementation of the AcquireAction class
    /// </summary>
    [XmlNamespaceAttribute("http://sdq.ipd.uka.de/PalladioComponentModel/SEFF/5.0")]
    [XmlNamespacePrefixAttribute("seff")]
    [ModelRepresentationClassAttribute("http://sdq.ipd.uka.de/PalladioComponentModel/5.0#//seff/AcquireAction")]
    [DebuggerDisplayAttribute("AcquireAction {Id}")]
    public partial class AcquireAction : AbstractInternalControlFlowAction, IAcquireAction, IModelElement
    {
        
        /// <summary>
        /// The backing field for the Timeout property
        /// </summary>
        private bool _timeout;
        
        private static Lazy<ITypedElement> _timeoutAttribute = new Lazy<ITypedElement>(RetrieveTimeoutAttribute);
        
        /// <summary>
        /// The backing field for the TimeoutValue property
        /// </summary>
        private double _timeoutValue;
        
        private static Lazy<ITypedElement> _timeoutValueAttribute = new Lazy<ITypedElement>(RetrieveTimeoutValueAttribute);
        
        private static Lazy<ITypedElement> _passiveresource_AcquireActionReference = new Lazy<ITypedElement>(RetrievePassiveresource_AcquireActionReference);
        
        /// <summary>
        /// The backing field for the Passiveresource_AcquireAction property
        /// </summary>
        private IPassiveResource _passiveresource_AcquireAction;
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The timeout property
        /// </summary>
        [XmlElementNameAttribute("timeout")]
        [XmlAttributeAttribute(true)]
        public bool Timeout
        {
            get
            {
                return this._timeout;
            }
            set
            {
                if ((this._timeout != value))
                {
                    bool old = this._timeout;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTimeoutChanging(e);
                    this.OnPropertyChanging("Timeout", e, _timeoutAttribute);
                    this._timeout = value;
                    this.OnTimeoutChanged(e);
                    this.OnPropertyChanged("Timeout", e, _timeoutAttribute);
                }
            }
        }
        
        /// <summary>
        /// The timeoutValue property
        /// </summary>
        [XmlElementNameAttribute("timeoutValue")]
        [XmlAttributeAttribute(true)]
        public double TimeoutValue
        {
            get
            {
                return this._timeoutValue;
            }
            set
            {
                if ((this._timeoutValue != value))
                {
                    double old = this._timeoutValue;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTimeoutValueChanging(e);
                    this.OnPropertyChanging("TimeoutValue", e, _timeoutValueAttribute);
                    this._timeoutValue = value;
                    this.OnTimeoutValueChanged(e);
                    this.OnPropertyChanged("TimeoutValue", e, _timeoutValueAttribute);
                }
            }
        }
        
        /// <summary>
        /// The passiveresource_AcquireAction property
        /// </summary>
        [XmlElementNameAttribute("passiveresource_AcquireAction")]
        [XmlAttributeAttribute(true)]
        public IPassiveResource Passiveresource_AcquireAction
        {
            get
            {
                return this._passiveresource_AcquireAction;
            }
            set
            {
                if ((this._passiveresource_AcquireAction != value))
                {
                    IPassiveResource old = this._passiveresource_AcquireAction;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPassiveresource_AcquireActionChanging(e);
                    this.OnPropertyChanging("Passiveresource_AcquireAction", e, _passiveresource_AcquireActionReference);
                    this._passiveresource_AcquireAction = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetPassiveresource_AcquireAction;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetPassiveresource_AcquireAction;
                    }
                    this.OnPassiveresource_AcquireActionChanged(e);
                    this.OnPropertyChanged("Passiveresource_AcquireAction", e, _passiveresource_AcquireActionReference);
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new AcquireActionReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://sdq.ipd.uka.de/PalladioComponentModel/5.0#//seff/AcquireAction")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the Timeout property changes its value
        /// </summary>
        public event global::System.EventHandler<ValueChangedEventArgs> TimeoutChanging;
        
        /// <summary>
        /// Gets fired when the Timeout property changed its value
        /// </summary>
        public event global::System.EventHandler<ValueChangedEventArgs> TimeoutChanged;
        
        /// <summary>
        /// Gets fired before the TimeoutValue property changes its value
        /// </summary>
        public event global::System.EventHandler<ValueChangedEventArgs> TimeoutValueChanging;
        
        /// <summary>
        /// Gets fired when the TimeoutValue property changed its value
        /// </summary>
        public event global::System.EventHandler<ValueChangedEventArgs> TimeoutValueChanged;
        
        /// <summary>
        /// Gets fired before the Passiveresource_AcquireAction property changes its value
        /// </summary>
        public event global::System.EventHandler<ValueChangedEventArgs> Passiveresource_AcquireActionChanging;
        
        /// <summary>
        /// Gets fired when the Passiveresource_AcquireAction property changed its value
        /// </summary>
        public event global::System.EventHandler<ValueChangedEventArgs> Passiveresource_AcquireActionChanged;
        
        private static ITypedElement RetrieveTimeoutAttribute()
        {
            return ((ITypedElement)(((ModelElement)(NMFExamples.Pcm.Seff.AcquireAction.ClassInstance)).Resolve("timeout")));
        }
        
        /// <summary>
        /// Raises the TimeoutChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTimeoutChanging(ValueChangedEventArgs eventArgs)
        {
            global::System.EventHandler<ValueChangedEventArgs> handler = this.TimeoutChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the TimeoutChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTimeoutChanged(ValueChangedEventArgs eventArgs)
        {
            global::System.EventHandler<ValueChangedEventArgs> handler = this.TimeoutChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveTimeoutValueAttribute()
        {
            return ((ITypedElement)(((ModelElement)(NMFExamples.Pcm.Seff.AcquireAction.ClassInstance)).Resolve("timeoutValue")));
        }
        
        /// <summary>
        /// Raises the TimeoutValueChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTimeoutValueChanging(ValueChangedEventArgs eventArgs)
        {
            global::System.EventHandler<ValueChangedEventArgs> handler = this.TimeoutValueChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the TimeoutValueChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTimeoutValueChanged(ValueChangedEventArgs eventArgs)
        {
            global::System.EventHandler<ValueChangedEventArgs> handler = this.TimeoutValueChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrievePassiveresource_AcquireActionReference()
        {
            return ((ITypedElement)(((ModelElement)(NMFExamples.Pcm.Seff.AcquireAction.ClassInstance)).Resolve("passiveresource_AcquireAction")));
        }
        
        /// <summary>
        /// Raises the Passiveresource_AcquireActionChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPassiveresource_AcquireActionChanging(ValueChangedEventArgs eventArgs)
        {
            global::System.EventHandler<ValueChangedEventArgs> handler = this.Passiveresource_AcquireActionChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Passiveresource_AcquireActionChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPassiveresource_AcquireActionChanged(ValueChangedEventArgs eventArgs)
        {
            global::System.EventHandler<ValueChangedEventArgs> handler = this.Passiveresource_AcquireActionChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Passiveresource_AcquireAction property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetPassiveresource_AcquireAction(object sender, global::System.EventArgs eventArgs)
        {
            this.Passiveresource_AcquireAction = null;
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "TIMEOUT"))
            {
                return this.Timeout;
            }
            if ((attribute == "TIMEOUTVALUE"))
            {
                return this.TimeoutValue;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "PASSIVERESOURCE_ACQUIREACTION"))
            {
                this.Passiveresource_AcquireAction = ((IPassiveResource)(value));
                return;
            }
            if ((feature == "TIMEOUT"))
            {
                this.Timeout = ((bool)(value));
                return;
            }
            if ((feature == "TIMEOUTVALUE"))
            {
                this.TimeoutValue = ((double)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "Passiveresource_AcquireAction"))
            {
                return new Passiveresource_AcquireActionProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "Passiveresource_AcquireAction"))
            {
                return new Passiveresource_AcquireActionProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://sdq.ipd.uka.de/PalladioComponentModel/5.0#//seff/AcquireAction")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the AcquireAction class
        /// </summary>
        public class AcquireActionReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private AcquireAction _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public AcquireActionReferencedElementsCollection(AcquireAction parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.Passiveresource_AcquireAction != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.Passiveresource_AcquireActionChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.Passiveresource_AcquireActionChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.Passiveresource_AcquireAction == null))
                {
                    IPassiveResource passiveresource_AcquireActionCasted = item.As<IPassiveResource>();
                    if ((passiveresource_AcquireActionCasted != null))
                    {
                        this._parent.Passiveresource_AcquireAction = passiveresource_AcquireActionCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Passiveresource_AcquireAction = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.Passiveresource_AcquireAction))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.Passiveresource_AcquireAction != null))
                {
                    array[arrayIndex] = this._parent.Passiveresource_AcquireAction;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.Passiveresource_AcquireAction == item))
                {
                    this._parent.Passiveresource_AcquireAction = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Passiveresource_AcquireAction).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the timeout property
        /// </summary>
        private sealed class TimeoutProxy : ModelPropertyChange<IAcquireAction, bool>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public TimeoutProxy(IAcquireAction modelElement) : 
                    base(modelElement, "timeout")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override bool Value
            {
                get
                {
                    return this.ModelElement.Timeout;
                }
                set
                {
                    this.ModelElement.Timeout = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the timeoutValue property
        /// </summary>
        private sealed class TimeoutValueProxy : ModelPropertyChange<IAcquireAction, double>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public TimeoutValueProxy(IAcquireAction modelElement) : 
                    base(modelElement, "timeoutValue")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override double Value
            {
                get
                {
                    return this.ModelElement.TimeoutValue;
                }
                set
                {
                    this.ModelElement.TimeoutValue = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the passiveresource_AcquireAction property
        /// </summary>
        private sealed class Passiveresource_AcquireActionProxy : ModelPropertyChange<IAcquireAction, IPassiveResource>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Passiveresource_AcquireActionProxy(IAcquireAction modelElement) : 
                    base(modelElement, "passiveresource_AcquireAction")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IPassiveResource Value
            {
                get
                {
                    return this.ModelElement.Passiveresource_AcquireAction;
                }
                set
                {
                    this.ModelElement.Passiveresource_AcquireAction = value;
                }
            }
        }
    }
}

