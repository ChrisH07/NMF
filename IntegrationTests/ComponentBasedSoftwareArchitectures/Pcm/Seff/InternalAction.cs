//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMFExamples.Identifier;
using NMFExamples.Pcm.Core;
using NMFExamples.Pcm.Core.Entity;
using NMFExamples.Pcm.Parameter;
using NMFExamples.Pcm.Reliability;
using NMFExamples.Pcm.Repository;
using NMFExamples.Pcm.Seff.Seff_performance;
using NMFExamples.Pcm.Seff.Seff_reliability;
using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using global::System.Collections;
using global::System.Collections.Generic;
using global::System.Collections.ObjectModel;
using global::System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;

namespace NMFExamples.Pcm.Seff
{
    
    
    /// <summary>
    /// The default implementation of the InternalAction class
    /// </summary>
    [XmlNamespaceAttribute("http://sdq.ipd.uka.de/PalladioComponentModel/SEFF/5.0")]
    [XmlNamespacePrefixAttribute("seff")]
    [ModelRepresentationClassAttribute("http://sdq.ipd.uka.de/PalladioComponentModel/5.0#//seff/InternalAction")]
    [DebuggerDisplayAttribute("InternalAction {Id}")]
    public partial class InternalAction : AbstractInternalControlFlowAction, IInternalAction, IModelElement
    {
        
        private static Lazy<ITypedElement> _internalFailureOccurrenceDescriptions__InternalActionReference = new Lazy<ITypedElement>(RetrieveInternalFailureOccurrenceDescriptions__InternalActionReference);
        
        /// <summary>
        /// The backing field for the InternalFailureOccurrenceDescriptions__InternalAction property
        /// </summary>
        private InternalActionInternalFailureOccurrenceDescriptions__InternalActionCollection _internalFailureOccurrenceDescriptions__InternalAction;
        
        private static IClass _classInstance;
        
        public InternalAction()
        {
            this._internalFailureOccurrenceDescriptions__InternalAction = new InternalActionInternalFailureOccurrenceDescriptions__InternalActionCollection(this);
            this._internalFailureOccurrenceDescriptions__InternalAction.CollectionChanging += this.InternalFailureOccurrenceDescriptions__InternalActionCollectionChanging;
            this._internalFailureOccurrenceDescriptions__InternalAction.CollectionChanged += this.InternalFailureOccurrenceDescriptions__InternalActionCollectionChanged;
        }
        
        /// <summary>
        /// The internalFailureOccurrenceDescriptions__InternalAction property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlElementNameAttribute("internalFailureOccurrenceDescriptions__InternalAction")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [XmlOppositeAttribute("internalAction__InternalFailureOccurrenceDescription")]
        [ConstantAttribute()]
        public IListExpression<IInternalFailureOccurrenceDescription> InternalFailureOccurrenceDescriptions__InternalAction
        {
            get
            {
                return this._internalFailureOccurrenceDescriptions__InternalAction;
            }
        }
        
        /// <summary>
        /// Gets the child model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> Children
        {
            get
            {
                return base.Children.Concat(new InternalActionChildrenCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new InternalActionReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://sdq.ipd.uka.de/PalladioComponentModel/5.0#//seff/InternalAction")));
                }
                return _classInstance;
            }
        }
        
        private static ITypedElement RetrieveInternalFailureOccurrenceDescriptions__InternalActionReference()
        {
            return ((ITypedElement)(((ModelElement)(NMFExamples.Pcm.Seff.InternalAction.ClassInstance)).Resolve("internalFailureOccurrenceDescriptions__InternalAction")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the InternalFailureOccurrenceDescriptions__InternalAction property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void InternalFailureOccurrenceDescriptions__InternalActionCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("InternalFailureOccurrenceDescriptions__InternalAction", e, _internalFailureOccurrenceDescriptions__InternalActionReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the InternalFailureOccurrenceDescriptions__InternalAction property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void InternalFailureOccurrenceDescriptions__InternalActionCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("InternalFailureOccurrenceDescriptions__InternalAction", e, _internalFailureOccurrenceDescriptions__InternalActionReference);
        }
        
        /// <summary>
        /// Gets the relative URI fragment for the given child model element
        /// </summary>
        /// <returns>A fragment of the relative URI</returns>
        /// <param name="element">The element that should be looked for</param>
        protected override string GetRelativePathForNonIdentifiedChild(IModelElement element)
        {
            int internalFailureOccurrenceDescriptions__InternalActionIndex = ModelHelper.IndexOfReference(this.InternalFailureOccurrenceDescriptions__InternalAction, element);
            if ((internalFailureOccurrenceDescriptions__InternalActionIndex != -1))
            {
                return ModelHelper.CreatePath("internalFailureOccurrenceDescriptions__InternalAction", internalFailureOccurrenceDescriptions__InternalActionIndex);
            }
            return base.GetRelativePathForNonIdentifiedChild(element);
        }
        
        /// <summary>
        /// Resolves the given URI to a child model element
        /// </summary>
        /// <returns>The model element or null if it could not be found</returns>
        /// <param name="reference">The requested reference name</param>
        /// <param name="index">The index of this reference</param>
        protected override IModelElement GetModelElementForReference(string reference, int index)
        {
            if ((reference == "INTERNALFAILUREOCCURRENCEDESCRIPTIONS__INTERNALACTION"))
            {
                if ((index < this.InternalFailureOccurrenceDescriptions__InternalAction.Count))
                {
                    return this.InternalFailureOccurrenceDescriptions__InternalAction[index];
                }
                else
                {
                    return null;
                }
            }
            return base.GetModelElementForReference(reference, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override global::System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "INTERNALFAILUREOCCURRENCEDESCRIPTIONS__INTERNALACTION"))
            {
                return this._internalFailureOccurrenceDescriptions__InternalAction;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Gets the property name for the given container
        /// </summary>
        /// <returns>The name of the respective container reference</returns>
        /// <param name="container">The container object</param>
        protected override string GetCompositionName(object container)
        {
            if ((container == this._internalFailureOccurrenceDescriptions__InternalAction))
            {
                return "internalFailureOccurrenceDescriptions__InternalAction";
            }
            return base.GetCompositionName(container);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://sdq.ipd.uka.de/PalladioComponentModel/5.0#//seff/InternalAction")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the InternalAction class
        /// </summary>
        public class InternalActionChildrenCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private InternalAction _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public InternalActionChildrenCollection(InternalAction parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.InternalFailureOccurrenceDescriptions__InternalAction.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.InternalFailureOccurrenceDescriptions__InternalAction.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.InternalFailureOccurrenceDescriptions__InternalAction.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IInternalFailureOccurrenceDescription internalFailureOccurrenceDescriptions__InternalActionCasted = item.As<IInternalFailureOccurrenceDescription>();
                if ((internalFailureOccurrenceDescriptions__InternalActionCasted != null))
                {
                    this._parent.InternalFailureOccurrenceDescriptions__InternalAction.Add(internalFailureOccurrenceDescriptions__InternalActionCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.InternalFailureOccurrenceDescriptions__InternalAction.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.InternalFailureOccurrenceDescriptions__InternalAction.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> internalFailureOccurrenceDescriptions__InternalActionEnumerator = this._parent.InternalFailureOccurrenceDescriptions__InternalAction.GetEnumerator();
                try
                {
                    for (
                    ; internalFailureOccurrenceDescriptions__InternalActionEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = internalFailureOccurrenceDescriptions__InternalActionEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    internalFailureOccurrenceDescriptions__InternalActionEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IInternalFailureOccurrenceDescription internalFailureOccurrenceDescriptionItem = item.As<IInternalFailureOccurrenceDescription>();
                if (((internalFailureOccurrenceDescriptionItem != null) 
                            && this._parent.InternalFailureOccurrenceDescriptions__InternalAction.Remove(internalFailureOccurrenceDescriptionItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.InternalFailureOccurrenceDescriptions__InternalAction).GetEnumerator();
            }
        }
        
        /// <summary>
        /// The collection class to to represent the children of the InternalAction class
        /// </summary>
        public class InternalActionReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private InternalAction _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public InternalActionReferencedElementsCollection(InternalAction parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.InternalFailureOccurrenceDescriptions__InternalAction.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.InternalFailureOccurrenceDescriptions__InternalAction.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.InternalFailureOccurrenceDescriptions__InternalAction.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IInternalFailureOccurrenceDescription internalFailureOccurrenceDescriptions__InternalActionCasted = item.As<IInternalFailureOccurrenceDescription>();
                if ((internalFailureOccurrenceDescriptions__InternalActionCasted != null))
                {
                    this._parent.InternalFailureOccurrenceDescriptions__InternalAction.Add(internalFailureOccurrenceDescriptions__InternalActionCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.InternalFailureOccurrenceDescriptions__InternalAction.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.InternalFailureOccurrenceDescriptions__InternalAction.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> internalFailureOccurrenceDescriptions__InternalActionEnumerator = this._parent.InternalFailureOccurrenceDescriptions__InternalAction.GetEnumerator();
                try
                {
                    for (
                    ; internalFailureOccurrenceDescriptions__InternalActionEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = internalFailureOccurrenceDescriptions__InternalActionEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    internalFailureOccurrenceDescriptions__InternalActionEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IInternalFailureOccurrenceDescription internalFailureOccurrenceDescriptionItem = item.As<IInternalFailureOccurrenceDescription>();
                if (((internalFailureOccurrenceDescriptionItem != null) 
                            && this._parent.InternalFailureOccurrenceDescriptions__InternalAction.Remove(internalFailureOccurrenceDescriptionItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.InternalFailureOccurrenceDescriptions__InternalAction).GetEnumerator();
            }
        }
    }
}

