//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMFExamples.Identifier;
using NMFExamples.Pcm.Core;
using NMFExamples.Pcm.Core.Entity;
using NMFExamples.Pcm.Parameter;
using NMFExamples.Pcm.Reliability;
using NMFExamples.Pcm.Repository;
using NMFExamples.Pcm.Seff.Seff_performance;
using NMFExamples.Pcm.Seff.Seff_reliability;
using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using global::System.Collections;
using global::System.Collections.Generic;
using global::System.Collections.ObjectModel;
using global::System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;

namespace NMFExamples.Pcm.Seff
{
    
    
    /// <summary>
    /// The default implementation of the ResourceDemandingBehaviour class
    /// </summary>
    [XmlNamespaceAttribute("http://sdq.ipd.uka.de/PalladioComponentModel/SEFF/5.0")]
    [XmlNamespacePrefixAttribute("seff")]
    [ModelRepresentationClassAttribute("http://sdq.ipd.uka.de/PalladioComponentModel/5.0#//seff/ResourceDemandingBehaviou" +
        "r")]
    [DebuggerDisplayAttribute("ResourceDemandingBehaviour {Id}")]
    public partial class ResourceDemandingBehaviour : NMFExamples.Identifier.Identifier, IResourceDemandingBehaviour, IModelElement
    {
        
        private static Lazy<ITypedElement> _abstractLoopAction_ResourceDemandingBehaviourReference = new Lazy<ITypedElement>(RetrieveAbstractLoopAction_ResourceDemandingBehaviourReference);
        
        /// <summary>
        /// The backing field for the AbstractLoopAction_ResourceDemandingBehaviour property
        /// </summary>
        private IAbstractLoopAction _abstractLoopAction_ResourceDemandingBehaviour;
        
        private static Lazy<ITypedElement> _abstractBranchTransition_ResourceDemandingBehaviourReference = new Lazy<ITypedElement>(RetrieveAbstractBranchTransition_ResourceDemandingBehaviourReference);
        
        /// <summary>
        /// The backing field for the AbstractBranchTransition_ResourceDemandingBehaviour property
        /// </summary>
        private IAbstractBranchTransition _abstractBranchTransition_ResourceDemandingBehaviour;
        
        private static Lazy<ITypedElement> _steps_BehaviourReference = new Lazy<ITypedElement>(RetrieveSteps_BehaviourReference);
        
        /// <summary>
        /// The backing field for the Steps_Behaviour property
        /// </summary>
        private ResourceDemandingBehaviourSteps_BehaviourCollection _steps_Behaviour;
        
        private static IClass _classInstance;
        
        public ResourceDemandingBehaviour()
        {
            this._steps_Behaviour = new ResourceDemandingBehaviourSteps_BehaviourCollection(this);
            this._steps_Behaviour.CollectionChanging += this.Steps_BehaviourCollectionChanging;
            this._steps_Behaviour.CollectionChanged += this.Steps_BehaviourCollectionChanged;
        }
        
        /// <summary>
        /// The abstractLoopAction_ResourceDemandingBehaviour property
        /// </summary>
        [XmlElementNameAttribute("abstractLoopAction_ResourceDemandingBehaviour")]
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Hidden)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("bodyBehaviour_Loop")]
        public IAbstractLoopAction AbstractLoopAction_ResourceDemandingBehaviour
        {
            get
            {
                return this._abstractLoopAction_ResourceDemandingBehaviour;
            }
            set
            {
                if ((this._abstractLoopAction_ResourceDemandingBehaviour != value))
                {
                    IAbstractLoopAction old = this._abstractLoopAction_ResourceDemandingBehaviour;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnAbstractLoopAction_ResourceDemandingBehaviourChanging(e);
                    this.OnPropertyChanging("AbstractLoopAction_ResourceDemandingBehaviour", e, _abstractLoopAction_ResourceDemandingBehaviourReference);
                    this._abstractLoopAction_ResourceDemandingBehaviour = value;
                    this.Parent = value;
                    if ((old != null))
                    {
                        old.BodyBehaviour_Loop = null;
                        old.Deleted -= this.OnResetAbstractLoopAction_ResourceDemandingBehaviour;
                    }
                    if ((value != null))
                    {
                        value.BodyBehaviour_Loop = this;
                        value.Deleted += this.OnResetAbstractLoopAction_ResourceDemandingBehaviour;
                    }
                    this.OnAbstractLoopAction_ResourceDemandingBehaviourChanged(e);
                    this.OnPropertyChanged("AbstractLoopAction_ResourceDemandingBehaviour", e, _abstractLoopAction_ResourceDemandingBehaviourReference);
                }
            }
        }
        
        /// <summary>
        /// The abstractBranchTransition_ResourceDemandingBehaviour property
        /// </summary>
        [XmlElementNameAttribute("abstractBranchTransition_ResourceDemandingBehaviour")]
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Hidden)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("branchBehaviour_BranchTransition")]
        public IAbstractBranchTransition AbstractBranchTransition_ResourceDemandingBehaviour
        {
            get
            {
                return this._abstractBranchTransition_ResourceDemandingBehaviour;
            }
            set
            {
                if ((this._abstractBranchTransition_ResourceDemandingBehaviour != value))
                {
                    IAbstractBranchTransition old = this._abstractBranchTransition_ResourceDemandingBehaviour;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnAbstractBranchTransition_ResourceDemandingBehaviourChanging(e);
                    this.OnPropertyChanging("AbstractBranchTransition_ResourceDemandingBehaviour", e, _abstractBranchTransition_ResourceDemandingBehaviourReference);
                    this._abstractBranchTransition_ResourceDemandingBehaviour = value;
                    this.Parent = value;
                    if ((old != null))
                    {
                        old.BranchBehaviour_BranchTransition = null;
                        old.Deleted -= this.OnResetAbstractBranchTransition_ResourceDemandingBehaviour;
                    }
                    if ((value != null))
                    {
                        value.BranchBehaviour_BranchTransition = this;
                        value.Deleted += this.OnResetAbstractBranchTransition_ResourceDemandingBehaviour;
                    }
                    this.OnAbstractBranchTransition_ResourceDemandingBehaviourChanged(e);
                    this.OnPropertyChanged("AbstractBranchTransition_ResourceDemandingBehaviour", e, _abstractBranchTransition_ResourceDemandingBehaviourReference);
                }
            }
        }
        
        /// <summary>
        /// The steps_Behaviour property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlElementNameAttribute("steps_Behaviour")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [XmlOppositeAttribute("resourceDemandingBehaviour_AbstractAction")]
        [ConstantAttribute()]
        public IListExpression<IAbstractAction> Steps_Behaviour
        {
            get
            {
                return this._steps_Behaviour;
            }
        }
        
        /// <summary>
        /// Gets the child model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> Children
        {
            get
            {
                return base.Children.Concat(new ResourceDemandingBehaviourChildrenCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new ResourceDemandingBehaviourReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://sdq.ipd.uka.de/PalladioComponentModel/5.0#//seff/ResourceDemandingBehaviou" +
                            "r")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the AbstractLoopAction_ResourceDemandingBehaviour property changes its value
        /// </summary>
        public event global::System.EventHandler<ValueChangedEventArgs> AbstractLoopAction_ResourceDemandingBehaviourChanging;
        
        /// <summary>
        /// Gets fired when the AbstractLoopAction_ResourceDemandingBehaviour property changed its value
        /// </summary>
        public event global::System.EventHandler<ValueChangedEventArgs> AbstractLoopAction_ResourceDemandingBehaviourChanged;
        
        /// <summary>
        /// Gets fired before the AbstractBranchTransition_ResourceDemandingBehaviour property changes its value
        /// </summary>
        public event global::System.EventHandler<ValueChangedEventArgs> AbstractBranchTransition_ResourceDemandingBehaviourChanging;
        
        /// <summary>
        /// Gets fired when the AbstractBranchTransition_ResourceDemandingBehaviour property changed its value
        /// </summary>
        public event global::System.EventHandler<ValueChangedEventArgs> AbstractBranchTransition_ResourceDemandingBehaviourChanged;
        
        private static ITypedElement RetrieveAbstractLoopAction_ResourceDemandingBehaviourReference()
        {
            return ((ITypedElement)(((ModelElement)(NMFExamples.Pcm.Seff.ResourceDemandingBehaviour.ClassInstance)).Resolve("abstractLoopAction_ResourceDemandingBehaviour")));
        }
        
        /// <summary>
        /// Raises the AbstractLoopAction_ResourceDemandingBehaviourChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAbstractLoopAction_ResourceDemandingBehaviourChanging(ValueChangedEventArgs eventArgs)
        {
            global::System.EventHandler<ValueChangedEventArgs> handler = this.AbstractLoopAction_ResourceDemandingBehaviourChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the AbstractLoopAction_ResourceDemandingBehaviourChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAbstractLoopAction_ResourceDemandingBehaviourChanged(ValueChangedEventArgs eventArgs)
        {
            global::System.EventHandler<ValueChangedEventArgs> handler = this.AbstractLoopAction_ResourceDemandingBehaviourChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the AbstractLoopAction_ResourceDemandingBehaviour property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetAbstractLoopAction_ResourceDemandingBehaviour(object sender, global::System.EventArgs eventArgs)
        {
            this.AbstractLoopAction_ResourceDemandingBehaviour = null;
        }
        
        private static ITypedElement RetrieveAbstractBranchTransition_ResourceDemandingBehaviourReference()
        {
            return ((ITypedElement)(((ModelElement)(NMFExamples.Pcm.Seff.ResourceDemandingBehaviour.ClassInstance)).Resolve("abstractBranchTransition_ResourceDemandingBehaviour")));
        }
        
        /// <summary>
        /// Raises the AbstractBranchTransition_ResourceDemandingBehaviourChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAbstractBranchTransition_ResourceDemandingBehaviourChanging(ValueChangedEventArgs eventArgs)
        {
            global::System.EventHandler<ValueChangedEventArgs> handler = this.AbstractBranchTransition_ResourceDemandingBehaviourChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the AbstractBranchTransition_ResourceDemandingBehaviourChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAbstractBranchTransition_ResourceDemandingBehaviourChanged(ValueChangedEventArgs eventArgs)
        {
            global::System.EventHandler<ValueChangedEventArgs> handler = this.AbstractBranchTransition_ResourceDemandingBehaviourChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the AbstractBranchTransition_ResourceDemandingBehaviour property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetAbstractBranchTransition_ResourceDemandingBehaviour(object sender, global::System.EventArgs eventArgs)
        {
            this.AbstractBranchTransition_ResourceDemandingBehaviour = null;
        }
        
        private static ITypedElement RetrieveSteps_BehaviourReference()
        {
            return ((ITypedElement)(((ModelElement)(NMFExamples.Pcm.Seff.ResourceDemandingBehaviour.ClassInstance)).Resolve("steps_Behaviour")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Steps_Behaviour property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void Steps_BehaviourCollectionChanging(object sender, NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("Steps_Behaviour", e, _steps_BehaviourReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Steps_Behaviour property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void Steps_BehaviourCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Steps_Behaviour", e, _steps_BehaviourReference);
        }
        
        /// <summary>
        /// Gets the relative URI fragment for the given child model element
        /// </summary>
        /// <returns>A fragment of the relative URI</returns>
        /// <param name="element">The element that should be looked for</param>
        protected override string GetRelativePathForNonIdentifiedChild(IModelElement element)
        {
            int steps_BehaviourIndex = ModelHelper.IndexOfReference(this.Steps_Behaviour, element);
            if ((steps_BehaviourIndex != -1))
            {
                return ModelHelper.CreatePath("steps_Behaviour", steps_BehaviourIndex);
            }
            return base.GetRelativePathForNonIdentifiedChild(element);
        }
        
        /// <summary>
        /// Resolves the given URI to a child model element
        /// </summary>
        /// <returns>The model element or null if it could not be found</returns>
        /// <param name="reference">The requested reference name</param>
        /// <param name="index">The index of this reference</param>
        protected override IModelElement GetModelElementForReference(string reference, int index)
        {
            if ((reference == "STEPS_BEHAVIOUR"))
            {
                if ((index < this.Steps_Behaviour.Count))
                {
                    return this.Steps_Behaviour[index];
                }
                else
                {
                    return null;
                }
            }
            return base.GetModelElementForReference(reference, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override global::System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "STEPS_BEHAVIOUR"))
            {
                return this._steps_Behaviour;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "ABSTRACTLOOPACTION_RESOURCEDEMANDINGBEHAVIOUR"))
            {
                this.AbstractLoopAction_ResourceDemandingBehaviour = ((IAbstractLoopAction)(value));
                return;
            }
            if ((feature == "ABSTRACTBRANCHTRANSITION_RESOURCEDEMANDINGBEHAVIOUR"))
            {
                this.AbstractBranchTransition_ResourceDemandingBehaviour = ((IAbstractBranchTransition)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "AbstractLoopAction_ResourceDemandingBehaviour"))
            {
                return new AbstractLoopAction_ResourceDemandingBehaviourProxy(this);
            }
            if ((attribute == "AbstractBranchTransition_ResourceDemandingBehaviour"))
            {
                return new AbstractBranchTransition_ResourceDemandingBehaviourProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "AbstractLoopAction_ResourceDemandingBehaviour"))
            {
                return new AbstractLoopAction_ResourceDemandingBehaviourProxy(this);
            }
            if ((reference == "AbstractBranchTransition_ResourceDemandingBehaviour"))
            {
                return new AbstractBranchTransition_ResourceDemandingBehaviourProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the property name for the given container
        /// </summary>
        /// <returns>The name of the respective container reference</returns>
        /// <param name="container">The container object</param>
        protected override string GetCompositionName(object container)
        {
            if ((container == this._steps_Behaviour))
            {
                return "steps_Behaviour";
            }
            return base.GetCompositionName(container);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://sdq.ipd.uka.de/PalladioComponentModel/5.0#//seff/ResourceDemandingBehaviou" +
                        "r")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the ResourceDemandingBehaviour class
        /// </summary>
        public class ResourceDemandingBehaviourChildrenCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private ResourceDemandingBehaviour _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public ResourceDemandingBehaviourChildrenCollection(ResourceDemandingBehaviour parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.Steps_Behaviour.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.Steps_Behaviour.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.Steps_Behaviour.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IAbstractAction steps_BehaviourCasted = item.As<IAbstractAction>();
                if ((steps_BehaviourCasted != null))
                {
                    this._parent.Steps_Behaviour.Add(steps_BehaviourCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Steps_Behaviour.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.Steps_Behaviour.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> steps_BehaviourEnumerator = this._parent.Steps_Behaviour.GetEnumerator();
                try
                {
                    for (
                    ; steps_BehaviourEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = steps_BehaviourEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    steps_BehaviourEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IAbstractAction abstractActionItem = item.As<IAbstractAction>();
                if (((abstractActionItem != null) 
                            && this._parent.Steps_Behaviour.Remove(abstractActionItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Steps_Behaviour).GetEnumerator();
            }
        }
        
        /// <summary>
        /// The collection class to to represent the children of the ResourceDemandingBehaviour class
        /// </summary>
        public class ResourceDemandingBehaviourReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private ResourceDemandingBehaviour _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public ResourceDemandingBehaviourReferencedElementsCollection(ResourceDemandingBehaviour parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.AbstractLoopAction_ResourceDemandingBehaviour != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.AbstractBranchTransition_ResourceDemandingBehaviour != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.Steps_Behaviour.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.AbstractLoopAction_ResourceDemandingBehaviourChanged += this.PropagateValueChanges;
                this._parent.AbstractBranchTransition_ResourceDemandingBehaviourChanged += this.PropagateValueChanges;
                this._parent.Steps_Behaviour.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.AbstractLoopAction_ResourceDemandingBehaviourChanged -= this.PropagateValueChanges;
                this._parent.AbstractBranchTransition_ResourceDemandingBehaviourChanged -= this.PropagateValueChanges;
                this._parent.Steps_Behaviour.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.AbstractLoopAction_ResourceDemandingBehaviour == null))
                {
                    IAbstractLoopAction abstractLoopAction_ResourceDemandingBehaviourCasted = item.As<IAbstractLoopAction>();
                    if ((abstractLoopAction_ResourceDemandingBehaviourCasted != null))
                    {
                        this._parent.AbstractLoopAction_ResourceDemandingBehaviour = abstractLoopAction_ResourceDemandingBehaviourCasted;
                        return;
                    }
                }
                if ((this._parent.AbstractBranchTransition_ResourceDemandingBehaviour == null))
                {
                    IAbstractBranchTransition abstractBranchTransition_ResourceDemandingBehaviourCasted = item.As<IAbstractBranchTransition>();
                    if ((abstractBranchTransition_ResourceDemandingBehaviourCasted != null))
                    {
                        this._parent.AbstractBranchTransition_ResourceDemandingBehaviour = abstractBranchTransition_ResourceDemandingBehaviourCasted;
                        return;
                    }
                }
                IAbstractAction steps_BehaviourCasted = item.As<IAbstractAction>();
                if ((steps_BehaviourCasted != null))
                {
                    this._parent.Steps_Behaviour.Add(steps_BehaviourCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.AbstractLoopAction_ResourceDemandingBehaviour = null;
                this._parent.AbstractBranchTransition_ResourceDemandingBehaviour = null;
                this._parent.Steps_Behaviour.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.AbstractLoopAction_ResourceDemandingBehaviour))
                {
                    return true;
                }
                if ((item == this._parent.AbstractBranchTransition_ResourceDemandingBehaviour))
                {
                    return true;
                }
                if (this._parent.Steps_Behaviour.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.AbstractLoopAction_ResourceDemandingBehaviour != null))
                {
                    array[arrayIndex] = this._parent.AbstractLoopAction_ResourceDemandingBehaviour;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.AbstractBranchTransition_ResourceDemandingBehaviour != null))
                {
                    array[arrayIndex] = this._parent.AbstractBranchTransition_ResourceDemandingBehaviour;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> steps_BehaviourEnumerator = this._parent.Steps_Behaviour.GetEnumerator();
                try
                {
                    for (
                    ; steps_BehaviourEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = steps_BehaviourEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    steps_BehaviourEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.AbstractLoopAction_ResourceDemandingBehaviour == item))
                {
                    this._parent.AbstractLoopAction_ResourceDemandingBehaviour = null;
                    return true;
                }
                if ((this._parent.AbstractBranchTransition_ResourceDemandingBehaviour == item))
                {
                    this._parent.AbstractBranchTransition_ResourceDemandingBehaviour = null;
                    return true;
                }
                IAbstractAction abstractActionItem = item.As<IAbstractAction>();
                if (((abstractActionItem != null) 
                            && this._parent.Steps_Behaviour.Remove(abstractActionItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.AbstractLoopAction_ResourceDemandingBehaviour).Concat(this._parent.AbstractBranchTransition_ResourceDemandingBehaviour).Concat(this._parent.Steps_Behaviour).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the abstractLoopAction_ResourceDemandingBehaviour property
        /// </summary>
        private sealed class AbstractLoopAction_ResourceDemandingBehaviourProxy : ModelPropertyChange<IResourceDemandingBehaviour, IAbstractLoopAction>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public AbstractLoopAction_ResourceDemandingBehaviourProxy(IResourceDemandingBehaviour modelElement) : 
                    base(modelElement, "abstractLoopAction_ResourceDemandingBehaviour")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IAbstractLoopAction Value
            {
                get
                {
                    return this.ModelElement.AbstractLoopAction_ResourceDemandingBehaviour;
                }
                set
                {
                    this.ModelElement.AbstractLoopAction_ResourceDemandingBehaviour = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the abstractBranchTransition_ResourceDemandingBehaviour property
        /// </summary>
        private sealed class AbstractBranchTransition_ResourceDemandingBehaviourProxy : ModelPropertyChange<IResourceDemandingBehaviour, IAbstractBranchTransition>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public AbstractBranchTransition_ResourceDemandingBehaviourProxy(IResourceDemandingBehaviour modelElement) : 
                    base(modelElement, "abstractBranchTransition_ResourceDemandingBehaviour")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IAbstractBranchTransition Value
            {
                get
                {
                    return this.ModelElement.AbstractBranchTransition_ResourceDemandingBehaviour;
                }
                set
                {
                    this.ModelElement.AbstractBranchTransition_ResourceDemandingBehaviour = value;
                }
            }
        }
    }
}

