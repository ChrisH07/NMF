//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMFExamples.Identifier;
using NMFExamples.Pcm.Core.Entity;
using NMFExamples.Pcm.Reliability;
using NMFExamples.Pcm.Repository;
using NMFExamples.Units;
using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using global::System.Collections;
using global::System.Collections.Generic;
using global::System.Collections.ObjectModel;
using global::System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;

namespace NMFExamples.Pcm.Resourcetype
{
    
    
    /// <summary>
    /// The default implementation of the ResourceType class
    /// </summary>
    [XmlNamespaceAttribute("http://sdq.ipd.uka.de/PalladioComponentModel/ResourceType/5.0")]
    [XmlNamespacePrefixAttribute("resourcetype")]
    [ModelRepresentationClassAttribute("http://sdq.ipd.uka.de/PalladioComponentModel/5.0#//resourcetype/ResourceType")]
    [DebuggerDisplayAttribute("ResourceType {Id}")]
    public abstract partial class ResourceType : UnitCarryingElement, IResourceType, IModelElement
    {
        
        private static Lazy<ITypedElement> _resourceRepository_ResourceTypeReference = new Lazy<ITypedElement>(RetrieveResourceRepository_ResourceTypeReference);
        
        private static Lazy<ITypedElement> _resourceProvidedRoles__ResourceInterfaceProvidingEntityReference = new Lazy<ITypedElement>(RetrieveResourceProvidedRoles__ResourceInterfaceProvidingEntityReference);
        
        /// <summary>
        /// The backing field for the ResourceProvidedRoles__ResourceInterfaceProvidingEntity property
        /// </summary>
        private ResourceInterfaceProvidingEntityResourceProvidedRoles__ResourceInterfaceProvidingEntityCollection _resourceProvidedRoles__ResourceInterfaceProvidingEntity;
        
        /// <summary>
        /// The backing field for the Id property
        /// </summary>
        private string _id;
        
        private static Lazy<ITypedElement> _idAttribute = new Lazy<ITypedElement>(RetrieveIdAttribute);
        
        /// <summary>
        /// The backing field for the EntityName property
        /// </summary>
        private string _entityName = "aName";
        
        private static Lazy<ITypedElement> _entityNameAttribute = new Lazy<ITypedElement>(RetrieveEntityNameAttribute);
        
        private static IClass _classInstance;
        
        public ResourceType()
        {
            this._resourceProvidedRoles__ResourceInterfaceProvidingEntity = new ResourceInterfaceProvidingEntityResourceProvidedRoles__ResourceInterfaceProvidingEntityCollection(this);
            this._resourceProvidedRoles__ResourceInterfaceProvidingEntity.CollectionChanging += this.ResourceProvidedRoles__ResourceInterfaceProvidingEntityCollectionChanging;
            this._resourceProvidedRoles__ResourceInterfaceProvidingEntity.CollectionChanged += this.ResourceProvidedRoles__ResourceInterfaceProvidingEntityCollectionChanged;
        }
        
        /// <summary>
        /// The resourceRepository_ResourceType property
        /// </summary>
        [XmlElementNameAttribute("resourceRepository_ResourceType")]
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Hidden)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("availableResourceTypes_ResourceRepository")]
        public IResourceRepository ResourceRepository_ResourceType
        {
            get
            {
                return ModelHelper.CastAs<IResourceRepository>(this.Parent);
            }
            set
            {
                this.Parent = value;
            }
        }
        
        /// <summary>
        /// The resourceProvidedRoles__ResourceInterfaceProvidingEntity property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlElementNameAttribute("resourceProvidedRoles__ResourceInterfaceProvidingEntity")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [XmlOppositeAttribute("resourceInterfaceProvidingEntity__ResourceProvidedRole")]
        [ConstantAttribute()]
        public IListExpression<IResourceProvidedRole> ResourceProvidedRoles__ResourceInterfaceProvidingEntity
        {
            get
            {
                return this._resourceProvidedRoles__ResourceInterfaceProvidingEntity;
            }
        }
        
        /// <summary>
        /// The id property
        /// </summary>
        [XmlElementNameAttribute("id")]
        [IdAttribute()]
        [XmlAttributeAttribute(true)]
        public string Id
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    string old = this._id;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnIdChanging(e);
                    this.OnPropertyChanging("Id", e, _idAttribute);
                    this._id = value;
                    this.OnIdChanged(e);
                    this.OnPropertyChanged("Id", e, _idAttribute);
                }
            }
        }
        
        /// <summary>
        /// The entityName property
        /// </summary>
        [DefaultValueAttribute("aName")]
        [XmlElementNameAttribute("entityName")]
        [XmlAttributeAttribute(true)]
        public string EntityName
        {
            get
            {
                return this._entityName;
            }
            set
            {
                if ((this._entityName != value))
                {
                    string old = this._entityName;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnEntityNameChanging(e);
                    this.OnPropertyChanging("EntityName", e, _entityNameAttribute);
                    this._entityName = value;
                    this.OnEntityNameChanged(e);
                    this.OnPropertyChanged("EntityName", e, _entityNameAttribute);
                }
            }
        }
        
        /// <summary>
        /// Gets the child model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> Children
        {
            get
            {
                return base.Children.Concat(new ResourceTypeChildrenCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new ResourceTypeReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://sdq.ipd.uka.de/PalladioComponentModel/5.0#//resourcetype/ResourceType")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets a value indicating whether the current model element can be identified by an attribute value
        /// </summary>
        public override bool IsIdentified
        {
            get
            {
                return true;
            }
        }
        
        /// <summary>
        /// Gets fired before the ResourceRepository_ResourceType property changes its value
        /// </summary>
        public event global::System.EventHandler<ValueChangedEventArgs> ResourceRepository_ResourceTypeChanging;
        
        /// <summary>
        /// Gets fired when the ResourceRepository_ResourceType property changed its value
        /// </summary>
        public event global::System.EventHandler<ValueChangedEventArgs> ResourceRepository_ResourceTypeChanged;
        
        /// <summary>
        /// Gets fired before the Id property changes its value
        /// </summary>
        public event global::System.EventHandler<ValueChangedEventArgs> IdChanging;
        
        /// <summary>
        /// Gets fired when the Id property changed its value
        /// </summary>
        public event global::System.EventHandler<ValueChangedEventArgs> IdChanged;
        
        /// <summary>
        /// Gets fired before the EntityName property changes its value
        /// </summary>
        public event global::System.EventHandler<ValueChangedEventArgs> EntityNameChanging;
        
        /// <summary>
        /// Gets fired when the EntityName property changed its value
        /// </summary>
        public event global::System.EventHandler<ValueChangedEventArgs> EntityNameChanged;
        
        private static ITypedElement RetrieveResourceRepository_ResourceTypeReference()
        {
            return ((ITypedElement)(((ModelElement)(NMFExamples.Pcm.Resourcetype.ResourceType.ClassInstance)).Resolve("resourceRepository_ResourceType")));
        }
        
        /// <summary>
        /// Raises the ResourceRepository_ResourceTypeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnResourceRepository_ResourceTypeChanging(ValueChangedEventArgs eventArgs)
        {
            global::System.EventHandler<ValueChangedEventArgs> handler = this.ResourceRepository_ResourceTypeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Gets called when the parent model element of the current model element is about to change
        /// </summary>
        /// <param name="oldParent">The old parent model element</param>
        /// <param name="newParent">The new parent model element</param>
        protected override void OnParentChanging(IModelElement newParent, IModelElement oldParent)
        {
            IResourceRepository oldResourceRepository_ResourceType = ModelHelper.CastAs<IResourceRepository>(oldParent);
            IResourceRepository newResourceRepository_ResourceType = ModelHelper.CastAs<IResourceRepository>(newParent);
            ValueChangedEventArgs e = new ValueChangedEventArgs(oldResourceRepository_ResourceType, newResourceRepository_ResourceType);
            this.OnResourceRepository_ResourceTypeChanging(e);
            this.OnPropertyChanging("ResourceRepository_ResourceType", e, _resourceRepository_ResourceTypeReference);
        }
        
        /// <summary>
        /// Raises the ResourceRepository_ResourceTypeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnResourceRepository_ResourceTypeChanged(ValueChangedEventArgs eventArgs)
        {
            global::System.EventHandler<ValueChangedEventArgs> handler = this.ResourceRepository_ResourceTypeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Gets called when the parent model element of the current model element changes
        /// </summary>
        /// <param name="oldParent">The old parent model element</param>
        /// <param name="newParent">The new parent model element</param>
        protected override void OnParentChanged(IModelElement newParent, IModelElement oldParent)
        {
            IResourceRepository oldResourceRepository_ResourceType = ModelHelper.CastAs<IResourceRepository>(oldParent);
            IResourceRepository newResourceRepository_ResourceType = ModelHelper.CastAs<IResourceRepository>(newParent);
            if ((oldResourceRepository_ResourceType != null))
            {
                oldResourceRepository_ResourceType.AvailableResourceTypes_ResourceRepository.Remove(this);
            }
            if ((newResourceRepository_ResourceType != null))
            {
                newResourceRepository_ResourceType.AvailableResourceTypes_ResourceRepository.Add(this);
            }
            ValueChangedEventArgs e = new ValueChangedEventArgs(oldResourceRepository_ResourceType, newResourceRepository_ResourceType);
            this.OnResourceRepository_ResourceTypeChanged(e);
            this.OnPropertyChanged("ResourceRepository_ResourceType", e, _resourceRepository_ResourceTypeReference);
            base.OnParentChanged(newParent, oldParent);
        }
        
        private static ITypedElement RetrieveResourceProvidedRoles__ResourceInterfaceProvidingEntityReference()
        {
            return ((ITypedElement)(((ModelElement)(NMFExamples.Pcm.Core.Entity.ResourceInterfaceProvidingEntity.ClassInstance)).Resolve("resourceProvidedRoles__ResourceInterfaceProvidingEntity")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the ResourceProvidedRoles__ResourceInterfaceProvidingEntity property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ResourceProvidedRoles__ResourceInterfaceProvidingEntityCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("ResourceProvidedRoles__ResourceInterfaceProvidingEntity", e, _resourceProvidedRoles__ResourceInterfaceProvidingEntityReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the ResourceProvidedRoles__ResourceInterfaceProvidingEntity property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ResourceProvidedRoles__ResourceInterfaceProvidingEntityCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("ResourceProvidedRoles__ResourceInterfaceProvidingEntity", e, _resourceProvidedRoles__ResourceInterfaceProvidingEntityReference);
        }
        
        private static ITypedElement RetrieveIdAttribute()
        {
            return ((ITypedElement)(((ModelElement)(NMFExamples.Identifier.Identifier.ClassInstance)).Resolve("id")));
        }
        
        /// <summary>
        /// Raises the IdChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnIdChanging(ValueChangedEventArgs eventArgs)
        {
            global::System.EventHandler<ValueChangedEventArgs> handler = this.IdChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the IdChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnIdChanged(ValueChangedEventArgs eventArgs)
        {
            global::System.EventHandler<ValueChangedEventArgs> handler = this.IdChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveEntityNameAttribute()
        {
            return ((ITypedElement)(((ModelElement)(NMFExamples.Pcm.Core.Entity.NamedElement.ClassInstance)).Resolve("entityName")));
        }
        
        /// <summary>
        /// Raises the EntityNameChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnEntityNameChanging(ValueChangedEventArgs eventArgs)
        {
            global::System.EventHandler<ValueChangedEventArgs> handler = this.EntityNameChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the EntityNameChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnEntityNameChanged(ValueChangedEventArgs eventArgs)
        {
            global::System.EventHandler<ValueChangedEventArgs> handler = this.EntityNameChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Gets the relative URI fragment for the given child model element
        /// </summary>
        /// <returns>A fragment of the relative URI</returns>
        /// <param name="element">The element that should be looked for</param>
        protected override string GetRelativePathForNonIdentifiedChild(IModelElement element)
        {
            int resourceProvidedRoles__ResourceInterfaceProvidingEntityIndex = ModelHelper.IndexOfReference(this.ResourceProvidedRoles__ResourceInterfaceProvidingEntity, element);
            if ((resourceProvidedRoles__ResourceInterfaceProvidingEntityIndex != -1))
            {
                return ModelHelper.CreatePath("resourceProvidedRoles__ResourceInterfaceProvidingEntity", resourceProvidedRoles__ResourceInterfaceProvidingEntityIndex);
            }
            return base.GetRelativePathForNonIdentifiedChild(element);
        }
        
        /// <summary>
        /// Resolves the given URI to a child model element
        /// </summary>
        /// <returns>The model element or null if it could not be found</returns>
        /// <param name="reference">The requested reference name</param>
        /// <param name="index">The index of this reference</param>
        protected override IModelElement GetModelElementForReference(string reference, int index)
        {
            if ((reference == "RESOURCEPROVIDEDROLES__RESOURCEINTERFACEPROVIDINGENTITY"))
            {
                if ((index < this.ResourceProvidedRoles__ResourceInterfaceProvidingEntity.Count))
                {
                    return this.ResourceProvidedRoles__ResourceInterfaceProvidingEntity[index];
                }
                else
                {
                    return null;
                }
            }
            return base.GetModelElementForReference(reference, index);
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "ID"))
            {
                return this.Id;
            }
            if ((attribute == "ENTITYNAME"))
            {
                return this.EntityName;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override global::System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "RESOURCEPROVIDEDROLES__RESOURCEINTERFACEPROVIDINGENTITY"))
            {
                return this._resourceProvidedRoles__ResourceInterfaceProvidingEntity;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "RESOURCEREPOSITORY_RESOURCETYPE"))
            {
                this.ResourceRepository_ResourceType = ((IResourceRepository)(value));
                return;
            }
            if ((feature == "ID"))
            {
                this.Id = ((string)(value));
                return;
            }
            if ((feature == "ENTITYNAME"))
            {
                this.EntityName = ((string)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "ResourceRepository_ResourceType"))
            {
                return new ResourceRepository_ResourceTypeProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "ResourceRepository_ResourceType"))
            {
                return new ResourceRepository_ResourceTypeProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the property name for the given container
        /// </summary>
        /// <returns>The name of the respective container reference</returns>
        /// <param name="container">The container object</param>
        protected override string GetCompositionName(object container)
        {
            if ((container == this._resourceProvidedRoles__ResourceInterfaceProvidingEntity))
            {
                return "resourceProvidedRoles__ResourceInterfaceProvidingEntity";
            }
            return base.GetCompositionName(container);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://sdq.ipd.uka.de/PalladioComponentModel/5.0#//resourcetype/ResourceType")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// Gets the identifier string for this model element
        /// </summary>
        /// <returns>The identifier string</returns>
        public override string ToIdentifierString()
        {
            if ((this.Id == null))
            {
                return null;
            }
            return this.Id.ToString();
        }
        
        protected override Uri CreateUriWithFragment(string fragment, bool absolute, IModelElement baseElement)
        {
            return this.CreateUriFromGlobalIdentifier(fragment, absolute);
        }
        
        protected override void PropagateNewModel(Model newModel, Model oldModel, IModelElement subtreeRoot)
        {
            string id = this.ToIdentifierString();
            if ((oldModel != null))
            {
                oldModel.UnregisterId(id);
            }
            if ((newModel != null))
            {
                newModel.RegisterId(id, this);
            }
            base.PropagateNewModel(newModel, oldModel, subtreeRoot);
        }
        
        /// <summary>
        /// The collection class to to represent the children of the ResourceType class
        /// </summary>
        public class ResourceTypeChildrenCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private ResourceType _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public ResourceTypeChildrenCollection(ResourceType parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.ResourceProvidedRoles__ResourceInterfaceProvidingEntity.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.ResourceProvidedRoles__ResourceInterfaceProvidingEntity.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.ResourceProvidedRoles__ResourceInterfaceProvidingEntity.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IResourceProvidedRole resourceProvidedRoles__ResourceInterfaceProvidingEntityCasted = item.As<IResourceProvidedRole>();
                if ((resourceProvidedRoles__ResourceInterfaceProvidingEntityCasted != null))
                {
                    this._parent.ResourceProvidedRoles__ResourceInterfaceProvidingEntity.Add(resourceProvidedRoles__ResourceInterfaceProvidingEntityCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.ResourceProvidedRoles__ResourceInterfaceProvidingEntity.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.ResourceProvidedRoles__ResourceInterfaceProvidingEntity.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> resourceProvidedRoles__ResourceInterfaceProvidingEntityEnumerator = this._parent.ResourceProvidedRoles__ResourceInterfaceProvidingEntity.GetEnumerator();
                try
                {
                    for (
                    ; resourceProvidedRoles__ResourceInterfaceProvidingEntityEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = resourceProvidedRoles__ResourceInterfaceProvidingEntityEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    resourceProvidedRoles__ResourceInterfaceProvidingEntityEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IResourceProvidedRole resourceProvidedRoleItem = item.As<IResourceProvidedRole>();
                if (((resourceProvidedRoleItem != null) 
                            && this._parent.ResourceProvidedRoles__ResourceInterfaceProvidingEntity.Remove(resourceProvidedRoleItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.ResourceProvidedRoles__ResourceInterfaceProvidingEntity).GetEnumerator();
            }
        }
        
        /// <summary>
        /// The collection class to to represent the children of the ResourceType class
        /// </summary>
        public class ResourceTypeReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private ResourceType _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public ResourceTypeReferencedElementsCollection(ResourceType parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.ResourceRepository_ResourceType != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.ResourceProvidedRoles__ResourceInterfaceProvidingEntity.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.ResourceRepository_ResourceTypeChanged += this.PropagateValueChanges;
                this._parent.ResourceProvidedRoles__ResourceInterfaceProvidingEntity.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.ResourceRepository_ResourceTypeChanged -= this.PropagateValueChanges;
                this._parent.ResourceProvidedRoles__ResourceInterfaceProvidingEntity.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.ResourceRepository_ResourceType == null))
                {
                    IResourceRepository resourceRepository_ResourceTypeCasted = item.As<IResourceRepository>();
                    if ((resourceRepository_ResourceTypeCasted != null))
                    {
                        this._parent.ResourceRepository_ResourceType = resourceRepository_ResourceTypeCasted;
                        return;
                    }
                }
                IResourceProvidedRole resourceProvidedRoles__ResourceInterfaceProvidingEntityCasted = item.As<IResourceProvidedRole>();
                if ((resourceProvidedRoles__ResourceInterfaceProvidingEntityCasted != null))
                {
                    this._parent.ResourceProvidedRoles__ResourceInterfaceProvidingEntity.Add(resourceProvidedRoles__ResourceInterfaceProvidingEntityCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.ResourceRepository_ResourceType = null;
                this._parent.ResourceProvidedRoles__ResourceInterfaceProvidingEntity.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.ResourceRepository_ResourceType))
                {
                    return true;
                }
                if (this._parent.ResourceProvidedRoles__ResourceInterfaceProvidingEntity.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.ResourceRepository_ResourceType != null))
                {
                    array[arrayIndex] = this._parent.ResourceRepository_ResourceType;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> resourceProvidedRoles__ResourceInterfaceProvidingEntityEnumerator = this._parent.ResourceProvidedRoles__ResourceInterfaceProvidingEntity.GetEnumerator();
                try
                {
                    for (
                    ; resourceProvidedRoles__ResourceInterfaceProvidingEntityEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = resourceProvidedRoles__ResourceInterfaceProvidingEntityEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    resourceProvidedRoles__ResourceInterfaceProvidingEntityEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.ResourceRepository_ResourceType == item))
                {
                    this._parent.ResourceRepository_ResourceType = null;
                    return true;
                }
                IResourceProvidedRole resourceProvidedRoleItem = item.As<IResourceProvidedRole>();
                if (((resourceProvidedRoleItem != null) 
                            && this._parent.ResourceProvidedRoles__ResourceInterfaceProvidingEntity.Remove(resourceProvidedRoleItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.ResourceRepository_ResourceType).Concat(this._parent.ResourceProvidedRoles__ResourceInterfaceProvidingEntity).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the resourceRepository_ResourceType property
        /// </summary>
        private sealed class ResourceRepository_ResourceTypeProxy : ModelPropertyChange<IResourceType, IResourceRepository>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ResourceRepository_ResourceTypeProxy(IResourceType modelElement) : 
                    base(modelElement, "resourceRepository_ResourceType")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IResourceRepository Value
            {
                get
                {
                    return this.ModelElement.ResourceRepository_ResourceType;
                }
                set
                {
                    this.ModelElement.ResourceRepository_ResourceType = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the id property
        /// </summary>
        private sealed class IdProxy : ModelPropertyChange<IIdentifier, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public IdProxy(IIdentifier modelElement) : 
                    base(modelElement, "id")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Id;
                }
                set
                {
                    this.ModelElement.Id = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the entityName property
        /// </summary>
        private sealed class EntityNameProxy : ModelPropertyChange<INamedElement, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public EntityNameProxy(INamedElement modelElement) : 
                    base(modelElement, "entityName")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.EntityName;
                }
                set
                {
                    this.ModelElement.EntityName = value;
                }
            }
        }
    }
}

