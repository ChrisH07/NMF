//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMFExamples.Identifier;
using NMFExamples.Pcm.Core.Entity;
using NMFExamples.Pcm.Reliability;
using NMFExamples.Pcm.Repository;
using NMFExamples.Units;
using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using global::System.Collections;
using global::System.Collections.Generic;
using global::System.Collections.ObjectModel;
using global::System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;

namespace NMFExamples.Pcm.Resourcetype
{
    
    
    /// <summary>
    /// The default implementation of the ResourceInterface class
    /// </summary>
    [XmlNamespaceAttribute("http://sdq.ipd.uka.de/PalladioComponentModel/ResourceType/5.0")]
    [XmlNamespacePrefixAttribute("resourcetype")]
    [ModelRepresentationClassAttribute("http://sdq.ipd.uka.de/PalladioComponentModel/5.0#//resourcetype/ResourceInterface" +
        "")]
    [DebuggerDisplayAttribute("ResourceInterface {Id}")]
    public partial class ResourceInterface : NMFExamples.Pcm.Core.Entity.Entity, IResourceInterface, IModelElement
    {
        
        private static Lazy<ITypedElement> _resourceRepository__ResourceInterfaceReference = new Lazy<ITypedElement>(RetrieveResourceRepository__ResourceInterfaceReference);
        
        private static Lazy<ITypedElement> _resourceSignatures__ResourceInterfaceReference = new Lazy<ITypedElement>(RetrieveResourceSignatures__ResourceInterfaceReference);
        
        /// <summary>
        /// The backing field for the ResourceSignatures__ResourceInterface property
        /// </summary>
        private ResourceInterfaceResourceSignatures__ResourceInterfaceCollection _resourceSignatures__ResourceInterface;
        
        private static IClass _classInstance;
        
        public ResourceInterface()
        {
            this._resourceSignatures__ResourceInterface = new ResourceInterfaceResourceSignatures__ResourceInterfaceCollection(this);
            this._resourceSignatures__ResourceInterface.CollectionChanging += this.ResourceSignatures__ResourceInterfaceCollectionChanging;
            this._resourceSignatures__ResourceInterface.CollectionChanged += this.ResourceSignatures__ResourceInterfaceCollectionChanged;
        }
        
        /// <summary>
        /// The resourceRepository__ResourceInterface property
        /// </summary>
        [XmlElementNameAttribute("resourceRepository__ResourceInterface")]
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Hidden)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("resourceInterfaces__ResourceRepository")]
        public IResourceRepository ResourceRepository__ResourceInterface
        {
            get
            {
                return ModelHelper.CastAs<IResourceRepository>(this.Parent);
            }
            set
            {
                this.Parent = value;
            }
        }
        
        /// <summary>
        /// The resourceSignatures__ResourceInterface property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlElementNameAttribute("resourceSignatures__ResourceInterface")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [XmlOppositeAttribute("resourceInterface__ResourceSignature")]
        [ConstantAttribute()]
        public IListExpression<IResourceSignature> ResourceSignatures__ResourceInterface
        {
            get
            {
                return this._resourceSignatures__ResourceInterface;
            }
        }
        
        /// <summary>
        /// Gets the child model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> Children
        {
            get
            {
                return base.Children.Concat(new ResourceInterfaceChildrenCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new ResourceInterfaceReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://sdq.ipd.uka.de/PalladioComponentModel/5.0#//resourcetype/ResourceInterface" +
                            "")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the ResourceRepository__ResourceInterface property changes its value
        /// </summary>
        public event global::System.EventHandler<ValueChangedEventArgs> ResourceRepository__ResourceInterfaceChanging;
        
        /// <summary>
        /// Gets fired when the ResourceRepository__ResourceInterface property changed its value
        /// </summary>
        public event global::System.EventHandler<ValueChangedEventArgs> ResourceRepository__ResourceInterfaceChanged;
        
        private static ITypedElement RetrieveResourceRepository__ResourceInterfaceReference()
        {
            return ((ITypedElement)(((ModelElement)(NMFExamples.Pcm.Resourcetype.ResourceInterface.ClassInstance)).Resolve("resourceRepository__ResourceInterface")));
        }
        
        /// <summary>
        /// Raises the ResourceRepository__ResourceInterfaceChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnResourceRepository__ResourceInterfaceChanging(ValueChangedEventArgs eventArgs)
        {
            global::System.EventHandler<ValueChangedEventArgs> handler = this.ResourceRepository__ResourceInterfaceChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Gets called when the parent model element of the current model element is about to change
        /// </summary>
        /// <param name="oldParent">The old parent model element</param>
        /// <param name="newParent">The new parent model element</param>
        protected override void OnParentChanging(IModelElement newParent, IModelElement oldParent)
        {
            IResourceRepository oldResourceRepository__ResourceInterface = ModelHelper.CastAs<IResourceRepository>(oldParent);
            IResourceRepository newResourceRepository__ResourceInterface = ModelHelper.CastAs<IResourceRepository>(newParent);
            ValueChangedEventArgs e = new ValueChangedEventArgs(oldResourceRepository__ResourceInterface, newResourceRepository__ResourceInterface);
            this.OnResourceRepository__ResourceInterfaceChanging(e);
            this.OnPropertyChanging("ResourceRepository__ResourceInterface", e, _resourceRepository__ResourceInterfaceReference);
        }
        
        /// <summary>
        /// Raises the ResourceRepository__ResourceInterfaceChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnResourceRepository__ResourceInterfaceChanged(ValueChangedEventArgs eventArgs)
        {
            global::System.EventHandler<ValueChangedEventArgs> handler = this.ResourceRepository__ResourceInterfaceChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Gets called when the parent model element of the current model element changes
        /// </summary>
        /// <param name="oldParent">The old parent model element</param>
        /// <param name="newParent">The new parent model element</param>
        protected override void OnParentChanged(IModelElement newParent, IModelElement oldParent)
        {
            IResourceRepository oldResourceRepository__ResourceInterface = ModelHelper.CastAs<IResourceRepository>(oldParent);
            IResourceRepository newResourceRepository__ResourceInterface = ModelHelper.CastAs<IResourceRepository>(newParent);
            if ((oldResourceRepository__ResourceInterface != null))
            {
                oldResourceRepository__ResourceInterface.ResourceInterfaces__ResourceRepository.Remove(this);
            }
            if ((newResourceRepository__ResourceInterface != null))
            {
                newResourceRepository__ResourceInterface.ResourceInterfaces__ResourceRepository.Add(this);
            }
            ValueChangedEventArgs e = new ValueChangedEventArgs(oldResourceRepository__ResourceInterface, newResourceRepository__ResourceInterface);
            this.OnResourceRepository__ResourceInterfaceChanged(e);
            this.OnPropertyChanged("ResourceRepository__ResourceInterface", e, _resourceRepository__ResourceInterfaceReference);
            base.OnParentChanged(newParent, oldParent);
        }
        
        private static ITypedElement RetrieveResourceSignatures__ResourceInterfaceReference()
        {
            return ((ITypedElement)(((ModelElement)(NMFExamples.Pcm.Resourcetype.ResourceInterface.ClassInstance)).Resolve("resourceSignatures__ResourceInterface")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the ResourceSignatures__ResourceInterface property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ResourceSignatures__ResourceInterfaceCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("ResourceSignatures__ResourceInterface", e, _resourceSignatures__ResourceInterfaceReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the ResourceSignatures__ResourceInterface property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ResourceSignatures__ResourceInterfaceCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("ResourceSignatures__ResourceInterface", e, _resourceSignatures__ResourceInterfaceReference);
        }
        
        /// <summary>
        /// Gets the relative URI fragment for the given child model element
        /// </summary>
        /// <returns>A fragment of the relative URI</returns>
        /// <param name="element">The element that should be looked for</param>
        protected override string GetRelativePathForNonIdentifiedChild(IModelElement element)
        {
            int resourceSignatures__ResourceInterfaceIndex = ModelHelper.IndexOfReference(this.ResourceSignatures__ResourceInterface, element);
            if ((resourceSignatures__ResourceInterfaceIndex != -1))
            {
                return ModelHelper.CreatePath("resourceSignatures__ResourceInterface", resourceSignatures__ResourceInterfaceIndex);
            }
            return base.GetRelativePathForNonIdentifiedChild(element);
        }
        
        /// <summary>
        /// Resolves the given URI to a child model element
        /// </summary>
        /// <returns>The model element or null if it could not be found</returns>
        /// <param name="reference">The requested reference name</param>
        /// <param name="index">The index of this reference</param>
        protected override IModelElement GetModelElementForReference(string reference, int index)
        {
            if ((reference == "RESOURCESIGNATURES__RESOURCEINTERFACE"))
            {
                if ((index < this.ResourceSignatures__ResourceInterface.Count))
                {
                    return this.ResourceSignatures__ResourceInterface[index];
                }
                else
                {
                    return null;
                }
            }
            return base.GetModelElementForReference(reference, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override global::System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "RESOURCESIGNATURES__RESOURCEINTERFACE"))
            {
                return this._resourceSignatures__ResourceInterface;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "RESOURCEREPOSITORY__RESOURCEINTERFACE"))
            {
                this.ResourceRepository__ResourceInterface = ((IResourceRepository)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "ResourceRepository__ResourceInterface"))
            {
                return new ResourceRepository__ResourceInterfaceProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "ResourceRepository__ResourceInterface"))
            {
                return new ResourceRepository__ResourceInterfaceProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the property name for the given container
        /// </summary>
        /// <returns>The name of the respective container reference</returns>
        /// <param name="container">The container object</param>
        protected override string GetCompositionName(object container)
        {
            if ((container == this._resourceSignatures__ResourceInterface))
            {
                return "resourceSignatures__ResourceInterface";
            }
            return base.GetCompositionName(container);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://sdq.ipd.uka.de/PalladioComponentModel/5.0#//resourcetype/ResourceInterface" +
                        "")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the ResourceInterface class
        /// </summary>
        public class ResourceInterfaceChildrenCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private ResourceInterface _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public ResourceInterfaceChildrenCollection(ResourceInterface parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.ResourceSignatures__ResourceInterface.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.ResourceSignatures__ResourceInterface.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.ResourceSignatures__ResourceInterface.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IResourceSignature resourceSignatures__ResourceInterfaceCasted = item.As<IResourceSignature>();
                if ((resourceSignatures__ResourceInterfaceCasted != null))
                {
                    this._parent.ResourceSignatures__ResourceInterface.Add(resourceSignatures__ResourceInterfaceCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.ResourceSignatures__ResourceInterface.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.ResourceSignatures__ResourceInterface.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> resourceSignatures__ResourceInterfaceEnumerator = this._parent.ResourceSignatures__ResourceInterface.GetEnumerator();
                try
                {
                    for (
                    ; resourceSignatures__ResourceInterfaceEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = resourceSignatures__ResourceInterfaceEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    resourceSignatures__ResourceInterfaceEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IResourceSignature resourceSignatureItem = item.As<IResourceSignature>();
                if (((resourceSignatureItem != null) 
                            && this._parent.ResourceSignatures__ResourceInterface.Remove(resourceSignatureItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.ResourceSignatures__ResourceInterface).GetEnumerator();
            }
        }
        
        /// <summary>
        /// The collection class to to represent the children of the ResourceInterface class
        /// </summary>
        public class ResourceInterfaceReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private ResourceInterface _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public ResourceInterfaceReferencedElementsCollection(ResourceInterface parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.ResourceRepository__ResourceInterface != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.ResourceSignatures__ResourceInterface.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.ResourceRepository__ResourceInterfaceChanged += this.PropagateValueChanges;
                this._parent.ResourceSignatures__ResourceInterface.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.ResourceRepository__ResourceInterfaceChanged -= this.PropagateValueChanges;
                this._parent.ResourceSignatures__ResourceInterface.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.ResourceRepository__ResourceInterface == null))
                {
                    IResourceRepository resourceRepository__ResourceInterfaceCasted = item.As<IResourceRepository>();
                    if ((resourceRepository__ResourceInterfaceCasted != null))
                    {
                        this._parent.ResourceRepository__ResourceInterface = resourceRepository__ResourceInterfaceCasted;
                        return;
                    }
                }
                IResourceSignature resourceSignatures__ResourceInterfaceCasted = item.As<IResourceSignature>();
                if ((resourceSignatures__ResourceInterfaceCasted != null))
                {
                    this._parent.ResourceSignatures__ResourceInterface.Add(resourceSignatures__ResourceInterfaceCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.ResourceRepository__ResourceInterface = null;
                this._parent.ResourceSignatures__ResourceInterface.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.ResourceRepository__ResourceInterface))
                {
                    return true;
                }
                if (this._parent.ResourceSignatures__ResourceInterface.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.ResourceRepository__ResourceInterface != null))
                {
                    array[arrayIndex] = this._parent.ResourceRepository__ResourceInterface;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> resourceSignatures__ResourceInterfaceEnumerator = this._parent.ResourceSignatures__ResourceInterface.GetEnumerator();
                try
                {
                    for (
                    ; resourceSignatures__ResourceInterfaceEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = resourceSignatures__ResourceInterfaceEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    resourceSignatures__ResourceInterfaceEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.ResourceRepository__ResourceInterface == item))
                {
                    this._parent.ResourceRepository__ResourceInterface = null;
                    return true;
                }
                IResourceSignature resourceSignatureItem = item.As<IResourceSignature>();
                if (((resourceSignatureItem != null) 
                            && this._parent.ResourceSignatures__ResourceInterface.Remove(resourceSignatureItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.ResourceRepository__ResourceInterface).Concat(this._parent.ResourceSignatures__ResourceInterface).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the resourceRepository__ResourceInterface property
        /// </summary>
        private sealed class ResourceRepository__ResourceInterfaceProxy : ModelPropertyChange<IResourceInterface, IResourceRepository>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ResourceRepository__ResourceInterfaceProxy(IResourceInterface modelElement) : 
                    base(modelElement, "resourceRepository__ResourceInterface")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IResourceRepository Value
            {
                get
                {
                    return this.ModelElement.ResourceRepository__ResourceInterface;
                }
                set
                {
                    this.ModelElement.ResourceRepository__ResourceInterface = value;
                }
            }
        }
    }
}

