//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMFExamples.Identifier;
using NMFExamples.Pcm.Core;
using NMFExamples.Pcm.Core.Entity;
using NMFExamples.Pcm.Resourcetype;
using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using global::System.Collections;
using global::System.Collections.Generic;
using global::System.Collections.ObjectModel;
using global::System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;

namespace NMFExamples.Pcm.Resourceenvironment
{
    
    
    /// <summary>
    /// The default implementation of the ResourceContainer class
    /// </summary>
    [XmlNamespaceAttribute("http://sdq.ipd.uka.de/PalladioComponentModel/ResourceEnvironment/5.0")]
    [XmlNamespacePrefixAttribute("resourceenvironment")]
    [ModelRepresentationClassAttribute("http://sdq.ipd.uka.de/PalladioComponentModel/5.0#//resourceenvironment/ResourceCo" +
        "ntainer")]
    [DebuggerDisplayAttribute("ResourceContainer {Id}")]
    public partial class ResourceContainer : NMFExamples.Pcm.Core.Entity.Entity, IResourceContainer, IModelElement
    {
        
        private static Lazy<ITypedElement> _activeResourceSpecifications_ResourceContainerReference = new Lazy<ITypedElement>(RetrieveActiveResourceSpecifications_ResourceContainerReference);
        
        /// <summary>
        /// The backing field for the ActiveResourceSpecifications_ResourceContainer property
        /// </summary>
        private ResourceContainerActiveResourceSpecifications_ResourceContainerCollection _activeResourceSpecifications_ResourceContainer;
        
        private static Lazy<ITypedElement> _resourceEnvironment_ResourceContainerReference = new Lazy<ITypedElement>(RetrieveResourceEnvironment_ResourceContainerReference);
        
        /// <summary>
        /// The backing field for the ResourceEnvironment_ResourceContainer property
        /// </summary>
        private IResourceEnvironment _resourceEnvironment_ResourceContainer;
        
        private static Lazy<ITypedElement> _nestedResourceContainers__ResourceContainerReference = new Lazy<ITypedElement>(RetrieveNestedResourceContainers__ResourceContainerReference);
        
        /// <summary>
        /// The backing field for the NestedResourceContainers__ResourceContainer property
        /// </summary>
        private ResourceContainerNestedResourceContainers__ResourceContainerCollection _nestedResourceContainers__ResourceContainer;
        
        private static Lazy<ITypedElement> _parentResourceContainer__ResourceContainerReference = new Lazy<ITypedElement>(RetrieveParentResourceContainer__ResourceContainerReference);
        
        /// <summary>
        /// The backing field for the ParentResourceContainer__ResourceContainer property
        /// </summary>
        private IResourceContainer _parentResourceContainer__ResourceContainer;
        
        private static IClass _classInstance;
        
        public ResourceContainer()
        {
            this._activeResourceSpecifications_ResourceContainer = new ResourceContainerActiveResourceSpecifications_ResourceContainerCollection(this);
            this._activeResourceSpecifications_ResourceContainer.CollectionChanging += this.ActiveResourceSpecifications_ResourceContainerCollectionChanging;
            this._activeResourceSpecifications_ResourceContainer.CollectionChanged += this.ActiveResourceSpecifications_ResourceContainerCollectionChanged;
            this._nestedResourceContainers__ResourceContainer = new ResourceContainerNestedResourceContainers__ResourceContainerCollection(this);
            this._nestedResourceContainers__ResourceContainer.CollectionChanging += this.NestedResourceContainers__ResourceContainerCollectionChanging;
            this._nestedResourceContainers__ResourceContainer.CollectionChanged += this.NestedResourceContainers__ResourceContainerCollectionChanged;
        }
        
        /// <summary>
        /// The activeResourceSpecifications_ResourceContainer property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlElementNameAttribute("activeResourceSpecifications_ResourceContainer")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [XmlOppositeAttribute("resourceContainer_ProcessingResourceSpecification")]
        [ConstantAttribute()]
        public IListExpression<IProcessingResourceSpecification> ActiveResourceSpecifications_ResourceContainer
        {
            get
            {
                return this._activeResourceSpecifications_ResourceContainer;
            }
        }
        
        /// <summary>
        /// The resourceEnvironment_ResourceContainer property
        /// </summary>
        [XmlElementNameAttribute("resourceEnvironment_ResourceContainer")]
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Hidden)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("resourceContainer_ResourceEnvironment")]
        public IResourceEnvironment ResourceEnvironment_ResourceContainer
        {
            get
            {
                return this._resourceEnvironment_ResourceContainer;
            }
            set
            {
                if ((this._resourceEnvironment_ResourceContainer != value))
                {
                    IResourceEnvironment old = this._resourceEnvironment_ResourceContainer;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnResourceEnvironment_ResourceContainerChanging(e);
                    this.OnPropertyChanging("ResourceEnvironment_ResourceContainer", e, _resourceEnvironment_ResourceContainerReference);
                    this._resourceEnvironment_ResourceContainer = value;
                    this.Parent = value;
                    if ((old != null))
                    {
                        old.ResourceContainer_ResourceEnvironment.Remove(this);
                        old.Deleted -= this.OnResetResourceEnvironment_ResourceContainer;
                    }
                    if ((value != null))
                    {
                        if ((value.ResourceContainer_ResourceEnvironment.Contains(this) != true))
                        {
                            value.ResourceContainer_ResourceEnvironment.Add(this);
                        }
                        value.Deleted += this.OnResetResourceEnvironment_ResourceContainer;
                    }
                    this.OnResourceEnvironment_ResourceContainerChanged(e);
                    this.OnPropertyChanged("ResourceEnvironment_ResourceContainer", e, _resourceEnvironment_ResourceContainerReference);
                }
            }
        }
        
        /// <summary>
        /// The nestedResourceContainers__ResourceContainer property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlElementNameAttribute("nestedResourceContainers__ResourceContainer")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [XmlOppositeAttribute("parentResourceContainer__ResourceContainer")]
        [ConstantAttribute()]
        public IListExpression<IResourceContainer> NestedResourceContainers__ResourceContainer
        {
            get
            {
                return this._nestedResourceContainers__ResourceContainer;
            }
        }
        
        /// <summary>
        /// The parentResourceContainer__ResourceContainer property
        /// </summary>
        [XmlElementNameAttribute("parentResourceContainer__ResourceContainer")]
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Hidden)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("nestedResourceContainers__ResourceContainer")]
        public IResourceContainer ParentResourceContainer__ResourceContainer
        {
            get
            {
                return this._parentResourceContainer__ResourceContainer;
            }
            set
            {
                if ((this._parentResourceContainer__ResourceContainer != value))
                {
                    IResourceContainer old = this._parentResourceContainer__ResourceContainer;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnParentResourceContainer__ResourceContainerChanging(e);
                    this.OnPropertyChanging("ParentResourceContainer__ResourceContainer", e, _parentResourceContainer__ResourceContainerReference);
                    this._parentResourceContainer__ResourceContainer = value;
                    this.Parent = value;
                    if ((old != null))
                    {
                        old.NestedResourceContainers__ResourceContainer.Remove(this);
                        old.Deleted -= this.OnResetParentResourceContainer__ResourceContainer;
                    }
                    if ((value != null))
                    {
                        if ((value.NestedResourceContainers__ResourceContainer.Contains(this) != true))
                        {
                            value.NestedResourceContainers__ResourceContainer.Add(this);
                        }
                        value.Deleted += this.OnResetParentResourceContainer__ResourceContainer;
                    }
                    this.OnParentResourceContainer__ResourceContainerChanged(e);
                    this.OnPropertyChanged("ParentResourceContainer__ResourceContainer", e, _parentResourceContainer__ResourceContainerReference);
                }
            }
        }
        
        /// <summary>
        /// Gets the child model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> Children
        {
            get
            {
                return base.Children.Concat(new ResourceContainerChildrenCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new ResourceContainerReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://sdq.ipd.uka.de/PalladioComponentModel/5.0#//resourceenvironment/ResourceCo" +
                            "ntainer")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the ResourceEnvironment_ResourceContainer property changes its value
        /// </summary>
        public event global::System.EventHandler<ValueChangedEventArgs> ResourceEnvironment_ResourceContainerChanging;
        
        /// <summary>
        /// Gets fired when the ResourceEnvironment_ResourceContainer property changed its value
        /// </summary>
        public event global::System.EventHandler<ValueChangedEventArgs> ResourceEnvironment_ResourceContainerChanged;
        
        /// <summary>
        /// Gets fired before the ParentResourceContainer__ResourceContainer property changes its value
        /// </summary>
        public event global::System.EventHandler<ValueChangedEventArgs> ParentResourceContainer__ResourceContainerChanging;
        
        /// <summary>
        /// Gets fired when the ParentResourceContainer__ResourceContainer property changed its value
        /// </summary>
        public event global::System.EventHandler<ValueChangedEventArgs> ParentResourceContainer__ResourceContainerChanged;
        
        private static ITypedElement RetrieveActiveResourceSpecifications_ResourceContainerReference()
        {
            return ((ITypedElement)(((ModelElement)(NMFExamples.Pcm.Resourceenvironment.ResourceContainer.ClassInstance)).Resolve("activeResourceSpecifications_ResourceContainer")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the ActiveResourceSpecifications_ResourceContainer property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ActiveResourceSpecifications_ResourceContainerCollectionChanging(object sender, NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("ActiveResourceSpecifications_ResourceContainer", e, _activeResourceSpecifications_ResourceContainerReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the ActiveResourceSpecifications_ResourceContainer property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ActiveResourceSpecifications_ResourceContainerCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("ActiveResourceSpecifications_ResourceContainer", e, _activeResourceSpecifications_ResourceContainerReference);
        }
        
        private static ITypedElement RetrieveResourceEnvironment_ResourceContainerReference()
        {
            return ((ITypedElement)(((ModelElement)(NMFExamples.Pcm.Resourceenvironment.ResourceContainer.ClassInstance)).Resolve("resourceEnvironment_ResourceContainer")));
        }
        
        /// <summary>
        /// Raises the ResourceEnvironment_ResourceContainerChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnResourceEnvironment_ResourceContainerChanging(ValueChangedEventArgs eventArgs)
        {
            global::System.EventHandler<ValueChangedEventArgs> handler = this.ResourceEnvironment_ResourceContainerChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ResourceEnvironment_ResourceContainerChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnResourceEnvironment_ResourceContainerChanged(ValueChangedEventArgs eventArgs)
        {
            global::System.EventHandler<ValueChangedEventArgs> handler = this.ResourceEnvironment_ResourceContainerChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the ResourceEnvironment_ResourceContainer property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetResourceEnvironment_ResourceContainer(object sender, global::System.EventArgs eventArgs)
        {
            this.ResourceEnvironment_ResourceContainer = null;
        }
        
        private static ITypedElement RetrieveNestedResourceContainers__ResourceContainerReference()
        {
            return ((ITypedElement)(((ModelElement)(NMFExamples.Pcm.Resourceenvironment.ResourceContainer.ClassInstance)).Resolve("nestedResourceContainers__ResourceContainer")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the NestedResourceContainers__ResourceContainer property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void NestedResourceContainers__ResourceContainerCollectionChanging(object sender, NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("NestedResourceContainers__ResourceContainer", e, _nestedResourceContainers__ResourceContainerReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the NestedResourceContainers__ResourceContainer property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void NestedResourceContainers__ResourceContainerCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("NestedResourceContainers__ResourceContainer", e, _nestedResourceContainers__ResourceContainerReference);
        }
        
        private static ITypedElement RetrieveParentResourceContainer__ResourceContainerReference()
        {
            return ((ITypedElement)(((ModelElement)(NMFExamples.Pcm.Resourceenvironment.ResourceContainer.ClassInstance)).Resolve("parentResourceContainer__ResourceContainer")));
        }
        
        /// <summary>
        /// Raises the ParentResourceContainer__ResourceContainerChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnParentResourceContainer__ResourceContainerChanging(ValueChangedEventArgs eventArgs)
        {
            global::System.EventHandler<ValueChangedEventArgs> handler = this.ParentResourceContainer__ResourceContainerChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ParentResourceContainer__ResourceContainerChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnParentResourceContainer__ResourceContainerChanged(ValueChangedEventArgs eventArgs)
        {
            global::System.EventHandler<ValueChangedEventArgs> handler = this.ParentResourceContainer__ResourceContainerChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the ParentResourceContainer__ResourceContainer property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetParentResourceContainer__ResourceContainer(object sender, global::System.EventArgs eventArgs)
        {
            this.ParentResourceContainer__ResourceContainer = null;
        }
        
        /// <summary>
        /// Gets the relative URI fragment for the given child model element
        /// </summary>
        /// <returns>A fragment of the relative URI</returns>
        /// <param name="element">The element that should be looked for</param>
        protected override string GetRelativePathForNonIdentifiedChild(IModelElement element)
        {
            int activeResourceSpecifications_ResourceContainerIndex = ModelHelper.IndexOfReference(this.ActiveResourceSpecifications_ResourceContainer, element);
            if ((activeResourceSpecifications_ResourceContainerIndex != -1))
            {
                return ModelHelper.CreatePath("activeResourceSpecifications_ResourceContainer", activeResourceSpecifications_ResourceContainerIndex);
            }
            int nestedResourceContainers__ResourceContainerIndex = ModelHelper.IndexOfReference(this.NestedResourceContainers__ResourceContainer, element);
            if ((nestedResourceContainers__ResourceContainerIndex != -1))
            {
                return ModelHelper.CreatePath("nestedResourceContainers__ResourceContainer", nestedResourceContainers__ResourceContainerIndex);
            }
            return base.GetRelativePathForNonIdentifiedChild(element);
        }
        
        /// <summary>
        /// Resolves the given URI to a child model element
        /// </summary>
        /// <returns>The model element or null if it could not be found</returns>
        /// <param name="reference">The requested reference name</param>
        /// <param name="index">The index of this reference</param>
        protected override IModelElement GetModelElementForReference(string reference, int index)
        {
            if ((reference == "ACTIVERESOURCESPECIFICATIONS_RESOURCECONTAINER"))
            {
                if ((index < this.ActiveResourceSpecifications_ResourceContainer.Count))
                {
                    return this.ActiveResourceSpecifications_ResourceContainer[index];
                }
                else
                {
                    return null;
                }
            }
            if ((reference == "NESTEDRESOURCECONTAINERS__RESOURCECONTAINER"))
            {
                if ((index < this.NestedResourceContainers__ResourceContainer.Count))
                {
                    return this.NestedResourceContainers__ResourceContainer[index];
                }
                else
                {
                    return null;
                }
            }
            return base.GetModelElementForReference(reference, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override global::System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "ACTIVERESOURCESPECIFICATIONS_RESOURCECONTAINER"))
            {
                return this._activeResourceSpecifications_ResourceContainer;
            }
            if ((feature == "NESTEDRESOURCECONTAINERS__RESOURCECONTAINER"))
            {
                return this._nestedResourceContainers__ResourceContainer;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "RESOURCEENVIRONMENT_RESOURCECONTAINER"))
            {
                this.ResourceEnvironment_ResourceContainer = ((IResourceEnvironment)(value));
                return;
            }
            if ((feature == "PARENTRESOURCECONTAINER__RESOURCECONTAINER"))
            {
                this.ParentResourceContainer__ResourceContainer = ((IResourceContainer)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "ResourceEnvironment_ResourceContainer"))
            {
                return new ResourceEnvironment_ResourceContainerProxy(this);
            }
            if ((attribute == "ParentResourceContainer__ResourceContainer"))
            {
                return new ParentResourceContainer__ResourceContainerProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "ResourceEnvironment_ResourceContainer"))
            {
                return new ResourceEnvironment_ResourceContainerProxy(this);
            }
            if ((reference == "ParentResourceContainer__ResourceContainer"))
            {
                return new ParentResourceContainer__ResourceContainerProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the property name for the given container
        /// </summary>
        /// <returns>The name of the respective container reference</returns>
        /// <param name="container">The container object</param>
        protected override string GetCompositionName(object container)
        {
            if ((container == this._activeResourceSpecifications_ResourceContainer))
            {
                return "activeResourceSpecifications_ResourceContainer";
            }
            if ((container == this._nestedResourceContainers__ResourceContainer))
            {
                return "nestedResourceContainers__ResourceContainer";
            }
            return base.GetCompositionName(container);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://sdq.ipd.uka.de/PalladioComponentModel/5.0#//resourceenvironment/ResourceCo" +
                        "ntainer")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the ResourceContainer class
        /// </summary>
        public class ResourceContainerChildrenCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private ResourceContainer _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public ResourceContainerChildrenCollection(ResourceContainer parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.ActiveResourceSpecifications_ResourceContainer.Count);
                    count = (count + this._parent.NestedResourceContainers__ResourceContainer.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.ActiveResourceSpecifications_ResourceContainer.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.NestedResourceContainers__ResourceContainer.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.ActiveResourceSpecifications_ResourceContainer.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.NestedResourceContainers__ResourceContainer.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IProcessingResourceSpecification activeResourceSpecifications_ResourceContainerCasted = item.As<IProcessingResourceSpecification>();
                if ((activeResourceSpecifications_ResourceContainerCasted != null))
                {
                    this._parent.ActiveResourceSpecifications_ResourceContainer.Add(activeResourceSpecifications_ResourceContainerCasted);
                }
                IResourceContainer nestedResourceContainers__ResourceContainerCasted = item.As<IResourceContainer>();
                if ((nestedResourceContainers__ResourceContainerCasted != null))
                {
                    this._parent.NestedResourceContainers__ResourceContainer.Add(nestedResourceContainers__ResourceContainerCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.ActiveResourceSpecifications_ResourceContainer.Clear();
                this._parent.NestedResourceContainers__ResourceContainer.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.ActiveResourceSpecifications_ResourceContainer.Contains(item))
                {
                    return true;
                }
                if (this._parent.NestedResourceContainers__ResourceContainer.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> activeResourceSpecifications_ResourceContainerEnumerator = this._parent.ActiveResourceSpecifications_ResourceContainer.GetEnumerator();
                try
                {
                    for (
                    ; activeResourceSpecifications_ResourceContainerEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = activeResourceSpecifications_ResourceContainerEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    activeResourceSpecifications_ResourceContainerEnumerator.Dispose();
                }
                IEnumerator<IModelElement> nestedResourceContainers__ResourceContainerEnumerator = this._parent.NestedResourceContainers__ResourceContainer.GetEnumerator();
                try
                {
                    for (
                    ; nestedResourceContainers__ResourceContainerEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = nestedResourceContainers__ResourceContainerEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    nestedResourceContainers__ResourceContainerEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IProcessingResourceSpecification processingResourceSpecificationItem = item.As<IProcessingResourceSpecification>();
                if (((processingResourceSpecificationItem != null) 
                            && this._parent.ActiveResourceSpecifications_ResourceContainer.Remove(processingResourceSpecificationItem)))
                {
                    return true;
                }
                IResourceContainer resourceContainerItem = item.As<IResourceContainer>();
                if (((resourceContainerItem != null) 
                            && this._parent.NestedResourceContainers__ResourceContainer.Remove(resourceContainerItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.ActiveResourceSpecifications_ResourceContainer).Concat(this._parent.NestedResourceContainers__ResourceContainer).GetEnumerator();
            }
        }
        
        /// <summary>
        /// The collection class to to represent the children of the ResourceContainer class
        /// </summary>
        public class ResourceContainerReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private ResourceContainer _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public ResourceContainerReferencedElementsCollection(ResourceContainer parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.ActiveResourceSpecifications_ResourceContainer.Count);
                    if ((this._parent.ResourceEnvironment_ResourceContainer != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.NestedResourceContainers__ResourceContainer.Count);
                    if ((this._parent.ParentResourceContainer__ResourceContainer != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.ActiveResourceSpecifications_ResourceContainer.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.ResourceEnvironment_ResourceContainerChanged += this.PropagateValueChanges;
                this._parent.NestedResourceContainers__ResourceContainer.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.ParentResourceContainer__ResourceContainerChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.ActiveResourceSpecifications_ResourceContainer.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.ResourceEnvironment_ResourceContainerChanged -= this.PropagateValueChanges;
                this._parent.NestedResourceContainers__ResourceContainer.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.ParentResourceContainer__ResourceContainerChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IProcessingResourceSpecification activeResourceSpecifications_ResourceContainerCasted = item.As<IProcessingResourceSpecification>();
                if ((activeResourceSpecifications_ResourceContainerCasted != null))
                {
                    this._parent.ActiveResourceSpecifications_ResourceContainer.Add(activeResourceSpecifications_ResourceContainerCasted);
                }
                if ((this._parent.ResourceEnvironment_ResourceContainer == null))
                {
                    IResourceEnvironment resourceEnvironment_ResourceContainerCasted = item.As<IResourceEnvironment>();
                    if ((resourceEnvironment_ResourceContainerCasted != null))
                    {
                        this._parent.ResourceEnvironment_ResourceContainer = resourceEnvironment_ResourceContainerCasted;
                        return;
                    }
                }
                IResourceContainer nestedResourceContainers__ResourceContainerCasted = item.As<IResourceContainer>();
                if ((nestedResourceContainers__ResourceContainerCasted != null))
                {
                    this._parent.NestedResourceContainers__ResourceContainer.Add(nestedResourceContainers__ResourceContainerCasted);
                }
                if ((this._parent.ParentResourceContainer__ResourceContainer == null))
                {
                    IResourceContainer parentResourceContainer__ResourceContainerCasted = item.As<IResourceContainer>();
                    if ((parentResourceContainer__ResourceContainerCasted != null))
                    {
                        this._parent.ParentResourceContainer__ResourceContainer = parentResourceContainer__ResourceContainerCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.ActiveResourceSpecifications_ResourceContainer.Clear();
                this._parent.ResourceEnvironment_ResourceContainer = null;
                this._parent.NestedResourceContainers__ResourceContainer.Clear();
                this._parent.ParentResourceContainer__ResourceContainer = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.ActiveResourceSpecifications_ResourceContainer.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.ResourceEnvironment_ResourceContainer))
                {
                    return true;
                }
                if (this._parent.NestedResourceContainers__ResourceContainer.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.ParentResourceContainer__ResourceContainer))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> activeResourceSpecifications_ResourceContainerEnumerator = this._parent.ActiveResourceSpecifications_ResourceContainer.GetEnumerator();
                try
                {
                    for (
                    ; activeResourceSpecifications_ResourceContainerEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = activeResourceSpecifications_ResourceContainerEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    activeResourceSpecifications_ResourceContainerEnumerator.Dispose();
                }
                if ((this._parent.ResourceEnvironment_ResourceContainer != null))
                {
                    array[arrayIndex] = this._parent.ResourceEnvironment_ResourceContainer;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> nestedResourceContainers__ResourceContainerEnumerator = this._parent.NestedResourceContainers__ResourceContainer.GetEnumerator();
                try
                {
                    for (
                    ; nestedResourceContainers__ResourceContainerEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = nestedResourceContainers__ResourceContainerEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    nestedResourceContainers__ResourceContainerEnumerator.Dispose();
                }
                if ((this._parent.ParentResourceContainer__ResourceContainer != null))
                {
                    array[arrayIndex] = this._parent.ParentResourceContainer__ResourceContainer;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IProcessingResourceSpecification processingResourceSpecificationItem = item.As<IProcessingResourceSpecification>();
                if (((processingResourceSpecificationItem != null) 
                            && this._parent.ActiveResourceSpecifications_ResourceContainer.Remove(processingResourceSpecificationItem)))
                {
                    return true;
                }
                if ((this._parent.ResourceEnvironment_ResourceContainer == item))
                {
                    this._parent.ResourceEnvironment_ResourceContainer = null;
                    return true;
                }
                IResourceContainer resourceContainerItem = item.As<IResourceContainer>();
                if (((resourceContainerItem != null) 
                            && this._parent.NestedResourceContainers__ResourceContainer.Remove(resourceContainerItem)))
                {
                    return true;
                }
                if ((this._parent.ParentResourceContainer__ResourceContainer == item))
                {
                    this._parent.ParentResourceContainer__ResourceContainer = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.ActiveResourceSpecifications_ResourceContainer).Concat(this._parent.ResourceEnvironment_ResourceContainer).Concat(this._parent.NestedResourceContainers__ResourceContainer).Concat(this._parent.ParentResourceContainer__ResourceContainer).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the resourceEnvironment_ResourceContainer property
        /// </summary>
        private sealed class ResourceEnvironment_ResourceContainerProxy : ModelPropertyChange<IResourceContainer, IResourceEnvironment>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ResourceEnvironment_ResourceContainerProxy(IResourceContainer modelElement) : 
                    base(modelElement, "resourceEnvironment_ResourceContainer")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IResourceEnvironment Value
            {
                get
                {
                    return this.ModelElement.ResourceEnvironment_ResourceContainer;
                }
                set
                {
                    this.ModelElement.ResourceEnvironment_ResourceContainer = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the parentResourceContainer__ResourceContainer property
        /// </summary>
        private sealed class ParentResourceContainer__ResourceContainerProxy : ModelPropertyChange<IResourceContainer, IResourceContainer>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ParentResourceContainer__ResourceContainerProxy(IResourceContainer modelElement) : 
                    base(modelElement, "parentResourceContainer__ResourceContainer")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IResourceContainer Value
            {
                get
                {
                    return this.ModelElement.ParentResourceContainer__ResourceContainer;
                }
                set
                {
                    this.ModelElement.ParentResourceContainer__ResourceContainer = value;
                }
            }
        }
    }
}

