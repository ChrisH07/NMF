//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMFExamples.Identifier;
using NMFExamples.Pcm.Core;
using NMFExamples.Pcm.Core.Entity;
using NMFExamples.Pcm.Resourcetype;
using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using global::System.Collections;
using global::System.Collections.Generic;
using global::System.Collections.ObjectModel;
using global::System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;

namespace NMFExamples.Pcm.Resourceenvironment
{
    
    
    /// <summary>
    /// The default implementation of the ProcessingResourceSpecification class
    /// </summary>
    [XmlNamespaceAttribute("http://sdq.ipd.uka.de/PalladioComponentModel/ResourceEnvironment/5.0")]
    [XmlNamespacePrefixAttribute("resourceenvironment")]
    [ModelRepresentationClassAttribute("http://sdq.ipd.uka.de/PalladioComponentModel/5.0#//resourceenvironment/Processing" +
        "ResourceSpecification")]
    [DebuggerDisplayAttribute("ProcessingResourceSpecification {Id}")]
    public partial class ProcessingResourceSpecification : NMFExamples.Identifier.Identifier, IProcessingResourceSpecification, IModelElement
    {
        
        /// <summary>
        /// The backing field for the MTTR property
        /// </summary>
        private double _mTTR = 0D;
        
        private static Lazy<ITypedElement> _mTTRAttribute = new Lazy<ITypedElement>(RetrieveMTTRAttribute);
        
        /// <summary>
        /// The backing field for the MTTF property
        /// </summary>
        private double _mTTF = 0D;
        
        private static Lazy<ITypedElement> _mTTFAttribute = new Lazy<ITypedElement>(RetrieveMTTFAttribute);
        
        /// <summary>
        /// The backing field for the RequiredByContainer property
        /// </summary>
        private bool _requiredByContainer;
        
        private static Lazy<ITypedElement> _requiredByContainerAttribute = new Lazy<ITypedElement>(RetrieveRequiredByContainerAttribute);
        
        /// <summary>
        /// The backing field for the NumberOfReplicas property
        /// </summary>
        private int _numberOfReplicas = 1;
        
        private static Lazy<ITypedElement> _numberOfReplicasAttribute = new Lazy<ITypedElement>(RetrieveNumberOfReplicasAttribute);
        
        private static Lazy<ITypedElement> _schedulingPolicyReference = new Lazy<ITypedElement>(RetrieveSchedulingPolicyReference);
        
        /// <summary>
        /// The backing field for the SchedulingPolicy property
        /// </summary>
        private ISchedulingPolicy _schedulingPolicy;
        
        private static Lazy<ITypedElement> _activeResourceType_ActiveResourceSpecificationReference = new Lazy<ITypedElement>(RetrieveActiveResourceType_ActiveResourceSpecificationReference);
        
        /// <summary>
        /// The backing field for the ActiveResourceType_ActiveResourceSpecification property
        /// </summary>
        private IProcessingResourceType _activeResourceType_ActiveResourceSpecification;
        
        private static Lazy<ITypedElement> _processingRate_ProcessingResourceSpecificationReference = new Lazy<ITypedElement>(RetrieveProcessingRate_ProcessingResourceSpecificationReference);
        
        /// <summary>
        /// The backing field for the ProcessingRate_ProcessingResourceSpecification property
        /// </summary>
        private IPCMRandomVariable _processingRate_ProcessingResourceSpecification;
        
        private static Lazy<ITypedElement> _resourceContainer_ProcessingResourceSpecificationReference = new Lazy<ITypedElement>(RetrieveResourceContainer_ProcessingResourceSpecificationReference);
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The MTTR property
        /// </summary>
        [DefaultValueAttribute(0D)]
        [XmlAttributeAttribute(true)]
        public double MTTR
        {
            get
            {
                return this._mTTR;
            }
            set
            {
                if ((this._mTTR != value))
                {
                    double old = this._mTTR;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnMTTRChanging(e);
                    this.OnPropertyChanging("MTTR", e, _mTTRAttribute);
                    this._mTTR = value;
                    this.OnMTTRChanged(e);
                    this.OnPropertyChanged("MTTR", e, _mTTRAttribute);
                }
            }
        }
        
        /// <summary>
        /// The MTTF property
        /// </summary>
        [DefaultValueAttribute(0D)]
        [XmlAttributeAttribute(true)]
        public double MTTF
        {
            get
            {
                return this._mTTF;
            }
            set
            {
                if ((this._mTTF != value))
                {
                    double old = this._mTTF;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnMTTFChanging(e);
                    this.OnPropertyChanging("MTTF", e, _mTTFAttribute);
                    this._mTTF = value;
                    this.OnMTTFChanged(e);
                    this.OnPropertyChanged("MTTF", e, _mTTFAttribute);
                }
            }
        }
        
        /// <summary>
        /// The requiredByContainer property
        /// </summary>
        [XmlElementNameAttribute("requiredByContainer")]
        [XmlAttributeAttribute(true)]
        public bool RequiredByContainer
        {
            get
            {
                return this._requiredByContainer;
            }
            set
            {
                if ((this._requiredByContainer != value))
                {
                    bool old = this._requiredByContainer;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnRequiredByContainerChanging(e);
                    this.OnPropertyChanging("RequiredByContainer", e, _requiredByContainerAttribute);
                    this._requiredByContainer = value;
                    this.OnRequiredByContainerChanged(e);
                    this.OnPropertyChanged("RequiredByContainer", e, _requiredByContainerAttribute);
                }
            }
        }
        
        /// <summary>
        /// The numberOfReplicas property
        /// </summary>
        [DefaultValueAttribute(1)]
        [XmlElementNameAttribute("numberOfReplicas")]
        [XmlAttributeAttribute(true)]
        public int NumberOfReplicas
        {
            get
            {
                return this._numberOfReplicas;
            }
            set
            {
                if ((this._numberOfReplicas != value))
                {
                    int old = this._numberOfReplicas;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnNumberOfReplicasChanging(e);
                    this.OnPropertyChanging("NumberOfReplicas", e, _numberOfReplicasAttribute);
                    this._numberOfReplicas = value;
                    this.OnNumberOfReplicasChanged(e);
                    this.OnPropertyChanged("NumberOfReplicas", e, _numberOfReplicasAttribute);
                }
            }
        }
        
        /// <summary>
        /// The schedulingPolicy property
        /// </summary>
        [XmlElementNameAttribute("schedulingPolicy")]
        [XmlAttributeAttribute(true)]
        public ISchedulingPolicy SchedulingPolicy
        {
            get
            {
                return this._schedulingPolicy;
            }
            set
            {
                if ((this._schedulingPolicy != value))
                {
                    ISchedulingPolicy old = this._schedulingPolicy;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnSchedulingPolicyChanging(e);
                    this.OnPropertyChanging("SchedulingPolicy", e, _schedulingPolicyReference);
                    this._schedulingPolicy = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetSchedulingPolicy;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetSchedulingPolicy;
                    }
                    this.OnSchedulingPolicyChanged(e);
                    this.OnPropertyChanged("SchedulingPolicy", e, _schedulingPolicyReference);
                }
            }
        }
        
        /// <summary>
        /// The activeResourceType_ActiveResourceSpecification property
        /// </summary>
        [XmlElementNameAttribute("activeResourceType_ActiveResourceSpecification")]
        [XmlAttributeAttribute(true)]
        public IProcessingResourceType ActiveResourceType_ActiveResourceSpecification
        {
            get
            {
                return this._activeResourceType_ActiveResourceSpecification;
            }
            set
            {
                if ((this._activeResourceType_ActiveResourceSpecification != value))
                {
                    IProcessingResourceType old = this._activeResourceType_ActiveResourceSpecification;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnActiveResourceType_ActiveResourceSpecificationChanging(e);
                    this.OnPropertyChanging("ActiveResourceType_ActiveResourceSpecification", e, _activeResourceType_ActiveResourceSpecificationReference);
                    this._activeResourceType_ActiveResourceSpecification = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetActiveResourceType_ActiveResourceSpecification;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetActiveResourceType_ActiveResourceSpecification;
                    }
                    this.OnActiveResourceType_ActiveResourceSpecificationChanged(e);
                    this.OnPropertyChanged("ActiveResourceType_ActiveResourceSpecification", e, _activeResourceType_ActiveResourceSpecificationReference);
                }
            }
        }
        
        /// <summary>
        /// The processingRate_ProcessingResourceSpecification property
        /// </summary>
        [XmlElementNameAttribute("processingRate_ProcessingResourceSpecification")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [XmlOppositeAttribute("processingResourceSpecification_processingRate_PCMRandomVariable")]
        public IPCMRandomVariable ProcessingRate_ProcessingResourceSpecification
        {
            get
            {
                return this._processingRate_ProcessingResourceSpecification;
            }
            set
            {
                if ((this._processingRate_ProcessingResourceSpecification != value))
                {
                    IPCMRandomVariable old = this._processingRate_ProcessingResourceSpecification;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnProcessingRate_ProcessingResourceSpecificationChanging(e);
                    this.OnPropertyChanging("ProcessingRate_ProcessingResourceSpecification", e, _processingRate_ProcessingResourceSpecificationReference);
                    this._processingRate_ProcessingResourceSpecification = value;
                    if ((old != null))
                    {
                        old.ProcessingResourceSpecification_processingRate_PCMRandomVariable = null;
                        old.Parent = null;
                        old.Deleted -= this.OnResetProcessingRate_ProcessingResourceSpecification;
                    }
                    if ((value != null))
                    {
                        value.ProcessingResourceSpecification_processingRate_PCMRandomVariable = this;
                        value.Parent = this;
                        value.Deleted += this.OnResetProcessingRate_ProcessingResourceSpecification;
                    }
                    this.OnProcessingRate_ProcessingResourceSpecificationChanged(e);
                    this.OnPropertyChanged("ProcessingRate_ProcessingResourceSpecification", e, _processingRate_ProcessingResourceSpecificationReference);
                }
            }
        }
        
        /// <summary>
        /// The resourceContainer_ProcessingResourceSpecification property
        /// </summary>
        [XmlElementNameAttribute("resourceContainer_ProcessingResourceSpecification")]
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Hidden)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("activeResourceSpecifications_ResourceContainer")]
        public IResourceContainer ResourceContainer_ProcessingResourceSpecification
        {
            get
            {
                return ModelHelper.CastAs<IResourceContainer>(this.Parent);
            }
            set
            {
                this.Parent = value;
            }
        }
        
        /// <summary>
        /// Gets the child model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> Children
        {
            get
            {
                return base.Children.Concat(new ProcessingResourceSpecificationChildrenCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new ProcessingResourceSpecificationReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://sdq.ipd.uka.de/PalladioComponentModel/5.0#//resourceenvironment/Processing" +
                            "ResourceSpecification")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the MTTR property changes its value
        /// </summary>
        public event global::System.EventHandler<ValueChangedEventArgs> MTTRChanging;
        
        /// <summary>
        /// Gets fired when the MTTR property changed its value
        /// </summary>
        public event global::System.EventHandler<ValueChangedEventArgs> MTTRChanged;
        
        /// <summary>
        /// Gets fired before the MTTF property changes its value
        /// </summary>
        public event global::System.EventHandler<ValueChangedEventArgs> MTTFChanging;
        
        /// <summary>
        /// Gets fired when the MTTF property changed its value
        /// </summary>
        public event global::System.EventHandler<ValueChangedEventArgs> MTTFChanged;
        
        /// <summary>
        /// Gets fired before the RequiredByContainer property changes its value
        /// </summary>
        public event global::System.EventHandler<ValueChangedEventArgs> RequiredByContainerChanging;
        
        /// <summary>
        /// Gets fired when the RequiredByContainer property changed its value
        /// </summary>
        public event global::System.EventHandler<ValueChangedEventArgs> RequiredByContainerChanged;
        
        /// <summary>
        /// Gets fired before the NumberOfReplicas property changes its value
        /// </summary>
        public event global::System.EventHandler<ValueChangedEventArgs> NumberOfReplicasChanging;
        
        /// <summary>
        /// Gets fired when the NumberOfReplicas property changed its value
        /// </summary>
        public event global::System.EventHandler<ValueChangedEventArgs> NumberOfReplicasChanged;
        
        /// <summary>
        /// Gets fired before the SchedulingPolicy property changes its value
        /// </summary>
        public event global::System.EventHandler<ValueChangedEventArgs> SchedulingPolicyChanging;
        
        /// <summary>
        /// Gets fired when the SchedulingPolicy property changed its value
        /// </summary>
        public event global::System.EventHandler<ValueChangedEventArgs> SchedulingPolicyChanged;
        
        /// <summary>
        /// Gets fired before the ActiveResourceType_ActiveResourceSpecification property changes its value
        /// </summary>
        public event global::System.EventHandler<ValueChangedEventArgs> ActiveResourceType_ActiveResourceSpecificationChanging;
        
        /// <summary>
        /// Gets fired when the ActiveResourceType_ActiveResourceSpecification property changed its value
        /// </summary>
        public event global::System.EventHandler<ValueChangedEventArgs> ActiveResourceType_ActiveResourceSpecificationChanged;
        
        /// <summary>
        /// Gets fired before the ProcessingRate_ProcessingResourceSpecification property changes its value
        /// </summary>
        public event global::System.EventHandler<ValueChangedEventArgs> ProcessingRate_ProcessingResourceSpecificationChanging;
        
        /// <summary>
        /// Gets fired when the ProcessingRate_ProcessingResourceSpecification property changed its value
        /// </summary>
        public event global::System.EventHandler<ValueChangedEventArgs> ProcessingRate_ProcessingResourceSpecificationChanged;
        
        /// <summary>
        /// Gets fired before the ResourceContainer_ProcessingResourceSpecification property changes its value
        /// </summary>
        public event global::System.EventHandler<ValueChangedEventArgs> ResourceContainer_ProcessingResourceSpecificationChanging;
        
        /// <summary>
        /// Gets fired when the ResourceContainer_ProcessingResourceSpecification property changed its value
        /// </summary>
        public event global::System.EventHandler<ValueChangedEventArgs> ResourceContainer_ProcessingResourceSpecificationChanged;
        
        private static ITypedElement RetrieveMTTRAttribute()
        {
            return ((ITypedElement)(((ModelElement)(NMFExamples.Pcm.Resourceenvironment.ProcessingResourceSpecification.ClassInstance)).Resolve("MTTR")));
        }
        
        /// <summary>
        /// Raises the MTTRChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMTTRChanging(ValueChangedEventArgs eventArgs)
        {
            global::System.EventHandler<ValueChangedEventArgs> handler = this.MTTRChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the MTTRChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMTTRChanged(ValueChangedEventArgs eventArgs)
        {
            global::System.EventHandler<ValueChangedEventArgs> handler = this.MTTRChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveMTTFAttribute()
        {
            return ((ITypedElement)(((ModelElement)(NMFExamples.Pcm.Resourceenvironment.ProcessingResourceSpecification.ClassInstance)).Resolve("MTTF")));
        }
        
        /// <summary>
        /// Raises the MTTFChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMTTFChanging(ValueChangedEventArgs eventArgs)
        {
            global::System.EventHandler<ValueChangedEventArgs> handler = this.MTTFChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the MTTFChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMTTFChanged(ValueChangedEventArgs eventArgs)
        {
            global::System.EventHandler<ValueChangedEventArgs> handler = this.MTTFChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveRequiredByContainerAttribute()
        {
            return ((ITypedElement)(((ModelElement)(NMFExamples.Pcm.Resourceenvironment.ProcessingResourceSpecification.ClassInstance)).Resolve("requiredByContainer")));
        }
        
        /// <summary>
        /// Raises the RequiredByContainerChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRequiredByContainerChanging(ValueChangedEventArgs eventArgs)
        {
            global::System.EventHandler<ValueChangedEventArgs> handler = this.RequiredByContainerChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the RequiredByContainerChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRequiredByContainerChanged(ValueChangedEventArgs eventArgs)
        {
            global::System.EventHandler<ValueChangedEventArgs> handler = this.RequiredByContainerChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveNumberOfReplicasAttribute()
        {
            return ((ITypedElement)(((ModelElement)(NMFExamples.Pcm.Resourceenvironment.ProcessingResourceSpecification.ClassInstance)).Resolve("numberOfReplicas")));
        }
        
        /// <summary>
        /// Raises the NumberOfReplicasChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnNumberOfReplicasChanging(ValueChangedEventArgs eventArgs)
        {
            global::System.EventHandler<ValueChangedEventArgs> handler = this.NumberOfReplicasChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the NumberOfReplicasChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnNumberOfReplicasChanged(ValueChangedEventArgs eventArgs)
        {
            global::System.EventHandler<ValueChangedEventArgs> handler = this.NumberOfReplicasChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveSchedulingPolicyReference()
        {
            return ((ITypedElement)(((ModelElement)(NMFExamples.Pcm.Resourceenvironment.ProcessingResourceSpecification.ClassInstance)).Resolve("schedulingPolicy")));
        }
        
        /// <summary>
        /// Raises the SchedulingPolicyChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSchedulingPolicyChanging(ValueChangedEventArgs eventArgs)
        {
            global::System.EventHandler<ValueChangedEventArgs> handler = this.SchedulingPolicyChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the SchedulingPolicyChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSchedulingPolicyChanged(ValueChangedEventArgs eventArgs)
        {
            global::System.EventHandler<ValueChangedEventArgs> handler = this.SchedulingPolicyChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the SchedulingPolicy property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetSchedulingPolicy(object sender, global::System.EventArgs eventArgs)
        {
            this.SchedulingPolicy = null;
        }
        
        private static ITypedElement RetrieveActiveResourceType_ActiveResourceSpecificationReference()
        {
            return ((ITypedElement)(((ModelElement)(NMFExamples.Pcm.Resourceenvironment.ProcessingResourceSpecification.ClassInstance)).Resolve("activeResourceType_ActiveResourceSpecification")));
        }
        
        /// <summary>
        /// Raises the ActiveResourceType_ActiveResourceSpecificationChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnActiveResourceType_ActiveResourceSpecificationChanging(ValueChangedEventArgs eventArgs)
        {
            global::System.EventHandler<ValueChangedEventArgs> handler = this.ActiveResourceType_ActiveResourceSpecificationChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ActiveResourceType_ActiveResourceSpecificationChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnActiveResourceType_ActiveResourceSpecificationChanged(ValueChangedEventArgs eventArgs)
        {
            global::System.EventHandler<ValueChangedEventArgs> handler = this.ActiveResourceType_ActiveResourceSpecificationChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the ActiveResourceType_ActiveResourceSpecification property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetActiveResourceType_ActiveResourceSpecification(object sender, global::System.EventArgs eventArgs)
        {
            this.ActiveResourceType_ActiveResourceSpecification = null;
        }
        
        private static ITypedElement RetrieveProcessingRate_ProcessingResourceSpecificationReference()
        {
            return ((ITypedElement)(((ModelElement)(NMFExamples.Pcm.Resourceenvironment.ProcessingResourceSpecification.ClassInstance)).Resolve("processingRate_ProcessingResourceSpecification")));
        }
        
        /// <summary>
        /// Raises the ProcessingRate_ProcessingResourceSpecificationChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnProcessingRate_ProcessingResourceSpecificationChanging(ValueChangedEventArgs eventArgs)
        {
            global::System.EventHandler<ValueChangedEventArgs> handler = this.ProcessingRate_ProcessingResourceSpecificationChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ProcessingRate_ProcessingResourceSpecificationChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnProcessingRate_ProcessingResourceSpecificationChanged(ValueChangedEventArgs eventArgs)
        {
            global::System.EventHandler<ValueChangedEventArgs> handler = this.ProcessingRate_ProcessingResourceSpecificationChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the ProcessingRate_ProcessingResourceSpecification property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetProcessingRate_ProcessingResourceSpecification(object sender, global::System.EventArgs eventArgs)
        {
            this.ProcessingRate_ProcessingResourceSpecification = null;
        }
        
        private static ITypedElement RetrieveResourceContainer_ProcessingResourceSpecificationReference()
        {
            return ((ITypedElement)(((ModelElement)(NMFExamples.Pcm.Resourceenvironment.ProcessingResourceSpecification.ClassInstance)).Resolve("resourceContainer_ProcessingResourceSpecification")));
        }
        
        /// <summary>
        /// Raises the ResourceContainer_ProcessingResourceSpecificationChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnResourceContainer_ProcessingResourceSpecificationChanging(ValueChangedEventArgs eventArgs)
        {
            global::System.EventHandler<ValueChangedEventArgs> handler = this.ResourceContainer_ProcessingResourceSpecificationChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Gets called when the parent model element of the current model element is about to change
        /// </summary>
        /// <param name="oldParent">The old parent model element</param>
        /// <param name="newParent">The new parent model element</param>
        protected override void OnParentChanging(IModelElement newParent, IModelElement oldParent)
        {
            IResourceContainer oldResourceContainer_ProcessingResourceSpecification = ModelHelper.CastAs<IResourceContainer>(oldParent);
            IResourceContainer newResourceContainer_ProcessingResourceSpecification = ModelHelper.CastAs<IResourceContainer>(newParent);
            ValueChangedEventArgs e = new ValueChangedEventArgs(oldResourceContainer_ProcessingResourceSpecification, newResourceContainer_ProcessingResourceSpecification);
            this.OnResourceContainer_ProcessingResourceSpecificationChanging(e);
            this.OnPropertyChanging("ResourceContainer_ProcessingResourceSpecification", e, _resourceContainer_ProcessingResourceSpecificationReference);
        }
        
        /// <summary>
        /// Raises the ResourceContainer_ProcessingResourceSpecificationChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnResourceContainer_ProcessingResourceSpecificationChanged(ValueChangedEventArgs eventArgs)
        {
            global::System.EventHandler<ValueChangedEventArgs> handler = this.ResourceContainer_ProcessingResourceSpecificationChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Gets called when the parent model element of the current model element changes
        /// </summary>
        /// <param name="oldParent">The old parent model element</param>
        /// <param name="newParent">The new parent model element</param>
        protected override void OnParentChanged(IModelElement newParent, IModelElement oldParent)
        {
            IResourceContainer oldResourceContainer_ProcessingResourceSpecification = ModelHelper.CastAs<IResourceContainer>(oldParent);
            IResourceContainer newResourceContainer_ProcessingResourceSpecification = ModelHelper.CastAs<IResourceContainer>(newParent);
            if ((oldResourceContainer_ProcessingResourceSpecification != null))
            {
                oldResourceContainer_ProcessingResourceSpecification.ActiveResourceSpecifications_ResourceContainer.Remove(this);
            }
            if ((newResourceContainer_ProcessingResourceSpecification != null))
            {
                newResourceContainer_ProcessingResourceSpecification.ActiveResourceSpecifications_ResourceContainer.Add(this);
            }
            ValueChangedEventArgs e = new ValueChangedEventArgs(oldResourceContainer_ProcessingResourceSpecification, newResourceContainer_ProcessingResourceSpecification);
            this.OnResourceContainer_ProcessingResourceSpecificationChanged(e);
            this.OnPropertyChanged("ResourceContainer_ProcessingResourceSpecification", e, _resourceContainer_ProcessingResourceSpecificationReference);
            base.OnParentChanged(newParent, oldParent);
        }
        
        /// <summary>
        /// Gets the relative URI fragment for the given child model element
        /// </summary>
        /// <returns>A fragment of the relative URI</returns>
        /// <param name="element">The element that should be looked for</param>
        protected override string GetRelativePathForNonIdentifiedChild(IModelElement element)
        {
            if ((element == this.ProcessingRate_ProcessingResourceSpecification))
            {
                return ModelHelper.CreatePath("ProcessingRate_ProcessingResourceSpecification");
            }
            return base.GetRelativePathForNonIdentifiedChild(element);
        }
        
        /// <summary>
        /// Resolves the given URI to a child model element
        /// </summary>
        /// <returns>The model element or null if it could not be found</returns>
        /// <param name="reference">The requested reference name</param>
        /// <param name="index">The index of this reference</param>
        protected override IModelElement GetModelElementForReference(string reference, int index)
        {
            if ((reference == "PROCESSINGRATE_PROCESSINGRESOURCESPECIFICATION"))
            {
                return this.ProcessingRate_ProcessingResourceSpecification;
            }
            return base.GetModelElementForReference(reference, index);
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "MTTR"))
            {
                return this.MTTR;
            }
            if ((attribute == "MTTF"))
            {
                return this.MTTF;
            }
            if ((attribute == "REQUIREDBYCONTAINER"))
            {
                return this.RequiredByContainer;
            }
            if ((attribute == "NUMBEROFREPLICAS"))
            {
                return this.NumberOfReplicas;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "SCHEDULINGPOLICY"))
            {
                this.SchedulingPolicy = ((ISchedulingPolicy)(value));
                return;
            }
            if ((feature == "ACTIVERESOURCETYPE_ACTIVERESOURCESPECIFICATION"))
            {
                this.ActiveResourceType_ActiveResourceSpecification = ((IProcessingResourceType)(value));
                return;
            }
            if ((feature == "PROCESSINGRATE_PROCESSINGRESOURCESPECIFICATION"))
            {
                this.ProcessingRate_ProcessingResourceSpecification = ((IPCMRandomVariable)(value));
                return;
            }
            if ((feature == "RESOURCECONTAINER_PROCESSINGRESOURCESPECIFICATION"))
            {
                this.ResourceContainer_ProcessingResourceSpecification = ((IResourceContainer)(value));
                return;
            }
            if ((feature == "MTTR"))
            {
                this.MTTR = ((double)(value));
                return;
            }
            if ((feature == "MTTF"))
            {
                this.MTTF = ((double)(value));
                return;
            }
            if ((feature == "REQUIREDBYCONTAINER"))
            {
                this.RequiredByContainer = ((bool)(value));
                return;
            }
            if ((feature == "NUMBEROFREPLICAS"))
            {
                this.NumberOfReplicas = ((int)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "SchedulingPolicy"))
            {
                return new SchedulingPolicyProxy(this);
            }
            if ((attribute == "ActiveResourceType_ActiveResourceSpecification"))
            {
                return new ActiveResourceType_ActiveResourceSpecificationProxy(this);
            }
            if ((attribute == "ProcessingRate_ProcessingResourceSpecification"))
            {
                return new ProcessingRate_ProcessingResourceSpecificationProxy(this);
            }
            if ((attribute == "ResourceContainer_ProcessingResourceSpecification"))
            {
                return new ResourceContainer_ProcessingResourceSpecificationProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "SchedulingPolicy"))
            {
                return new SchedulingPolicyProxy(this);
            }
            if ((reference == "ActiveResourceType_ActiveResourceSpecification"))
            {
                return new ActiveResourceType_ActiveResourceSpecificationProxy(this);
            }
            if ((reference == "ProcessingRate_ProcessingResourceSpecification"))
            {
                return new ProcessingRate_ProcessingResourceSpecificationProxy(this);
            }
            if ((reference == "ResourceContainer_ProcessingResourceSpecification"))
            {
                return new ResourceContainer_ProcessingResourceSpecificationProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://sdq.ipd.uka.de/PalladioComponentModel/5.0#//resourceenvironment/Processing" +
                        "ResourceSpecification")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the ProcessingResourceSpecification class
        /// </summary>
        public class ProcessingResourceSpecificationChildrenCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private ProcessingResourceSpecification _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public ProcessingResourceSpecificationChildrenCollection(ProcessingResourceSpecification parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.ProcessingRate_ProcessingResourceSpecification != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.ProcessingRate_ProcessingResourceSpecificationChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.ProcessingRate_ProcessingResourceSpecificationChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.ProcessingRate_ProcessingResourceSpecification == null))
                {
                    IPCMRandomVariable processingRate_ProcessingResourceSpecificationCasted = item.As<IPCMRandomVariable>();
                    if ((processingRate_ProcessingResourceSpecificationCasted != null))
                    {
                        this._parent.ProcessingRate_ProcessingResourceSpecification = processingRate_ProcessingResourceSpecificationCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.ProcessingRate_ProcessingResourceSpecification = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.ProcessingRate_ProcessingResourceSpecification))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.ProcessingRate_ProcessingResourceSpecification != null))
                {
                    array[arrayIndex] = this._parent.ProcessingRate_ProcessingResourceSpecification;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.ProcessingRate_ProcessingResourceSpecification == item))
                {
                    this._parent.ProcessingRate_ProcessingResourceSpecification = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.ProcessingRate_ProcessingResourceSpecification).GetEnumerator();
            }
        }
        
        /// <summary>
        /// The collection class to to represent the children of the ProcessingResourceSpecification class
        /// </summary>
        public class ProcessingResourceSpecificationReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private ProcessingResourceSpecification _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public ProcessingResourceSpecificationReferencedElementsCollection(ProcessingResourceSpecification parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.SchedulingPolicy != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.ActiveResourceType_ActiveResourceSpecification != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.ProcessingRate_ProcessingResourceSpecification != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.ResourceContainer_ProcessingResourceSpecification != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.SchedulingPolicyChanged += this.PropagateValueChanges;
                this._parent.ActiveResourceType_ActiveResourceSpecificationChanged += this.PropagateValueChanges;
                this._parent.ProcessingRate_ProcessingResourceSpecificationChanged += this.PropagateValueChanges;
                this._parent.ResourceContainer_ProcessingResourceSpecificationChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.SchedulingPolicyChanged -= this.PropagateValueChanges;
                this._parent.ActiveResourceType_ActiveResourceSpecificationChanged -= this.PropagateValueChanges;
                this._parent.ProcessingRate_ProcessingResourceSpecificationChanged -= this.PropagateValueChanges;
                this._parent.ResourceContainer_ProcessingResourceSpecificationChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.SchedulingPolicy == null))
                {
                    ISchedulingPolicy schedulingPolicyCasted = item.As<ISchedulingPolicy>();
                    if ((schedulingPolicyCasted != null))
                    {
                        this._parent.SchedulingPolicy = schedulingPolicyCasted;
                        return;
                    }
                }
                if ((this._parent.ActiveResourceType_ActiveResourceSpecification == null))
                {
                    IProcessingResourceType activeResourceType_ActiveResourceSpecificationCasted = item.As<IProcessingResourceType>();
                    if ((activeResourceType_ActiveResourceSpecificationCasted != null))
                    {
                        this._parent.ActiveResourceType_ActiveResourceSpecification = activeResourceType_ActiveResourceSpecificationCasted;
                        return;
                    }
                }
                if ((this._parent.ProcessingRate_ProcessingResourceSpecification == null))
                {
                    IPCMRandomVariable processingRate_ProcessingResourceSpecificationCasted = item.As<IPCMRandomVariable>();
                    if ((processingRate_ProcessingResourceSpecificationCasted != null))
                    {
                        this._parent.ProcessingRate_ProcessingResourceSpecification = processingRate_ProcessingResourceSpecificationCasted;
                        return;
                    }
                }
                if ((this._parent.ResourceContainer_ProcessingResourceSpecification == null))
                {
                    IResourceContainer resourceContainer_ProcessingResourceSpecificationCasted = item.As<IResourceContainer>();
                    if ((resourceContainer_ProcessingResourceSpecificationCasted != null))
                    {
                        this._parent.ResourceContainer_ProcessingResourceSpecification = resourceContainer_ProcessingResourceSpecificationCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.SchedulingPolicy = null;
                this._parent.ActiveResourceType_ActiveResourceSpecification = null;
                this._parent.ProcessingRate_ProcessingResourceSpecification = null;
                this._parent.ResourceContainer_ProcessingResourceSpecification = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.SchedulingPolicy))
                {
                    return true;
                }
                if ((item == this._parent.ActiveResourceType_ActiveResourceSpecification))
                {
                    return true;
                }
                if ((item == this._parent.ProcessingRate_ProcessingResourceSpecification))
                {
                    return true;
                }
                if ((item == this._parent.ResourceContainer_ProcessingResourceSpecification))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.SchedulingPolicy != null))
                {
                    array[arrayIndex] = this._parent.SchedulingPolicy;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.ActiveResourceType_ActiveResourceSpecification != null))
                {
                    array[arrayIndex] = this._parent.ActiveResourceType_ActiveResourceSpecification;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.ProcessingRate_ProcessingResourceSpecification != null))
                {
                    array[arrayIndex] = this._parent.ProcessingRate_ProcessingResourceSpecification;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.ResourceContainer_ProcessingResourceSpecification != null))
                {
                    array[arrayIndex] = this._parent.ResourceContainer_ProcessingResourceSpecification;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.SchedulingPolicy == item))
                {
                    this._parent.SchedulingPolicy = null;
                    return true;
                }
                if ((this._parent.ActiveResourceType_ActiveResourceSpecification == item))
                {
                    this._parent.ActiveResourceType_ActiveResourceSpecification = null;
                    return true;
                }
                if ((this._parent.ProcessingRate_ProcessingResourceSpecification == item))
                {
                    this._parent.ProcessingRate_ProcessingResourceSpecification = null;
                    return true;
                }
                if ((this._parent.ResourceContainer_ProcessingResourceSpecification == item))
                {
                    this._parent.ResourceContainer_ProcessingResourceSpecification = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.SchedulingPolicy).Concat(this._parent.ActiveResourceType_ActiveResourceSpecification).Concat(this._parent.ProcessingRate_ProcessingResourceSpecification).Concat(this._parent.ResourceContainer_ProcessingResourceSpecification).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the MTTR property
        /// </summary>
        private sealed class MTTRProxy : ModelPropertyChange<IProcessingResourceSpecification, double>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public MTTRProxy(IProcessingResourceSpecification modelElement) : 
                    base(modelElement, "MTTR")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override double Value
            {
                get
                {
                    return this.ModelElement.MTTR;
                }
                set
                {
                    this.ModelElement.MTTR = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the MTTF property
        /// </summary>
        private sealed class MTTFProxy : ModelPropertyChange<IProcessingResourceSpecification, double>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public MTTFProxy(IProcessingResourceSpecification modelElement) : 
                    base(modelElement, "MTTF")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override double Value
            {
                get
                {
                    return this.ModelElement.MTTF;
                }
                set
                {
                    this.ModelElement.MTTF = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the requiredByContainer property
        /// </summary>
        private sealed class RequiredByContainerProxy : ModelPropertyChange<IProcessingResourceSpecification, bool>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public RequiredByContainerProxy(IProcessingResourceSpecification modelElement) : 
                    base(modelElement, "requiredByContainer")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override bool Value
            {
                get
                {
                    return this.ModelElement.RequiredByContainer;
                }
                set
                {
                    this.ModelElement.RequiredByContainer = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the numberOfReplicas property
        /// </summary>
        private sealed class NumberOfReplicasProxy : ModelPropertyChange<IProcessingResourceSpecification, int>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public NumberOfReplicasProxy(IProcessingResourceSpecification modelElement) : 
                    base(modelElement, "numberOfReplicas")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override int Value
            {
                get
                {
                    return this.ModelElement.NumberOfReplicas;
                }
                set
                {
                    this.ModelElement.NumberOfReplicas = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the schedulingPolicy property
        /// </summary>
        private sealed class SchedulingPolicyProxy : ModelPropertyChange<IProcessingResourceSpecification, ISchedulingPolicy>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public SchedulingPolicyProxy(IProcessingResourceSpecification modelElement) : 
                    base(modelElement, "schedulingPolicy")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ISchedulingPolicy Value
            {
                get
                {
                    return this.ModelElement.SchedulingPolicy;
                }
                set
                {
                    this.ModelElement.SchedulingPolicy = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the activeResourceType_ActiveResourceSpecification property
        /// </summary>
        private sealed class ActiveResourceType_ActiveResourceSpecificationProxy : ModelPropertyChange<IProcessingResourceSpecification, IProcessingResourceType>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ActiveResourceType_ActiveResourceSpecificationProxy(IProcessingResourceSpecification modelElement) : 
                    base(modelElement, "activeResourceType_ActiveResourceSpecification")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IProcessingResourceType Value
            {
                get
                {
                    return this.ModelElement.ActiveResourceType_ActiveResourceSpecification;
                }
                set
                {
                    this.ModelElement.ActiveResourceType_ActiveResourceSpecification = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the processingRate_ProcessingResourceSpecification property
        /// </summary>
        private sealed class ProcessingRate_ProcessingResourceSpecificationProxy : ModelPropertyChange<IProcessingResourceSpecification, IPCMRandomVariable>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ProcessingRate_ProcessingResourceSpecificationProxy(IProcessingResourceSpecification modelElement) : 
                    base(modelElement, "processingRate_ProcessingResourceSpecification")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IPCMRandomVariable Value
            {
                get
                {
                    return this.ModelElement.ProcessingRate_ProcessingResourceSpecification;
                }
                set
                {
                    this.ModelElement.ProcessingRate_ProcessingResourceSpecification = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the resourceContainer_ProcessingResourceSpecification property
        /// </summary>
        private sealed class ResourceContainer_ProcessingResourceSpecificationProxy : ModelPropertyChange<IProcessingResourceSpecification, IResourceContainer>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ResourceContainer_ProcessingResourceSpecificationProxy(IProcessingResourceSpecification modelElement) : 
                    base(modelElement, "resourceContainer_ProcessingResourceSpecification")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IResourceContainer Value
            {
                get
                {
                    return this.ModelElement.ResourceContainer_ProcessingResourceSpecification;
                }
                set
                {
                    this.ModelElement.ResourceContainer_ProcessingResourceSpecification = value;
                }
            }
        }
    }
}

