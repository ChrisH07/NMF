//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMFExamples.Pcm.Core;
using NMFExamples.Pcm.Core.Entity;
using NMFExamples.Pcm.Parameter;
using NMFExamples.Pcm.Protocol;
using NMFExamples.Pcm.Reliability;
using NMFExamples.Pcm.Resourcetype;
using NMFExamples.Pcm.Seff;
using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using global::System.Collections;
using global::System.Collections.Generic;
using global::System.Collections.ObjectModel;
using global::System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Globalization;
using System.Linq;

namespace NMFExamples.Pcm.Repository
{
    
    
    /// <summary>
    /// The default implementation of the Repository class
    /// </summary>
    [XmlNamespaceAttribute("http://sdq.ipd.uka.de/PalladioComponentModel/Repository/5.0")]
    [XmlNamespacePrefixAttribute("repository")]
    [ModelRepresentationClassAttribute("http://sdq.ipd.uka.de/PalladioComponentModel/5.0#//repository/Repository")]
    [DebuggerDisplayAttribute("Repository {Id}")]
    public partial class Repository : NMFExamples.Pcm.Core.Entity.Entity, IRepository, IModelElement
    {
        
        /// <summary>
        /// The backing field for the RepositoryDescription property
        /// </summary>
        private string _repositoryDescription;
        
        private static Lazy<ITypedElement> _repositoryDescriptionAttribute = new Lazy<ITypedElement>(RetrieveRepositoryDescriptionAttribute);
        
        private static Lazy<ITypedElement> _components__RepositoryReference = new Lazy<ITypedElement>(RetrieveComponents__RepositoryReference);
        
        /// <summary>
        /// The backing field for the Components__Repository property
        /// </summary>
        private RepositoryComponents__RepositoryCollection _components__Repository;
        
        private static Lazy<ITypedElement> _interfaces__RepositoryReference = new Lazy<ITypedElement>(RetrieveInterfaces__RepositoryReference);
        
        /// <summary>
        /// The backing field for the Interfaces__Repository property
        /// </summary>
        private RepositoryInterfaces__RepositoryCollection _interfaces__Repository;
        
        private static Lazy<ITypedElement> _failureTypes__RepositoryReference = new Lazy<ITypedElement>(RetrieveFailureTypes__RepositoryReference);
        
        /// <summary>
        /// The backing field for the FailureTypes__Repository property
        /// </summary>
        private RepositoryFailureTypes__RepositoryCollection _failureTypes__Repository;
        
        private static Lazy<ITypedElement> _dataTypes__RepositoryReference = new Lazy<ITypedElement>(RetrieveDataTypes__RepositoryReference);
        
        /// <summary>
        /// The backing field for the DataTypes__Repository property
        /// </summary>
        private RepositoryDataTypes__RepositoryCollection _dataTypes__Repository;
        
        private static IClass _classInstance;
        
        public Repository()
        {
            this._components__Repository = new RepositoryComponents__RepositoryCollection(this);
            this._components__Repository.CollectionChanging += this.Components__RepositoryCollectionChanging;
            this._components__Repository.CollectionChanged += this.Components__RepositoryCollectionChanged;
            this._interfaces__Repository = new RepositoryInterfaces__RepositoryCollection(this);
            this._interfaces__Repository.CollectionChanging += this.Interfaces__RepositoryCollectionChanging;
            this._interfaces__Repository.CollectionChanged += this.Interfaces__RepositoryCollectionChanged;
            this._failureTypes__Repository = new RepositoryFailureTypes__RepositoryCollection(this);
            this._failureTypes__Repository.CollectionChanging += this.FailureTypes__RepositoryCollectionChanging;
            this._failureTypes__Repository.CollectionChanged += this.FailureTypes__RepositoryCollectionChanged;
            this._dataTypes__Repository = new RepositoryDataTypes__RepositoryCollection(this);
            this._dataTypes__Repository.CollectionChanging += this.DataTypes__RepositoryCollectionChanging;
            this._dataTypes__Repository.CollectionChanged += this.DataTypes__RepositoryCollectionChanged;
        }
        
        /// <summary>
        /// The repositoryDescription property
        /// </summary>
        [XmlElementNameAttribute("repositoryDescription")]
        [XmlAttributeAttribute(true)]
        public string RepositoryDescription
        {
            get
            {
                return this._repositoryDescription;
            }
            set
            {
                if ((this._repositoryDescription != value))
                {
                    string old = this._repositoryDescription;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnRepositoryDescriptionChanging(e);
                    this.OnPropertyChanging("RepositoryDescription", e, _repositoryDescriptionAttribute);
                    this._repositoryDescription = value;
                    this.OnRepositoryDescriptionChanged(e);
                    this.OnPropertyChanged("RepositoryDescription", e, _repositoryDescriptionAttribute);
                }
            }
        }
        
        /// <summary>
        /// The components__Repository property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlElementNameAttribute("components__Repository")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [XmlOppositeAttribute("repository__RepositoryComponent")]
        [ConstantAttribute()]
        public IListExpression<IRepositoryComponent> Components__Repository
        {
            get
            {
                return this._components__Repository;
            }
        }
        
        /// <summary>
        /// The interfaces__Repository property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlElementNameAttribute("interfaces__Repository")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [XmlOppositeAttribute("repository__Interface")]
        [ConstantAttribute()]
        public IListExpression<IInterface> Interfaces__Repository
        {
            get
            {
                return this._interfaces__Repository;
            }
        }
        
        /// <summary>
        /// The failureTypes__Repository property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlElementNameAttribute("failureTypes__Repository")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [XmlOppositeAttribute("repository__FailureType")]
        [ConstantAttribute()]
        public IListExpression<IFailureType> FailureTypes__Repository
        {
            get
            {
                return this._failureTypes__Repository;
            }
        }
        
        /// <summary>
        /// The dataTypes__Repository property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlElementNameAttribute("dataTypes__Repository")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [XmlOppositeAttribute("repository__DataType")]
        [ConstantAttribute()]
        public IListExpression<IDataType> DataTypes__Repository
        {
            get
            {
                return this._dataTypes__Repository;
            }
        }
        
        /// <summary>
        /// Gets the child model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> Children
        {
            get
            {
                return base.Children.Concat(new RepositoryChildrenCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new RepositoryReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://sdq.ipd.uka.de/PalladioComponentModel/5.0#//repository/Repository")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the RepositoryDescription property changes its value
        /// </summary>
        public event global::System.EventHandler<ValueChangedEventArgs> RepositoryDescriptionChanging;
        
        /// <summary>
        /// Gets fired when the RepositoryDescription property changed its value
        /// </summary>
        public event global::System.EventHandler<ValueChangedEventArgs> RepositoryDescriptionChanged;
        
        private static ITypedElement RetrieveRepositoryDescriptionAttribute()
        {
            return ((ITypedElement)(((ModelElement)(NMFExamples.Pcm.Repository.Repository.ClassInstance)).Resolve("repositoryDescription")));
        }
        
        /// <summary>
        /// Raises the RepositoryDescriptionChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRepositoryDescriptionChanging(ValueChangedEventArgs eventArgs)
        {
            global::System.EventHandler<ValueChangedEventArgs> handler = this.RepositoryDescriptionChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the RepositoryDescriptionChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRepositoryDescriptionChanged(ValueChangedEventArgs eventArgs)
        {
            global::System.EventHandler<ValueChangedEventArgs> handler = this.RepositoryDescriptionChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveComponents__RepositoryReference()
        {
            return ((ITypedElement)(((ModelElement)(NMFExamples.Pcm.Repository.Repository.ClassInstance)).Resolve("components__Repository")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Components__Repository property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void Components__RepositoryCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("Components__Repository", e, _components__RepositoryReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Components__Repository property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void Components__RepositoryCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Components__Repository", e, _components__RepositoryReference);
        }
        
        private static ITypedElement RetrieveInterfaces__RepositoryReference()
        {
            return ((ITypedElement)(((ModelElement)(NMFExamples.Pcm.Repository.Repository.ClassInstance)).Resolve("interfaces__Repository")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Interfaces__Repository property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void Interfaces__RepositoryCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("Interfaces__Repository", e, _interfaces__RepositoryReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Interfaces__Repository property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void Interfaces__RepositoryCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Interfaces__Repository", e, _interfaces__RepositoryReference);
        }
        
        private static ITypedElement RetrieveFailureTypes__RepositoryReference()
        {
            return ((ITypedElement)(((ModelElement)(NMFExamples.Pcm.Repository.Repository.ClassInstance)).Resolve("failureTypes__Repository")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the FailureTypes__Repository property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void FailureTypes__RepositoryCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("FailureTypes__Repository", e, _failureTypes__RepositoryReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the FailureTypes__Repository property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void FailureTypes__RepositoryCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("FailureTypes__Repository", e, _failureTypes__RepositoryReference);
        }
        
        private static ITypedElement RetrieveDataTypes__RepositoryReference()
        {
            return ((ITypedElement)(((ModelElement)(NMFExamples.Pcm.Repository.Repository.ClassInstance)).Resolve("dataTypes__Repository")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the DataTypes__Repository property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void DataTypes__RepositoryCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("DataTypes__Repository", e, _dataTypes__RepositoryReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the DataTypes__Repository property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void DataTypes__RepositoryCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("DataTypes__Repository", e, _dataTypes__RepositoryReference);
        }
        
        /// <summary>
        /// Gets the relative URI fragment for the given child model element
        /// </summary>
        /// <returns>A fragment of the relative URI</returns>
        /// <param name="element">The element that should be looked for</param>
        protected override string GetRelativePathForNonIdentifiedChild(IModelElement element)
        {
            int components__RepositoryIndex = ModelHelper.IndexOfReference(this.Components__Repository, element);
            if ((components__RepositoryIndex != -1))
            {
                return ModelHelper.CreatePath("components__Repository", components__RepositoryIndex);
            }
            int interfaces__RepositoryIndex = ModelHelper.IndexOfReference(this.Interfaces__Repository, element);
            if ((interfaces__RepositoryIndex != -1))
            {
                return ModelHelper.CreatePath("interfaces__Repository", interfaces__RepositoryIndex);
            }
            int failureTypes__RepositoryIndex = ModelHelper.IndexOfReference(this.FailureTypes__Repository, element);
            if ((failureTypes__RepositoryIndex != -1))
            {
                return ModelHelper.CreatePath("failureTypes__Repository", failureTypes__RepositoryIndex);
            }
            int dataTypes__RepositoryIndex = ModelHelper.IndexOfReference(this.DataTypes__Repository, element);
            if ((dataTypes__RepositoryIndex != -1))
            {
                return ModelHelper.CreatePath("dataTypes__Repository", dataTypes__RepositoryIndex);
            }
            return base.GetRelativePathForNonIdentifiedChild(element);
        }
        
        /// <summary>
        /// Resolves the given URI to a child model element
        /// </summary>
        /// <returns>The model element or null if it could not be found</returns>
        /// <param name="reference">The requested reference name</param>
        /// <param name="index">The index of this reference</param>
        protected override IModelElement GetModelElementForReference(string reference, int index)
        {
            if ((reference == "COMPONENTS__REPOSITORY"))
            {
                if ((index < this.Components__Repository.Count))
                {
                    return this.Components__Repository[index];
                }
                else
                {
                    return null;
                }
            }
            if ((reference == "INTERFACES__REPOSITORY"))
            {
                if ((index < this.Interfaces__Repository.Count))
                {
                    return this.Interfaces__Repository[index];
                }
                else
                {
                    return null;
                }
            }
            if ((reference == "FAILURETYPES__REPOSITORY"))
            {
                if ((index < this.FailureTypes__Repository.Count))
                {
                    return this.FailureTypes__Repository[index];
                }
                else
                {
                    return null;
                }
            }
            if ((reference == "DATATYPES__REPOSITORY"))
            {
                if ((index < this.DataTypes__Repository.Count))
                {
                    return this.DataTypes__Repository[index];
                }
                else
                {
                    return null;
                }
            }
            return base.GetModelElementForReference(reference, index);
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "REPOSITORYDESCRIPTION"))
            {
                return this.RepositoryDescription;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override global::System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "COMPONENTS__REPOSITORY"))
            {
                return this._components__Repository;
            }
            if ((feature == "INTERFACES__REPOSITORY"))
            {
                return this._interfaces__Repository;
            }
            if ((feature == "FAILURETYPES__REPOSITORY"))
            {
                return this._failureTypes__Repository;
            }
            if ((feature == "DATATYPES__REPOSITORY"))
            {
                return this._dataTypes__Repository;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "REPOSITORYDESCRIPTION"))
            {
                this.RepositoryDescription = ((string)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property name for the given container
        /// </summary>
        /// <returns>The name of the respective container reference</returns>
        /// <param name="container">The container object</param>
        protected override string GetCompositionName(object container)
        {
            if ((container == this._components__Repository))
            {
                return "components__Repository";
            }
            if ((container == this._interfaces__Repository))
            {
                return "interfaces__Repository";
            }
            if ((container == this._failureTypes__Repository))
            {
                return "failureTypes__Repository";
            }
            if ((container == this._dataTypes__Repository))
            {
                return "dataTypes__Repository";
            }
            return base.GetCompositionName(container);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://sdq.ipd.uka.de/PalladioComponentModel/5.0#//repository/Repository")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the Repository class
        /// </summary>
        public class RepositoryChildrenCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private Repository _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public RepositoryChildrenCollection(Repository parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.Components__Repository.Count);
                    count = (count + this._parent.Interfaces__Repository.Count);
                    count = (count + this._parent.FailureTypes__Repository.Count);
                    count = (count + this._parent.DataTypes__Repository.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.Components__Repository.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.Interfaces__Repository.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.FailureTypes__Repository.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.DataTypes__Repository.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.Components__Repository.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.Interfaces__Repository.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.FailureTypes__Repository.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.DataTypes__Repository.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IRepositoryComponent components__RepositoryCasted = item.As<IRepositoryComponent>();
                if ((components__RepositoryCasted != null))
                {
                    this._parent.Components__Repository.Add(components__RepositoryCasted);
                }
                IInterface interfaces__RepositoryCasted = item.As<IInterface>();
                if ((interfaces__RepositoryCasted != null))
                {
                    this._parent.Interfaces__Repository.Add(interfaces__RepositoryCasted);
                }
                IFailureType failureTypes__RepositoryCasted = item.As<IFailureType>();
                if ((failureTypes__RepositoryCasted != null))
                {
                    this._parent.FailureTypes__Repository.Add(failureTypes__RepositoryCasted);
                }
                IDataType dataTypes__RepositoryCasted = item.As<IDataType>();
                if ((dataTypes__RepositoryCasted != null))
                {
                    this._parent.DataTypes__Repository.Add(dataTypes__RepositoryCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Components__Repository.Clear();
                this._parent.Interfaces__Repository.Clear();
                this._parent.FailureTypes__Repository.Clear();
                this._parent.DataTypes__Repository.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.Components__Repository.Contains(item))
                {
                    return true;
                }
                if (this._parent.Interfaces__Repository.Contains(item))
                {
                    return true;
                }
                if (this._parent.FailureTypes__Repository.Contains(item))
                {
                    return true;
                }
                if (this._parent.DataTypes__Repository.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> components__RepositoryEnumerator = this._parent.Components__Repository.GetEnumerator();
                try
                {
                    for (
                    ; components__RepositoryEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = components__RepositoryEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    components__RepositoryEnumerator.Dispose();
                }
                IEnumerator<IModelElement> interfaces__RepositoryEnumerator = this._parent.Interfaces__Repository.GetEnumerator();
                try
                {
                    for (
                    ; interfaces__RepositoryEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = interfaces__RepositoryEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    interfaces__RepositoryEnumerator.Dispose();
                }
                IEnumerator<IModelElement> failureTypes__RepositoryEnumerator = this._parent.FailureTypes__Repository.GetEnumerator();
                try
                {
                    for (
                    ; failureTypes__RepositoryEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = failureTypes__RepositoryEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    failureTypes__RepositoryEnumerator.Dispose();
                }
                IEnumerator<IModelElement> dataTypes__RepositoryEnumerator = this._parent.DataTypes__Repository.GetEnumerator();
                try
                {
                    for (
                    ; dataTypes__RepositoryEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = dataTypes__RepositoryEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    dataTypes__RepositoryEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IRepositoryComponent repositoryComponentItem = item.As<IRepositoryComponent>();
                if (((repositoryComponentItem != null) 
                            && this._parent.Components__Repository.Remove(repositoryComponentItem)))
                {
                    return true;
                }
                IInterface interfaceItem = item.As<IInterface>();
                if (((interfaceItem != null) 
                            && this._parent.Interfaces__Repository.Remove(interfaceItem)))
                {
                    return true;
                }
                IFailureType failureTypeItem = item.As<IFailureType>();
                if (((failureTypeItem != null) 
                            && this._parent.FailureTypes__Repository.Remove(failureTypeItem)))
                {
                    return true;
                }
                IDataType dataTypeItem = item.As<IDataType>();
                if (((dataTypeItem != null) 
                            && this._parent.DataTypes__Repository.Remove(dataTypeItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Components__Repository).Concat(this._parent.Interfaces__Repository).Concat(this._parent.FailureTypes__Repository).Concat(this._parent.DataTypes__Repository).GetEnumerator();
            }
        }
        
        /// <summary>
        /// The collection class to to represent the children of the Repository class
        /// </summary>
        public class RepositoryReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private Repository _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public RepositoryReferencedElementsCollection(Repository parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.Components__Repository.Count);
                    count = (count + this._parent.Interfaces__Repository.Count);
                    count = (count + this._parent.FailureTypes__Repository.Count);
                    count = (count + this._parent.DataTypes__Repository.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.Components__Repository.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.Interfaces__Repository.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.FailureTypes__Repository.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.DataTypes__Repository.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.Components__Repository.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.Interfaces__Repository.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.FailureTypes__Repository.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.DataTypes__Repository.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IRepositoryComponent components__RepositoryCasted = item.As<IRepositoryComponent>();
                if ((components__RepositoryCasted != null))
                {
                    this._parent.Components__Repository.Add(components__RepositoryCasted);
                }
                IInterface interfaces__RepositoryCasted = item.As<IInterface>();
                if ((interfaces__RepositoryCasted != null))
                {
                    this._parent.Interfaces__Repository.Add(interfaces__RepositoryCasted);
                }
                IFailureType failureTypes__RepositoryCasted = item.As<IFailureType>();
                if ((failureTypes__RepositoryCasted != null))
                {
                    this._parent.FailureTypes__Repository.Add(failureTypes__RepositoryCasted);
                }
                IDataType dataTypes__RepositoryCasted = item.As<IDataType>();
                if ((dataTypes__RepositoryCasted != null))
                {
                    this._parent.DataTypes__Repository.Add(dataTypes__RepositoryCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Components__Repository.Clear();
                this._parent.Interfaces__Repository.Clear();
                this._parent.FailureTypes__Repository.Clear();
                this._parent.DataTypes__Repository.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.Components__Repository.Contains(item))
                {
                    return true;
                }
                if (this._parent.Interfaces__Repository.Contains(item))
                {
                    return true;
                }
                if (this._parent.FailureTypes__Repository.Contains(item))
                {
                    return true;
                }
                if (this._parent.DataTypes__Repository.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> components__RepositoryEnumerator = this._parent.Components__Repository.GetEnumerator();
                try
                {
                    for (
                    ; components__RepositoryEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = components__RepositoryEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    components__RepositoryEnumerator.Dispose();
                }
                IEnumerator<IModelElement> interfaces__RepositoryEnumerator = this._parent.Interfaces__Repository.GetEnumerator();
                try
                {
                    for (
                    ; interfaces__RepositoryEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = interfaces__RepositoryEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    interfaces__RepositoryEnumerator.Dispose();
                }
                IEnumerator<IModelElement> failureTypes__RepositoryEnumerator = this._parent.FailureTypes__Repository.GetEnumerator();
                try
                {
                    for (
                    ; failureTypes__RepositoryEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = failureTypes__RepositoryEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    failureTypes__RepositoryEnumerator.Dispose();
                }
                IEnumerator<IModelElement> dataTypes__RepositoryEnumerator = this._parent.DataTypes__Repository.GetEnumerator();
                try
                {
                    for (
                    ; dataTypes__RepositoryEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = dataTypes__RepositoryEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    dataTypes__RepositoryEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IRepositoryComponent repositoryComponentItem = item.As<IRepositoryComponent>();
                if (((repositoryComponentItem != null) 
                            && this._parent.Components__Repository.Remove(repositoryComponentItem)))
                {
                    return true;
                }
                IInterface interfaceItem = item.As<IInterface>();
                if (((interfaceItem != null) 
                            && this._parent.Interfaces__Repository.Remove(interfaceItem)))
                {
                    return true;
                }
                IFailureType failureTypeItem = item.As<IFailureType>();
                if (((failureTypeItem != null) 
                            && this._parent.FailureTypes__Repository.Remove(failureTypeItem)))
                {
                    return true;
                }
                IDataType dataTypeItem = item.As<IDataType>();
                if (((dataTypeItem != null) 
                            && this._parent.DataTypes__Repository.Remove(dataTypeItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Components__Repository).Concat(this._parent.Interfaces__Repository).Concat(this._parent.FailureTypes__Repository).Concat(this._parent.DataTypes__Repository).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the repositoryDescription property
        /// </summary>
        private sealed class RepositoryDescriptionProxy : ModelPropertyChange<IRepository, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public RepositoryDescriptionProxy(IRepository modelElement) : 
                    base(modelElement, "repositoryDescription")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.RepositoryDescription;
                }
                set
                {
                    this.ModelElement.RepositoryDescription = value;
                }
            }
        }
    }
}

