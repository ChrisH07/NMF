//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMFExamples.ComponentBasedSystems;
using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using global::System.Collections;
using global::System.Collections.Generic;
using global::System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;

namespace NMFExamples.ComponentBasedSystems.SystemIndependent
{
    
    
    /// <summary>
    /// The default implementation of the Component_MM06 class
    /// </summary>
    [XmlNamespaceAttribute("http://sdq.ipd.kit.edu/ComponentBasedSystem/SystemIndependent/")]
    [XmlNamespacePrefixAttribute("system")]
    [ModelRepresentationClassAttribute("http://sdq.ipd.kit.edu/ComponentBasedSystem/#//SystemIndependent/Component_MM06")]
    [DebuggerDisplayAttribute("Component_MM06 {Name}")]
    public partial class Component_MM06 : NamedElement, IComponent_MM06, IModelElement
    {
        
        private static Lazy<ITypedElement> _servicesReference = new Lazy<ITypedElement>(RetrieveServicesReference);
        
        /// <summary>
        /// The backing field for the Services property
        /// </summary>
        private ObservableCompositionOrderedSet<IService> _services;
        
        private static Lazy<ITypedElement> _providedInterfacesReference = new Lazy<ITypedElement>(RetrieveProvidedInterfacesReference);
        
        /// <summary>
        /// The backing field for the ProvidedInterfaces property
        /// </summary>
        private ObservableAssociationOrderedSet<IInterface> _providedInterfaces;
        
        private static Lazy<ITypedElement> _requiredInterfacesReference = new Lazy<ITypedElement>(RetrieveRequiredInterfacesReference);
        
        /// <summary>
        /// The backing field for the RequiredInterfaces property
        /// </summary>
        private ObservableAssociationOrderedSet<IInterface> _requiredInterfaces;
        
        private static IClass _classInstance;
        
        public Component_MM06()
        {
            this._services = new ObservableCompositionOrderedSet<IService>(this);
            this._services.CollectionChanging += this.ServicesCollectionChanging;
            this._services.CollectionChanged += this.ServicesCollectionChanged;
            this._providedInterfaces = new ObservableAssociationOrderedSet<IInterface>();
            this._providedInterfaces.CollectionChanging += this.ProvidedInterfacesCollectionChanging;
            this._providedInterfaces.CollectionChanged += this.ProvidedInterfacesCollectionChanged;
            this._requiredInterfaces = new ObservableAssociationOrderedSet<IInterface>();
            this._requiredInterfaces.CollectionChanging += this.RequiredInterfacesCollectionChanging;
            this._requiredInterfaces.CollectionChanged += this.RequiredInterfacesCollectionChanged;
        }
        
        /// <summary>
        /// The Services property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IService> Services
        {
            get
            {
                return this._services;
            }
        }
        
        /// <summary>
        /// The ProvidedInterfaces property
        /// </summary>
        [LowerBoundAttribute(1)]
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IInterface> ProvidedInterfaces
        {
            get
            {
                return this._providedInterfaces;
            }
        }
        
        /// <summary>
        /// The RequiredInterfaces property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IInterface> RequiredInterfaces
        {
            get
            {
                return this._requiredInterfaces;
            }
        }
        
        /// <summary>
        /// Gets the child model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> Children
        {
            get
            {
                return base.Children.Concat(new Component_MM06ChildrenCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new Component_MM06ReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://sdq.ipd.kit.edu/ComponentBasedSystem/#//SystemIndependent/Component_MM06")));
                }
                return _classInstance;
            }
        }
        
        private static ITypedElement RetrieveServicesReference()
        {
            return ((ITypedElement)(((ModelElement)(Component_MM06.ClassInstance)).Resolve("Services")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Services property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ServicesCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("Services", e, _servicesReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Services property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ServicesCollectionChanged(object sender, global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Services", e, _servicesReference);
        }
        
        private static ITypedElement RetrieveProvidedInterfacesReference()
        {
            return ((ITypedElement)(((ModelElement)(Component_MM06.ClassInstance)).Resolve("ProvidedInterfaces")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the ProvidedInterfaces property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ProvidedInterfacesCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("ProvidedInterfaces", e, _providedInterfacesReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the ProvidedInterfaces property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ProvidedInterfacesCollectionChanged(object sender, global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("ProvidedInterfaces", e, _providedInterfacesReference);
        }
        
        private static ITypedElement RetrieveRequiredInterfacesReference()
        {
            return ((ITypedElement)(((ModelElement)(Component_MM06.ClassInstance)).Resolve("RequiredInterfaces")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the RequiredInterfaces property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void RequiredInterfacesCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("RequiredInterfaces", e, _requiredInterfacesReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the RequiredInterfaces property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void RequiredInterfacesCollectionChanged(object sender, global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("RequiredInterfaces", e, _requiredInterfacesReference);
        }
        
        /// <summary>
        /// Gets the relative URI fragment for the given child model element
        /// </summary>
        /// <returns>A fragment of the relative URI</returns>
        /// <param name="element">The element that should be looked for</param>
        protected override string GetRelativePathForNonIdentifiedChild(IModelElement element)
        {
            int servicesIndex = ModelHelper.IndexOfReference(this.Services, element);
            if ((servicesIndex != -1))
            {
                return ModelHelper.CreatePath("Services", servicesIndex);
            }
            return base.GetRelativePathForNonIdentifiedChild(element);
        }
        
        /// <summary>
        /// Resolves the given URI to a child model element
        /// </summary>
        /// <returns>The model element or null if it could not be found</returns>
        /// <param name="reference">The requested reference name</param>
        /// <param name="index">The index of this reference</param>
        protected override IModelElement GetModelElementForReference(string reference, int index)
        {
            if ((reference == "SERVICES"))
            {
                if ((index < this.Services.Count))
                {
                    return this.Services[index];
                }
                else
                {
                    return null;
                }
            }
            return base.GetModelElementForReference(reference, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override global::System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "SERVICES"))
            {
                return this._services;
            }
            if ((feature == "PROVIDEDINTERFACES"))
            {
                return this._providedInterfaces;
            }
            if ((feature == "REQUIREDINTERFACES"))
            {
                return this._requiredInterfaces;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Gets the property name for the given container
        /// </summary>
        /// <returns>The name of the respective container reference</returns>
        /// <param name="container">The container object</param>
        protected override string GetCompositionName(object container)
        {
            if ((container == this._services))
            {
                return "Services";
            }
            return base.GetCompositionName(container);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://sdq.ipd.kit.edu/ComponentBasedSystem/#//SystemIndependent/Component_MM06")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the Component_MM06 class
        /// </summary>
        public class Component_MM06ChildrenCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private Component_MM06 _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public Component_MM06ChildrenCollection(Component_MM06 parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.Services.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.Services.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.Services.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IService servicesCasted = item.As<IService>();
                if ((servicesCasted != null))
                {
                    this._parent.Services.Add(servicesCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Services.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.Services.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> servicesEnumerator = this._parent.Services.GetEnumerator();
                try
                {
                    for (
                    ; servicesEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = servicesEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    servicesEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IService serviceItem = item.As<IService>();
                if (((serviceItem != null) 
                            && this._parent.Services.Remove(serviceItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Services).GetEnumerator();
            }
        }
        
        /// <summary>
        /// The collection class to to represent the children of the Component_MM06 class
        /// </summary>
        public class Component_MM06ReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private Component_MM06 _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public Component_MM06ReferencedElementsCollection(Component_MM06 parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.Services.Count);
                    count = (count + this._parent.ProvidedInterfaces.Count);
                    count = (count + this._parent.RequiredInterfaces.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.Services.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.ProvidedInterfaces.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.RequiredInterfaces.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.Services.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.ProvidedInterfaces.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.RequiredInterfaces.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IService servicesCasted = item.As<IService>();
                if ((servicesCasted != null))
                {
                    this._parent.Services.Add(servicesCasted);
                }
                IInterface providedInterfacesCasted = item.As<IInterface>();
                if ((providedInterfacesCasted != null))
                {
                    this._parent.ProvidedInterfaces.Add(providedInterfacesCasted);
                }
                IInterface requiredInterfacesCasted = item.As<IInterface>();
                if ((requiredInterfacesCasted != null))
                {
                    this._parent.RequiredInterfaces.Add(requiredInterfacesCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Services.Clear();
                this._parent.ProvidedInterfaces.Clear();
                this._parent.RequiredInterfaces.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.Services.Contains(item))
                {
                    return true;
                }
                if (this._parent.ProvidedInterfaces.Contains(item))
                {
                    return true;
                }
                if (this._parent.RequiredInterfaces.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> servicesEnumerator = this._parent.Services.GetEnumerator();
                try
                {
                    for (
                    ; servicesEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = servicesEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    servicesEnumerator.Dispose();
                }
                IEnumerator<IModelElement> providedInterfacesEnumerator = this._parent.ProvidedInterfaces.GetEnumerator();
                try
                {
                    for (
                    ; providedInterfacesEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = providedInterfacesEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    providedInterfacesEnumerator.Dispose();
                }
                IEnumerator<IModelElement> requiredInterfacesEnumerator = this._parent.RequiredInterfaces.GetEnumerator();
                try
                {
                    for (
                    ; requiredInterfacesEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = requiredInterfacesEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    requiredInterfacesEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IService serviceItem = item.As<IService>();
                if (((serviceItem != null) 
                            && this._parent.Services.Remove(serviceItem)))
                {
                    return true;
                }
                IInterface interfaceItem = item.As<IInterface>();
                if (((interfaceItem != null) 
                            && this._parent.ProvidedInterfaces.Remove(interfaceItem)))
                {
                    return true;
                }
                if (((interfaceItem != null) 
                            && this._parent.RequiredInterfaces.Remove(interfaceItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Services).Concat(this._parent.ProvidedInterfaces).Concat(this._parent.RequiredInterfaces).GetEnumerator();
            }
        }
    }
}

