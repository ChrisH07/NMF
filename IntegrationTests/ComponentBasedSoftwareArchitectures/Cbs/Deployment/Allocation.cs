//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMFExamples.ComponentBasedSystems;
using NMFExamples.ComponentBasedSystems.Assembly;
using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using global::System.Collections;
using global::System.Collections.Generic;
using global::System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;

namespace NMFExamples.ComponentBasedSystems.Deployment
{
    
    
    /// <summary>
    /// The default implementation of the Allocation class
    /// </summary>
    [XmlNamespaceAttribute("http://sdq.ipd.kit.edu/ComponentBasedSystem/Deployment/")]
    [XmlNamespacePrefixAttribute("deploy")]
    [ModelRepresentationClassAttribute("http://sdq.ipd.kit.edu/ComponentBasedSystem/#//Deployment/Allocation")]
    public partial class Allocation : ModelElement, IAllocation, IModelElement
    {
        
        private static Lazy<ITypedElement> _contextsReference = new Lazy<ITypedElement>(RetrieveContextsReference);
        
        /// <summary>
        /// The backing field for the Contexts property
        /// </summary>
        private ObservableCompositionOrderedSet<IAllocationContext> _contexts;
        
        private static Lazy<ITypedElement> _allocatedSystemReference = new Lazy<ITypedElement>(RetrieveAllocatedSystemReference);
        
        /// <summary>
        /// The backing field for the AllocatedSystem property
        /// </summary>
        private ISystem_MM06 _allocatedSystem;
        
        private static IClass _classInstance;
        
        public Allocation()
        {
            this._contexts = new ObservableCompositionOrderedSet<IAllocationContext>(this);
            this._contexts.CollectionChanging += this.ContextsCollectionChanging;
            this._contexts.CollectionChanged += this.ContextsCollectionChanged;
        }
        
        /// <summary>
        /// The Contexts property
        /// </summary>
        [LowerBoundAttribute(1)]
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IAllocationContext> Contexts
        {
            get
            {
                return this._contexts;
            }
        }
        
        /// <summary>
        /// The AllocatedSystem property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual ISystem_MM06 AllocatedSystem
        {
            get
            {
                return this._allocatedSystem;
            }
            set
            {
                if ((this._allocatedSystem != value))
                {
                    ISystem_MM06 old = this._allocatedSystem;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnAllocatedSystemChanging(e);
                    this.OnPropertyChanging("AllocatedSystem", e, _allocatedSystemReference);
                    this._allocatedSystem = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetAllocatedSystem;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetAllocatedSystem;
                    }
                    this.OnAllocatedSystemChanged(e);
                    this.OnPropertyChanged("AllocatedSystem", e, _allocatedSystemReference);
                }
            }
        }
        
        /// <summary>
        /// Gets the child model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> Children
        {
            get
            {
                return base.Children.Concat(new AllocationChildrenCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new AllocationReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://sdq.ipd.kit.edu/ComponentBasedSystem/#//Deployment/Allocation")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the AllocatedSystem property changes its value
        /// </summary>
        public event global::System.EventHandler<ValueChangedEventArgs> AllocatedSystemChanging;
        
        /// <summary>
        /// Gets fired when the AllocatedSystem property changed its value
        /// </summary>
        public event global::System.EventHandler<ValueChangedEventArgs> AllocatedSystemChanged;
        
        private static ITypedElement RetrieveContextsReference()
        {
            return ((ITypedElement)(((ModelElement)(Allocation.ClassInstance)).Resolve("Contexts")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Contexts property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ContextsCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("Contexts", e, _contextsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Contexts property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ContextsCollectionChanged(object sender, global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Contexts", e, _contextsReference);
        }
        
        private static ITypedElement RetrieveAllocatedSystemReference()
        {
            return ((ITypedElement)(((ModelElement)(Allocation.ClassInstance)).Resolve("AllocatedSystem")));
        }
        
        /// <summary>
        /// Raises the AllocatedSystemChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAllocatedSystemChanging(ValueChangedEventArgs eventArgs)
        {
            global::System.EventHandler<ValueChangedEventArgs> handler = this.AllocatedSystemChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the AllocatedSystemChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAllocatedSystemChanged(ValueChangedEventArgs eventArgs)
        {
            global::System.EventHandler<ValueChangedEventArgs> handler = this.AllocatedSystemChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the AllocatedSystem property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetAllocatedSystem(object sender, global::System.EventArgs eventArgs)
        {
            this.AllocatedSystem = null;
        }
        
        /// <summary>
        /// Gets the relative URI fragment for the given child model element
        /// </summary>
        /// <returns>A fragment of the relative URI</returns>
        /// <param name="element">The element that should be looked for</param>
        protected override string GetRelativePathForNonIdentifiedChild(IModelElement element)
        {
            int contextsIndex = ModelHelper.IndexOfReference(this.Contexts, element);
            if ((contextsIndex != -1))
            {
                return ModelHelper.CreatePath("Contexts", contextsIndex);
            }
            return base.GetRelativePathForNonIdentifiedChild(element);
        }
        
        /// <summary>
        /// Resolves the given URI to a child model element
        /// </summary>
        /// <returns>The model element or null if it could not be found</returns>
        /// <param name="reference">The requested reference name</param>
        /// <param name="index">The index of this reference</param>
        protected override IModelElement GetModelElementForReference(string reference, int index)
        {
            if ((reference == "CONTEXTS"))
            {
                if ((index < this.Contexts.Count))
                {
                    return this.Contexts[index];
                }
                else
                {
                    return null;
                }
            }
            return base.GetModelElementForReference(reference, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override global::System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "CONTEXTS"))
            {
                return this._contexts;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "ALLOCATEDSYSTEM"))
            {
                this.AllocatedSystem = ((ISystem_MM06)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "AllocatedSystem"))
            {
                return new AllocatedSystemProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "AllocatedSystem"))
            {
                return new AllocatedSystemProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the property name for the given container
        /// </summary>
        /// <returns>The name of the respective container reference</returns>
        /// <param name="container">The container object</param>
        protected override string GetCompositionName(object container)
        {
            if ((container == this._contexts))
            {
                return "Contexts";
            }
            return base.GetCompositionName(container);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://sdq.ipd.kit.edu/ComponentBasedSystem/#//Deployment/Allocation")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the Allocation class
        /// </summary>
        public class AllocationChildrenCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private Allocation _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public AllocationChildrenCollection(Allocation parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.Contexts.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.Contexts.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.Contexts.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IAllocationContext contextsCasted = item.As<IAllocationContext>();
                if ((contextsCasted != null))
                {
                    this._parent.Contexts.Add(contextsCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Contexts.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.Contexts.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> contextsEnumerator = this._parent.Contexts.GetEnumerator();
                try
                {
                    for (
                    ; contextsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = contextsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    contextsEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IAllocationContext allocationContextItem = item.As<IAllocationContext>();
                if (((allocationContextItem != null) 
                            && this._parent.Contexts.Remove(allocationContextItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Contexts).GetEnumerator();
            }
        }
        
        /// <summary>
        /// The collection class to to represent the children of the Allocation class
        /// </summary>
        public class AllocationReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private Allocation _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public AllocationReferencedElementsCollection(Allocation parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.Contexts.Count);
                    if ((this._parent.AllocatedSystem != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.Contexts.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.AllocatedSystemChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.Contexts.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.AllocatedSystemChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IAllocationContext contextsCasted = item.As<IAllocationContext>();
                if ((contextsCasted != null))
                {
                    this._parent.Contexts.Add(contextsCasted);
                }
                if ((this._parent.AllocatedSystem == null))
                {
                    ISystem_MM06 allocatedSystemCasted = item.As<ISystem_MM06>();
                    if ((allocatedSystemCasted != null))
                    {
                        this._parent.AllocatedSystem = allocatedSystemCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Contexts.Clear();
                this._parent.AllocatedSystem = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.Contexts.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.AllocatedSystem))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> contextsEnumerator = this._parent.Contexts.GetEnumerator();
                try
                {
                    for (
                    ; contextsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = contextsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    contextsEnumerator.Dispose();
                }
                if ((this._parent.AllocatedSystem != null))
                {
                    array[arrayIndex] = this._parent.AllocatedSystem;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IAllocationContext allocationContextItem = item.As<IAllocationContext>();
                if (((allocationContextItem != null) 
                            && this._parent.Contexts.Remove(allocationContextItem)))
                {
                    return true;
                }
                if ((this._parent.AllocatedSystem == item))
                {
                    this._parent.AllocatedSystem = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Contexts).Concat(this._parent.AllocatedSystem).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the AllocatedSystem property
        /// </summary>
        private sealed class AllocatedSystemProxy : ModelPropertyChange<IAllocation, ISystem_MM06>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public AllocatedSystemProxy(IAllocation modelElement) : 
                    base(modelElement, "AllocatedSystem")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ISystem_MM06 Value
            {
                get
                {
                    return this.ModelElement.AllocatedSystem;
                }
                set
                {
                    this.ModelElement.AllocatedSystem = value;
                }
            }
        }
    }
}

