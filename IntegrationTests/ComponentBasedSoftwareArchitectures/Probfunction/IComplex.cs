//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMFExamples.Units;
using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using global::System.Collections;
using global::System.Collections.Generic;
using global::System.Collections.ObjectModel;
using global::System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;

namespace NMFExamples.Probfunction
{
    
    
    /// <summary>
    /// The public interface for Complex
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(Complex))]
    [XmlDefaultImplementationTypeAttribute(typeof(Complex))]
    public interface IComplex : IModelElement
    {
        
        /// <summary>
        /// The real property
        /// </summary>
        double Real
        {
            get;
            set;
        }
        
        /// <summary>
        /// The imaginary property
        /// </summary>
        double Imaginary
        {
            get;
            set;
        }
        
        /// <summary>
        /// Gets fired before the Real property changes its value
        /// </summary>
        event global::System.EventHandler<ValueChangedEventArgs> RealChanging;
        
        /// <summary>
        /// Gets fired when the Real property changed its value
        /// </summary>
        event global::System.EventHandler<ValueChangedEventArgs> RealChanged;
        
        /// <summary>
        /// Gets fired before the Imaginary property changes its value
        /// </summary>
        event global::System.EventHandler<ValueChangedEventArgs> ImaginaryChanging;
        
        /// <summary>
        /// Gets fired when the Imaginary property changed its value
        /// </summary>
        event global::System.EventHandler<ValueChangedEventArgs> ImaginaryChanged;
    }
}

