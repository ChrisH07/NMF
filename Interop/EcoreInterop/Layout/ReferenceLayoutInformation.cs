//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.34209
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Interop.Ecore;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;

namespace NMF.Interop.Layout
{
    
    
    [XmlNamespaceAttribute("http://www.emftext.org/commons/layout")]
    [XmlNamespacePrefixAttribute("layout")]
    [ModelRepresentationClassAttribute("http://www.emftext.org/commons/layout#//ReferenceLayoutInformation/")]
    public class ReferenceLayoutInformation : LayoutInformation, IReferenceLayoutInformation, IModelElement
    {
        
        /// <summary>
        /// The backing field for the Object property
        /// </summary>
        private IEObject _object;
        
        /// <summary>
        /// The object property
        /// </summary>
        [XmlElementNameAttribute("object")]
        [XmlAttributeAttribute(true)]
        public virtual IEObject Object
        {
            get
            {
                return this._object;
            }
            set
            {
                if ((this._object != value))
                {
                    IEObject old = this._object;
                    this._object = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetObject;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetObject;
                    }
                    this.OnPropertyChanged("Object");
                    this.OnObjectChanged(new ValueChangedEventArgs(old, value));
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new ReferenceLayoutInformationReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets fired when the Object property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ObjectChanged;
        
        /// <summary>
        /// Raises the ObjectChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnObjectChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ObjectChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Object property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetObject(object sender, EventArgs eventArgs)
        {
            this.Object = null;
        }
        
        /// <summary>
        /// Gets the Class element that describes the structure of the current model element
        /// </summary>
        public override NMF.Models.Meta.IClass GetClass()
        {
            return NMF.Models.Repository.MetaRepository.Instance.ResolveClass("http://www.emftext.org/commons/layout#//ReferenceLayoutInformation/");
        }
        
        /// <summary>
        /// The collection class to to represent the children of the ReferenceLayoutInformation class
        /// </summary>
        public class ReferenceLayoutInformationReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private ReferenceLayoutInformation _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public ReferenceLayoutInformationReferencedElementsCollection(ReferenceLayoutInformation parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.Object != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.ObjectChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.ObjectChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.Object == null))
                {
                    IEObject objectCasted = item.As<IEObject>();
                    if ((objectCasted != null))
                    {
                        this._parent.Object = objectCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Object = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.Object))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.Object != null))
                {
                    array[arrayIndex] = this._parent.Object;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.Object == item))
                {
                    this._parent.Object = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Object).GetEnumerator();
            }
        }
    }
}

