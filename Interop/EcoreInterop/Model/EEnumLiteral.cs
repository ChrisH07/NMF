//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.34209
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;

namespace NMF.Interop.Ecore
{
    
    
    [XmlNamespaceAttribute("http://www.eclipse.org/emf/2002/Ecore")]
    [XmlNamespacePrefixAttribute("ecore")]
    [ModelRepresentationClassAttribute("http://www.eclipse.org/emf/2002/Ecore#//EEnumLiteral/")]
    [DebuggerDisplayAttribute("EEnumLiteral {Name}")]
    public class EEnumLiteral : ENamedElement, IEEnumLiteral, IModelElement
    {
        
        /// <summary>
        /// The backing field for the Value property
        /// </summary>
        private Nullable<int> _value;
        
        /// <summary>
        /// The backing field for the Instance property
        /// </summary>
        private object _instance;
        
        /// <summary>
        /// The backing field for the Literal property
        /// </summary>
        private string _literal;
        
        /// <summary>
        /// The value property
        /// </summary>
        [XmlElementNameAttribute("value")]
        [XmlAttributeAttribute(true)]
        public virtual Nullable<int> Value
        {
            get
            {
                return this._value;
            }
            set
            {
                if ((value != this._value))
                {
                    this._value = value;
                    this.OnValueChanged(EventArgs.Empty);
                    this.OnPropertyChanged("Value");
                }
            }
        }
        
        /// <summary>
        /// The instance property
        /// </summary>
        [XmlElementNameAttribute("instance")]
        [XmlAttributeAttribute(true)]
        public virtual object Instance
        {
            get
            {
                return this._instance;
            }
            set
            {
                if ((value != this._instance))
                {
                    this._instance = value;
                    this.OnInstanceChanged(EventArgs.Empty);
                    this.OnPropertyChanged("Instance");
                }
            }
        }
        
        /// <summary>
        /// The literal property
        /// </summary>
        [XmlElementNameAttribute("literal")]
        [XmlAttributeAttribute(true)]
        public virtual string Literal
        {
            get
            {
                return this._literal;
            }
            set
            {
                if ((value != this._literal))
                {
                    this._literal = value;
                    this.OnLiteralChanged(EventArgs.Empty);
                    this.OnPropertyChanged("Literal");
                }
            }
        }
        
        /// <summary>
        /// The eEnum property
        /// </summary>
        [XmlElementNameAttribute("eEnum")]
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Hidden)]
        [XmlAttributeAttribute(true)]
        public virtual IEEnum EEnum
        {
            get
            {
                return ModelHelper.CastAs<IEEnum>(this.Parent);
            }
            set
            {
                this.Parent = value;
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new EEnumLiteralReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets fired when the Value property changed its value
        /// </summary>
        public event EventHandler ValueChanged;
        
        /// <summary>
        /// Gets fired when the Instance property changed its value
        /// </summary>
        public event EventHandler InstanceChanged;
        
        /// <summary>
        /// Gets fired when the Literal property changed its value
        /// </summary>
        public event EventHandler LiteralChanged;
        
        /// <summary>
        /// Gets fired when the EEnum property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> EEnumChanged;
        
        /// <summary>
        /// Raises the ValueChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnValueChanged(EventArgs eventArgs)
        {
            EventHandler handler = this.ValueChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the InstanceChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnInstanceChanged(EventArgs eventArgs)
        {
            EventHandler handler = this.InstanceChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the LiteralChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLiteralChanged(EventArgs eventArgs)
        {
            EventHandler handler = this.LiteralChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the EEnumChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnEEnumChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.EEnumChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Gets called when the parent model element of the current model element changes
        /// </summary>
        /// <param name="oldParent">The old parent model element</param>
        /// <param name="newParent">The new parent model element</param>
        protected override void OnParentChanged(IModelElement newParent, IModelElement oldParent)
        {
            IEEnum oldEEnum = ModelHelper.CastAs<IEEnum>(oldParent);
            IEEnum newEEnum = ModelHelper.CastAs<IEEnum>(newParent);
            if ((oldEEnum != null))
            {
                oldEEnum.ELiterals.Remove(this);
            }
            if ((newEEnum != null))
            {
                newEEnum.ELiterals.Add(this);
            }
            this.OnPropertyChanged("EEnum");
            this.OnEEnumChanged(new ValueChangedEventArgs(oldEEnum, newEEnum));
        }
        
        /// <summary>
        /// Gets the Class element that describes the structure of the current model element
        /// </summary>
        public override NMF.Models.Meta.IClass GetClass()
        {
            return NMF.Models.Repository.MetaRepository.Instance.ResolveClass("http://www.eclipse.org/emf/2002/Ecore#//EEnumLiteral/");
        }
        
        /// <summary>
        /// The collection class to to represent the children of the EEnumLiteral class
        /// </summary>
        public class EEnumLiteralReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private EEnumLiteral _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public EEnumLiteralReferencedElementsCollection(EEnumLiteral parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.EEnum != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.EEnumChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.EEnumChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.EEnum == null))
                {
                    IEEnum eEnumCasted = item.As<IEEnum>();
                    if ((eEnumCasted != null))
                    {
                        this._parent.EEnum = eEnumCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.EEnum = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.EEnum))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.EEnum != null))
                {
                    array[arrayIndex] = this._parent.EEnum;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.EEnum == item))
                {
                    this._parent.EEnum = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.EEnum).GetEnumerator();
            }
        }
    }
}

