//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.34209
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;

namespace NMF.Interop.Ecore
{
    
    
    [XmlNamespaceAttribute("http://www.eclipse.org/emf/2002/Ecore")]
    [XmlNamespacePrefixAttribute("ecore")]
    [ModelRepresentationClassAttribute("http://www.eclipse.org/emf/2002/Ecore#//ETypedElement/")]
    [DebuggerDisplayAttribute("ETypedElement {Name}")]
    public abstract class ETypedElement : ENamedElement, IETypedElement, IModelElement
    {
        
        /// <summary>
        /// The backing field for the Ordered property
        /// </summary>
        private Nullable<bool> _ordered;
        
        /// <summary>
        /// The backing field for the Unique property
        /// </summary>
        private Nullable<bool> _unique;
        
        /// <summary>
        /// The backing field for the LowerBound property
        /// </summary>
        private Nullable<int> _lowerBound;
        
        /// <summary>
        /// The backing field for the UpperBound property
        /// </summary>
        private Nullable<int> _upperBound;
        
        /// <summary>
        /// The backing field for the EType property
        /// </summary>
        private IEClassifier _eType;
        
        /// <summary>
        /// The backing field for the EGenericType property
        /// </summary>
        private IEGenericType _eGenericType;
        
        /// <summary>
        /// The ordered property
        /// </summary>
        [XmlElementNameAttribute("ordered")]
        [XmlAttributeAttribute(true)]
        public virtual Nullable<bool> Ordered
        {
            get
            {
                return this._ordered;
            }
            set
            {
                if ((value != this._ordered))
                {
                    this._ordered = value;
                    this.OnOrderedChanged(EventArgs.Empty);
                    this.OnPropertyChanged("Ordered");
                }
            }
        }
        
        /// <summary>
        /// The unique property
        /// </summary>
        [XmlElementNameAttribute("unique")]
        [XmlAttributeAttribute(true)]
        public virtual Nullable<bool> Unique
        {
            get
            {
                return this._unique;
            }
            set
            {
                if ((value != this._unique))
                {
                    this._unique = value;
                    this.OnUniqueChanged(EventArgs.Empty);
                    this.OnPropertyChanged("Unique");
                }
            }
        }
        
        /// <summary>
        /// The lowerBound property
        /// </summary>
        [XmlElementNameAttribute("lowerBound")]
        [XmlAttributeAttribute(true)]
        public virtual Nullable<int> LowerBound
        {
            get
            {
                return this._lowerBound;
            }
            set
            {
                if ((value != this._lowerBound))
                {
                    this._lowerBound = value;
                    this.OnLowerBoundChanged(EventArgs.Empty);
                    this.OnPropertyChanged("LowerBound");
                }
            }
        }
        
        /// <summary>
        /// The upperBound property
        /// </summary>
        [XmlElementNameAttribute("upperBound")]
        [XmlAttributeAttribute(true)]
        public virtual Nullable<int> UpperBound
        {
            get
            {
                return this._upperBound;
            }
            set
            {
                if ((value != this._upperBound))
                {
                    this._upperBound = value;
                    this.OnUpperBoundChanged(EventArgs.Empty);
                    this.OnPropertyChanged("UpperBound");
                }
            }
        }
        
        /// <summary>
        /// The eType property
        /// </summary>
        [XmlElementNameAttribute("eType")]
        [XmlAttributeAttribute(true)]
        public virtual IEClassifier EType
        {
            get
            {
                return this._eType;
            }
            set
            {
                if ((this._eType != value))
                {
                    IEClassifier old = this._eType;
                    this._eType = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetEType;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetEType;
                    }
                    this.OnPropertyChanged("EType");
                    this.OnETypeChanged(new ValueChangedEventArgs(old, value));
                }
            }
        }
        
        /// <summary>
        /// The eGenericType property
        /// </summary>
        [XmlElementNameAttribute("eGenericType")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        public virtual IEGenericType EGenericType
        {
            get
            {
                return this._eGenericType;
            }
            set
            {
                if ((this._eGenericType != value))
                {
                    IEGenericType old = this._eGenericType;
                    this._eGenericType = value;
                    if ((old != null))
                    {
                        old.Parent = null;
                        old.Deleted -= this.OnResetEGenericType;
                    }
                    if ((value != null))
                    {
                        value.Parent = this;
                        value.Deleted += this.OnResetEGenericType;
                    }
                    this.OnPropertyChanged("EGenericType");
                    this.OnEGenericTypeChanged(new ValueChangedEventArgs(old, value));
                }
            }
        }
        
        /// <summary>
        /// Gets the child model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> Children
        {
            get
            {
                return base.Children.Concat(new ETypedElementChildrenCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new ETypedElementReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets fired when the Ordered property changed its value
        /// </summary>
        public event EventHandler OrderedChanged;
        
        /// <summary>
        /// Gets fired when the Unique property changed its value
        /// </summary>
        public event EventHandler UniqueChanged;
        
        /// <summary>
        /// Gets fired when the LowerBound property changed its value
        /// </summary>
        public event EventHandler LowerBoundChanged;
        
        /// <summary>
        /// Gets fired when the UpperBound property changed its value
        /// </summary>
        public event EventHandler UpperBoundChanged;
        
        /// <summary>
        /// Gets fired when the EType property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ETypeChanged;
        
        /// <summary>
        /// Gets fired when the EGenericType property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> EGenericTypeChanged;
        
        /// <summary>
        /// Raises the OrderedChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOrderedChanged(EventArgs eventArgs)
        {
            EventHandler handler = this.OrderedChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the UniqueChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnUniqueChanged(EventArgs eventArgs)
        {
            EventHandler handler = this.UniqueChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the LowerBoundChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLowerBoundChanged(EventArgs eventArgs)
        {
            EventHandler handler = this.LowerBoundChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the UpperBoundChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnUpperBoundChanged(EventArgs eventArgs)
        {
            EventHandler handler = this.UpperBoundChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ETypeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnETypeChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ETypeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the EType property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetEType(object sender, EventArgs eventArgs)
        {
            this.EType = null;
        }
        
        /// <summary>
        /// Raises the EGenericTypeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnEGenericTypeChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.EGenericTypeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the EGenericType property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetEGenericType(object sender, EventArgs eventArgs)
        {
            this.EGenericType = null;
        }
        
        /// <summary>
        /// Gets the relative URI fragment for the given child model element
        /// </summary>
        /// <returns>A fragment of the relative URI</returns>
        /// <param name="element">The element that should be looked for</param>
        protected override string GetRelativePathForNonIdentifiedChild(IModelElement element)
        {
            if ((element == this.EGenericType))
            {
                return ModelHelper.CreatePath("EGenericType");
            }
            return base.GetRelativePathForNonIdentifiedChild(element);
        }
        
        /// <summary>
        /// Resolves the given URI to a child model element
        /// </summary>
        /// <returns>The model element or null if it could not be found</returns>
        /// <param name="reference">The requested reference name</param>
        /// <param name="index">The index of this reference</param>
        protected override IModelElement GetModelElementForReference(string reference, int index)
        {
            if ((reference == "EGENERICTYPE"))
            {
                return this.EGenericType;
            }
            return base.GetModelElementForReference(reference, index);
        }
        
        /// <summary>
        /// Gets the Class element that describes the structure of the current model element
        /// </summary>
        public override NMF.Models.Meta.IClass GetClass()
        {
            return NMF.Models.Repository.MetaRepository.Instance.ResolveClass("http://www.eclipse.org/emf/2002/Ecore#//ETypedElement/");
        }
        
        /// <summary>
        /// The collection class to to represent the children of the ETypedElement class
        /// </summary>
        public class ETypedElementChildrenCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private ETypedElement _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public ETypedElementChildrenCollection(ETypedElement parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.EGenericType != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.EGenericTypeChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.EGenericTypeChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.EGenericType == null))
                {
                    IEGenericType eGenericTypeCasted = item.As<IEGenericType>();
                    if ((eGenericTypeCasted != null))
                    {
                        this._parent.EGenericType = eGenericTypeCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.EGenericType = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.EGenericType))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.EGenericType != null))
                {
                    array[arrayIndex] = this._parent.EGenericType;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.EGenericType == item))
                {
                    this._parent.EGenericType = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.EGenericType).GetEnumerator();
            }
        }
        
        /// <summary>
        /// The collection class to to represent the children of the ETypedElement class
        /// </summary>
        public class ETypedElementReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private ETypedElement _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public ETypedElementReferencedElementsCollection(ETypedElement parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.EType != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.EGenericType != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.ETypeChanged += this.PropagateValueChanges;
                this._parent.EGenericTypeChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.ETypeChanged -= this.PropagateValueChanges;
                this._parent.EGenericTypeChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.EType == null))
                {
                    IEClassifier eTypeCasted = item.As<IEClassifier>();
                    if ((eTypeCasted != null))
                    {
                        this._parent.EType = eTypeCasted;
                        return;
                    }
                }
                if ((this._parent.EGenericType == null))
                {
                    IEGenericType eGenericTypeCasted = item.As<IEGenericType>();
                    if ((eGenericTypeCasted != null))
                    {
                        this._parent.EGenericType = eGenericTypeCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.EType = null;
                this._parent.EGenericType = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.EType))
                {
                    return true;
                }
                if ((item == this._parent.EGenericType))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.EType != null))
                {
                    array[arrayIndex] = this._parent.EType;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.EGenericType != null))
                {
                    array[arrayIndex] = this._parent.EGenericType;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.EType == item))
                {
                    this._parent.EType = null;
                    return true;
                }
                if ((this._parent.EGenericType == item))
                {
                    this._parent.EGenericType = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.EType).Concat(this._parent.EGenericType).GetEnumerator();
            }
        }
    }
}

