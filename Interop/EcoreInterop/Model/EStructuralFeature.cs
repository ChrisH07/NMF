//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.34209
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;

namespace NMF.Interop.Ecore
{
    
    
    [XmlNamespaceAttribute("http://www.eclipse.org/emf/2002/Ecore")]
    [XmlNamespacePrefixAttribute("ecore")]
    [ModelRepresentationClassAttribute("http://www.eclipse.org/emf/2002/Ecore#//EStructuralFeature/")]
    [DebuggerDisplayAttribute("EStructuralFeature {Name}")]
    public abstract class EStructuralFeature : ETypedElement, IEStructuralFeature, IModelElement
    {
        
        /// <summary>
        /// The backing field for the Changeable property
        /// </summary>
        private Nullable<bool> _changeable;
        
        /// <summary>
        /// The backing field for the Volatile property
        /// </summary>
        private Nullable<bool> _volatile;
        
        /// <summary>
        /// The backing field for the Transient property
        /// </summary>
        private Nullable<bool> _transient;
        
        /// <summary>
        /// The backing field for the DefaultValueLiteral property
        /// </summary>
        private string _defaultValueLiteral;
        
        /// <summary>
        /// The backing field for the Unsettable property
        /// </summary>
        private Nullable<bool> _unsettable;
        
        /// <summary>
        /// The backing field for the Derived property
        /// </summary>
        private Nullable<bool> _derived;
        
        /// <summary>
        /// The changeable property
        /// </summary>
        [XmlElementNameAttribute("changeable")]
        [XmlAttributeAttribute(true)]
        public virtual Nullable<bool> Changeable
        {
            get
            {
                return this._changeable;
            }
            set
            {
                if ((value != this._changeable))
                {
                    this._changeable = value;
                    this.OnChangeableChanged(EventArgs.Empty);
                    this.OnPropertyChanged("Changeable");
                }
            }
        }
        
        /// <summary>
        /// The volatile property
        /// </summary>
        [XmlElementNameAttribute("volatile")]
        [XmlAttributeAttribute(true)]
        public virtual Nullable<bool> Volatile
        {
            get
            {
                return this._volatile;
            }
            set
            {
                if ((value != this._volatile))
                {
                    this._volatile = value;
                    this.OnVolatileChanged(EventArgs.Empty);
                    this.OnPropertyChanged("Volatile");
                }
            }
        }
        
        /// <summary>
        /// The transient property
        /// </summary>
        [XmlElementNameAttribute("transient")]
        [XmlAttributeAttribute(true)]
        public virtual Nullable<bool> Transient
        {
            get
            {
                return this._transient;
            }
            set
            {
                if ((value != this._transient))
                {
                    this._transient = value;
                    this.OnTransientChanged(EventArgs.Empty);
                    this.OnPropertyChanged("Transient");
                }
            }
        }
        
        /// <summary>
        /// The defaultValueLiteral property
        /// </summary>
        [XmlElementNameAttribute("defaultValueLiteral")]
        [XmlAttributeAttribute(true)]
        public virtual string DefaultValueLiteral
        {
            get
            {
                return this._defaultValueLiteral;
            }
            set
            {
                if ((value != this._defaultValueLiteral))
                {
                    this._defaultValueLiteral = value;
                    this.OnDefaultValueLiteralChanged(EventArgs.Empty);
                    this.OnPropertyChanged("DefaultValueLiteral");
                }
            }
        }
        
        /// <summary>
        /// The unsettable property
        /// </summary>
        [XmlElementNameAttribute("unsettable")]
        [XmlAttributeAttribute(true)]
        public virtual Nullable<bool> Unsettable
        {
            get
            {
                return this._unsettable;
            }
            set
            {
                if ((value != this._unsettable))
                {
                    this._unsettable = value;
                    this.OnUnsettableChanged(EventArgs.Empty);
                    this.OnPropertyChanged("Unsettable");
                }
            }
        }
        
        /// <summary>
        /// The derived property
        /// </summary>
        [XmlElementNameAttribute("derived")]
        [XmlAttributeAttribute(true)]
        public virtual Nullable<bool> Derived
        {
            get
            {
                return this._derived;
            }
            set
            {
                if ((value != this._derived))
                {
                    this._derived = value;
                    this.OnDerivedChanged(EventArgs.Empty);
                    this.OnPropertyChanged("Derived");
                }
            }
        }
        
        /// <summary>
        /// The eContainingClass property
        /// </summary>
        [XmlElementNameAttribute("eContainingClass")]
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Hidden)]
        [XmlAttributeAttribute(true)]
        public virtual IEClass EContainingClass
        {
            get
            {
                return ModelHelper.CastAs<IEClass>(this.Parent);
            }
            set
            {
                this.Parent = value;
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new EStructuralFeatureReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets fired when the Changeable property changed its value
        /// </summary>
        public event EventHandler ChangeableChanged;
        
        /// <summary>
        /// Gets fired when the Volatile property changed its value
        /// </summary>
        public event EventHandler VolatileChanged;
        
        /// <summary>
        /// Gets fired when the Transient property changed its value
        /// </summary>
        public event EventHandler TransientChanged;
        
        /// <summary>
        /// Gets fired when the DefaultValueLiteral property changed its value
        /// </summary>
        public event EventHandler DefaultValueLiteralChanged;
        
        /// <summary>
        /// Gets fired when the Unsettable property changed its value
        /// </summary>
        public event EventHandler UnsettableChanged;
        
        /// <summary>
        /// Gets fired when the Derived property changed its value
        /// </summary>
        public event EventHandler DerivedChanged;
        
        /// <summary>
        /// Gets fired when the EContainingClass property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> EContainingClassChanged;
        
        /// <summary>
        /// Raises the ChangeableChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnChangeableChanged(EventArgs eventArgs)
        {
            EventHandler handler = this.ChangeableChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the VolatileChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnVolatileChanged(EventArgs eventArgs)
        {
            EventHandler handler = this.VolatileChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the TransientChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTransientChanged(EventArgs eventArgs)
        {
            EventHandler handler = this.TransientChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the DefaultValueLiteralChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDefaultValueLiteralChanged(EventArgs eventArgs)
        {
            EventHandler handler = this.DefaultValueLiteralChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the UnsettableChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnUnsettableChanged(EventArgs eventArgs)
        {
            EventHandler handler = this.UnsettableChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the DerivedChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDerivedChanged(EventArgs eventArgs)
        {
            EventHandler handler = this.DerivedChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the EContainingClassChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnEContainingClassChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.EContainingClassChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Gets called when the parent model element of the current model element changes
        /// </summary>
        /// <param name="oldParent">The old parent model element</param>
        /// <param name="newParent">The new parent model element</param>
        protected override void OnParentChanged(IModelElement newParent, IModelElement oldParent)
        {
            IEClass oldEContainingClass = ModelHelper.CastAs<IEClass>(oldParent);
            IEClass newEContainingClass = ModelHelper.CastAs<IEClass>(newParent);
            if ((oldEContainingClass != null))
            {
                oldEContainingClass.EStructuralFeatures.Remove(this);
            }
            if ((newEContainingClass != null))
            {
                newEContainingClass.EStructuralFeatures.Add(this);
            }
            this.OnPropertyChanged("EContainingClass");
            this.OnEContainingClassChanged(new ValueChangedEventArgs(oldEContainingClass, newEContainingClass));
        }
        
        /// <summary>
        /// Gets the Class element that describes the structure of the current model element
        /// </summary>
        public override NMF.Models.Meta.IClass GetClass()
        {
            return NMF.Models.Repository.MetaRepository.Instance.ResolveClass("http://www.eclipse.org/emf/2002/Ecore#//EStructuralFeature/");
        }
        
        /// <summary>
        /// The collection class to to represent the children of the EStructuralFeature class
        /// </summary>
        public class EStructuralFeatureReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private EStructuralFeature _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public EStructuralFeatureReferencedElementsCollection(EStructuralFeature parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.EContainingClass != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.EContainingClassChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.EContainingClassChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.EContainingClass == null))
                {
                    IEClass eContainingClassCasted = item.As<IEClass>();
                    if ((eContainingClassCasted != null))
                    {
                        this._parent.EContainingClass = eContainingClassCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.EContainingClass = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.EContainingClass))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.EContainingClass != null))
                {
                    array[arrayIndex] = this._parent.EContainingClass;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.EContainingClass == item))
                {
                    this._parent.EContainingClass = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.EContainingClass).GetEnumerator();
            }
        }
    }
}

