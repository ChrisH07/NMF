//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.34209
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;

namespace NMF.Interop.Ecore
{
    
    
    /// <summary>
    /// The public interface for EEnumLiteral
    /// </summary>
    [XmlNamespaceAttribute("http://www.eclipse.org/emf/2002/Ecore")]
    [XmlNamespacePrefixAttribute("ecore")]
    [ModelRepresentationClassAttribute("http://www.eclipse.org/emf/2002/Ecore#//EEnumLiteral/")]
    [XmlDefaultImplementationTypeAttribute(typeof(EEnumLiteral))]
    [DefaultImplementationTypeAttribute(typeof(EEnumLiteral))]
    public interface IEEnumLiteral : IModelElement, IENamedElement
    {
        
        /// <summary>
        /// The value property
        /// </summary>
        Nullable<int> Value
        {
            get;
            set;
        }
        
        /// <summary>
        /// The instance property
        /// </summary>
        object Instance
        {
            get;
            set;
        }
        
        /// <summary>
        /// The literal property
        /// </summary>
        string Literal
        {
            get;
            set;
        }
        
        /// <summary>
        /// The eEnum property
        /// </summary>
        IEEnum EEnum
        {
            get;
            set;
        }
        
        /// <summary>
        /// Gets fired when the Value property changed its value
        /// </summary>
        event EventHandler ValueChanged;
        
        /// <summary>
        /// Gets fired when the Instance property changed its value
        /// </summary>
        event EventHandler InstanceChanged;
        
        /// <summary>
        /// Gets fired when the Literal property changed its value
        /// </summary>
        event EventHandler LiteralChanged;
        
        /// <summary>
        /// Gets fired when the EEnum property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> EEnumChanged;
    }
}

