//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Interop.Ecore;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;

namespace NMF.Interop.Type
{
    
    
    /// <summary>
    /// The default implementation of the ProcessingInstruction class
    /// </summary>
    [XmlNamespaceAttribute("http://www.eclipse.org/emf/2003/XMLType")]
    [XmlNamespacePrefixAttribute("ecore.xml.type")]
    [ModelRepresentationClassAttribute("http://www.eclipse.org/emf/2003/XMLType#//ProcessingInstruction")]
    public partial class ProcessingInstruction : ModelElement, IProcessingInstruction, IModelElement
    {
        
        /// <summary>
        /// The backing field for the Data property
        /// </summary>
        private string _data;
        
        private static Lazy<ITypedElement> _dataAttribute = new Lazy<ITypedElement>(RetrieveDataAttribute);
        
        /// <summary>
        /// The backing field for the Target property
        /// </summary>
        private string _target;
        
        private static Lazy<ITypedElement> _targetAttribute = new Lazy<ITypedElement>(RetrieveTargetAttribute);
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The data property
        /// </summary>
        [XmlElementNameAttribute("data")]
        [XmlAttributeAttribute(true)]
        public string Data
        {
            get
            {
                return this._data;
            }
            set
            {
                if ((this._data != value))
                {
                    string old = this._data;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnDataChanging(e);
                    this.OnPropertyChanging("Data", e, _dataAttribute);
                    this._data = value;
                    this.OnDataChanged(e);
                    this.OnPropertyChanged("Data", e, _dataAttribute);
                }
            }
        }
        
        /// <summary>
        /// The target property
        /// </summary>
        [XmlElementNameAttribute("target")]
        [XmlAttributeAttribute(true)]
        public string Target
        {
            get
            {
                return this._target;
            }
            set
            {
                if ((this._target != value))
                {
                    string old = this._target;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTargetChanging(e);
                    this.OnPropertyChanging("Target", e, _targetAttribute);
                    this._target = value;
                    this.OnTargetChanged(e);
                    this.OnPropertyChanged("Target", e, _targetAttribute);
                }
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/emf/2003/XMLType#//ProcessingInstruction")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the Data property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DataChanging;
        
        /// <summary>
        /// Gets fired when the Data property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DataChanged;
        
        /// <summary>
        /// Gets fired before the Target property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TargetChanging;
        
        /// <summary>
        /// Gets fired when the Target property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TargetChanged;
        
        private static ITypedElement RetrieveDataAttribute()
        {
            return ((ITypedElement)(((ModelElement)(ProcessingInstruction.ClassInstance)).Resolve("data")));
        }
        
        /// <summary>
        /// Raises the DataChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDataChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DataChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the DataChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDataChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DataChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveTargetAttribute()
        {
            return ((ITypedElement)(((ModelElement)(ProcessingInstruction.ClassInstance)).Resolve("target")));
        }
        
        /// <summary>
        /// Raises the TargetChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTargetChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TargetChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the TargetChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTargetChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TargetChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "DATA"))
            {
                return this.Data;
            }
            if ((attribute == "TARGET"))
            {
                return this.Target;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "DATA"))
            {
                this.Data = ((string)(value));
                return;
            }
            if ((feature == "TARGET"))
            {
                this.Target = ((string)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "DATA"))
            {
                return new DataProxy(this);
            }
            if ((attribute == "TARGET"))
            {
                return new TargetProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.eclipse.org/emf/2003/XMLType#//ProcessingInstruction")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the data property
        /// </summary>
        private sealed class DataProxy : ModelPropertyChange<IProcessingInstruction, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public DataProxy(IProcessingInstruction modelElement) : 
                    base(modelElement, "data")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Data;
                }
                set
                {
                    this.ModelElement.Data = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the target property
        /// </summary>
        private sealed class TargetProxy : ModelPropertyChange<IProcessingInstruction, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public TargetProxy(IProcessingInstruction modelElement) : 
                    base(modelElement, "target")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Target;
                }
                set
                {
                    this.ModelElement.Target = value;
                }
            }
        }
    }
}

